/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimRoster : TBase
{
  private string _name;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// none表示用户和contact之前没有任何的关系（虽然在server的buddy list中存在）
  /// to表示用户能看到contact的presence，但是contact看不到用户的Presence
  /// from和to的含义相反，指用户看不到contact的presence，但是contact可以看到
  /// both表示相关之间都能看到对方的presence
  /// </summary>
  public string Subscription { get; set; }

  public Tid Tid { get; set; }

  /// <summary>
  /// 用户名
  /// </summary>
  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool name;
    public bool extraMap;
  }

  public TimRoster()
  {
  }

  public TimRoster(string subscription, Tid tid) : this()
  {
    this.Subscription = subscription;
    this.Tid = tid;
  }

  public TimRoster DeepCopy()
  {
    var tmp158 = new TimRoster();
    if((Subscription != null))
    {
      tmp158.Subscription = this.Subscription;
    }
    if((Tid != null))
    {
      tmp158.Tid = (Tid)this.Tid.DeepCopy();
    }
    if((Name != null) && __isset.name)
    {
      tmp158.Name = this.Name;
    }
    tmp158.__isset.name = this.__isset.name;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp158.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp158.__isset.extraMap = this.__isset.extraMap;
    return tmp158;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_subscription = false;
      bool isset_tid = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Subscription = await iprot.ReadStringAsync(cancellationToken);
              isset_subscription = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              Tid = new Tid();
              await Tid.ReadAsync(iprot, cancellationToken);
              isset_tid = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Map)
            {
              {
                var _map159 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map159.Count);
                for(int _i160 = 0; _i160 < _map159.Count; ++_i160)
                {
                  string _key161;
                  string _val162;
                  _key161 = await iprot.ReadStringAsync(cancellationToken);
                  _val162 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key161] = _val162;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_subscription)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_tid)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp163 = new TStruct("TimRoster");
      await oprot.WriteStructBeginAsync(tmp163, cancellationToken);
      var tmp164 = new TField();
      if((Subscription != null))
      {
        tmp164.Name = "subscription";
        tmp164.Type = TType.String;
        tmp164.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp164, cancellationToken);
        await oprot.WriteStringAsync(Subscription, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Tid != null))
      {
        tmp164.Name = "tid";
        tmp164.Type = TType.Struct;
        tmp164.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp164, cancellationToken);
        await Tid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Name != null) && __isset.name)
      {
        tmp164.Name = "name";
        tmp164.Type = TType.String;
        tmp164.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp164, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp164.Name = "extraMap";
        tmp164.Type = TType.Map;
        tmp164.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp164, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter165 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter165, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter165], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimRoster other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(Subscription, other.Subscription)
      && global::System.Object.Equals(Tid, other.Tid)
      && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Subscription != null))
      {
        hashcode = (hashcode * 397) + Subscription.GetHashCode();
      }
      if((Tid != null))
      {
        hashcode = (hashcode * 397) + Tid.GetHashCode();
      }
      if((Name != null) && __isset.name)
      {
        hashcode = (hashcode * 397) + Name.GetHashCode();
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp166 = new StringBuilder("TimRoster(");
    if((Subscription != null))
    {
      tmp166.Append(", Subscription: ");
      Subscription.ToString(tmp166);
    }
    if((Tid != null))
    {
      tmp166.Append(", Tid: ");
      Tid.ToString(tmp166);
    }
    if((Name != null) && __isset.name)
    {
      tmp166.Append(", Name: ");
      Name.ToString(tmp166);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp166.Append(", ExtraMap: ");
      ExtraMap.ToString(tmp166);
    }
    tmp166.Append(')');
    return tmp166.ToString();
  }
}

