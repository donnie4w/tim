/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimUserBean : TBase
{
  private Tid _tid;
  private string _nickname;
  private string _remarkname;
  private string _brithday;
  private short _gender;
  private string _headurl;
  private TimArea _area;
  private byte[] _headbyte;
  private List<byte[]> _photoBytes;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 用户bean
  /// </summary>
  public Tid Tid
  {
    get
    {
      return _tid;
    }
    set
    {
      __isset.tid = true;
      this._tid = value;
    }
  }

  /// <summary>
  /// 昵称
  /// </summary>
  public string Nickname
  {
    get
    {
      return _nickname;
    }
    set
    {
      __isset.nickname = true;
      this._nickname = value;
    }
  }

  /// <summary>
  /// 备注名称
  /// </summary>
  public string Remarkname
  {
    get
    {
      return _remarkname;
    }
    set
    {
      __isset.remarkname = true;
      this._remarkname = value;
    }
  }

  /// <summary>
  /// 生日     2000-01-01
  /// </summary>
  public string Brithday
  {
    get
    {
      return _brithday;
    }
    set
    {
      __isset.brithday = true;
      this._brithday = value;
    }
  }

  /// <summary>
  /// 性别  自行约定 如 ：  0不知，1男，2女
  /// </summary>
  public short Gender
  {
    get
    {
      return _gender;
    }
    set
    {
      __isset.gender = true;
      this._gender = value;
    }
  }

  /// <summary>
  /// 头像地址 http://xxx.jpg
  /// </summary>
  public string Headurl
  {
    get
    {
      return _headurl;
    }
    set
    {
      __isset.headurl = true;
      this._headurl = value;
    }
  }

  /// <summary>
  /// 地区
  /// </summary>
  public TimArea Area
  {
    get
    {
      return _area;
    }
    set
    {
      __isset.area = true;
      this._area = value;
    }
  }

  /// <summary>
  /// 头像
  /// </summary>
  public byte[] Headbyte
  {
    get
    {
      return _headbyte;
    }
    set
    {
      __isset.headbyte = true;
      this._headbyte = value;
    }
  }

  /// <summary>
  /// 其他图片
  /// </summary>
  public List<byte[]> PhotoBytes
  {
    get
    {
      return _photoBytes;
    }
    set
    {
      __isset.photoBytes = true;
      this._photoBytes = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool tid;
    public bool nickname;
    public bool remarkname;
    public bool brithday;
    public bool gender;
    public bool headurl;
    public bool area;
    public bool headbyte;
    public bool photoBytes;
    public bool extraList;
    public bool extraMap;
  }

  public TimUserBean()
  {
  }

  public TimUserBean DeepCopy()
  {
    var tmp76 = new TimUserBean();
    if((Tid != null) && __isset.tid)
    {
      tmp76.Tid = (Tid)this.Tid.DeepCopy();
    }
    tmp76.__isset.tid = this.__isset.tid;
    if((Nickname != null) && __isset.nickname)
    {
      tmp76.Nickname = this.Nickname;
    }
    tmp76.__isset.nickname = this.__isset.nickname;
    if((Remarkname != null) && __isset.remarkname)
    {
      tmp76.Remarkname = this.Remarkname;
    }
    tmp76.__isset.remarkname = this.__isset.remarkname;
    if((Brithday != null) && __isset.brithday)
    {
      tmp76.Brithday = this.Brithday;
    }
    tmp76.__isset.brithday = this.__isset.brithday;
    if(__isset.gender)
    {
      tmp76.Gender = this.Gender;
    }
    tmp76.__isset.gender = this.__isset.gender;
    if((Headurl != null) && __isset.headurl)
    {
      tmp76.Headurl = this.Headurl;
    }
    tmp76.__isset.headurl = this.__isset.headurl;
    if((Area != null) && __isset.area)
    {
      tmp76.Area = (TimArea)this.Area.DeepCopy();
    }
    tmp76.__isset.area = this.__isset.area;
    if((Headbyte != null) && __isset.headbyte)
    {
      tmp76.Headbyte = this.Headbyte.ToArray();
    }
    tmp76.__isset.headbyte = this.__isset.headbyte;
    if((PhotoBytes != null) && __isset.photoBytes)
    {
      tmp76.PhotoBytes = this.PhotoBytes.DeepCopy();
    }
    tmp76.__isset.photoBytes = this.__isset.photoBytes;
    if((ExtraList != null) && __isset.extraList)
    {
      tmp76.ExtraList = this.ExtraList.DeepCopy();
    }
    tmp76.__isset.extraList = this.__isset.extraList;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp76.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp76.__isset.extraMap = this.__isset.extraMap;
    return tmp76;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Tid = new Tid();
              await Tid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Nickname = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Remarkname = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Brithday = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I16)
            {
              Gender = await iprot.ReadI16Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              Headurl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Struct)
            {
              Area = new TimArea();
              await Area.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.String)
            {
              Headbyte = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.List)
            {
              {
                var _list77 = await iprot.ReadListBeginAsync(cancellationToken);
                PhotoBytes = new List<byte[]>(_list77.Count);
                for(int _i78 = 0; _i78 < _list77.Count; ++_i78)
                {
                  byte[] _elem79;
                  _elem79 = await iprot.ReadBinaryAsync(cancellationToken);
                  PhotoBytes.Add(_elem79);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.List)
            {
              {
                var _list80 = await iprot.ReadListBeginAsync(cancellationToken);
                ExtraList = new List<TimNode>(_list80.Count);
                for(int _i81 = 0; _i81 < _list80.Count; ++_i81)
                {
                  TimNode _elem82;
                  _elem82 = new TimNode();
                  await _elem82.ReadAsync(iprot, cancellationToken);
                  ExtraList.Add(_elem82);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Map)
            {
              {
                var _map83 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map83.Count);
                for(int _i84 = 0; _i84 < _map83.Count; ++_i84)
                {
                  string _key85;
                  string _val86;
                  _key85 = await iprot.ReadStringAsync(cancellationToken);
                  _val86 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key85] = _val86;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp87 = new TStruct("TimUserBean");
      await oprot.WriteStructBeginAsync(tmp87, cancellationToken);
      var tmp88 = new TField();
      if((Tid != null) && __isset.tid)
      {
        tmp88.Name = "tid";
        tmp88.Type = TType.Struct;
        tmp88.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await Tid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Nickname != null) && __isset.nickname)
      {
        tmp88.Name = "nickname";
        tmp88.Type = TType.String;
        tmp88.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteStringAsync(Nickname, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Remarkname != null) && __isset.remarkname)
      {
        tmp88.Name = "remarkname";
        tmp88.Type = TType.String;
        tmp88.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteStringAsync(Remarkname, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Brithday != null) && __isset.brithday)
      {
        tmp88.Name = "brithday";
        tmp88.Type = TType.String;
        tmp88.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteStringAsync(Brithday, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.gender)
      {
        tmp88.Name = "gender";
        tmp88.Type = TType.I16;
        tmp88.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteI16Async(Gender, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Headurl != null) && __isset.headurl)
      {
        tmp88.Name = "headurl";
        tmp88.Type = TType.String;
        tmp88.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteStringAsync(Headurl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Area != null) && __isset.area)
      {
        tmp88.Name = "area";
        tmp88.Type = TType.Struct;
        tmp88.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await Area.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Headbyte != null) && __isset.headbyte)
      {
        tmp88.Name = "headbyte";
        tmp88.Type = TType.String;
        tmp88.ID = 8;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteBinaryAsync(Headbyte, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((PhotoBytes != null) && __isset.photoBytes)
      {
        tmp88.Name = "photoBytes";
        tmp88.Type = TType.List;
        tmp88.ID = 9;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.String, PhotoBytes.Count), cancellationToken);
        foreach (byte[] _iter89 in PhotoBytes)
        {
          await oprot.WriteBinaryAsync(_iter89, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        tmp88.Name = "extraList";
        tmp88.Type = TType.List;
        tmp88.ID = 10;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, ExtraList.Count), cancellationToken);
        foreach (TimNode _iter90 in ExtraList)
        {
          await _iter90.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp88.Name = "extraMap";
        tmp88.Type = TType.Map;
        tmp88.ID = 11;
        await oprot.WriteFieldBeginAsync(tmp88, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter91 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter91, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter91], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimUserBean other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.tid == other.__isset.tid) && ((!__isset.tid) || (global::System.Object.Equals(Tid, other.Tid))))
      && ((__isset.nickname == other.__isset.nickname) && ((!__isset.nickname) || (global::System.Object.Equals(Nickname, other.Nickname))))
      && ((__isset.remarkname == other.__isset.remarkname) && ((!__isset.remarkname) || (global::System.Object.Equals(Remarkname, other.Remarkname))))
      && ((__isset.brithday == other.__isset.brithday) && ((!__isset.brithday) || (global::System.Object.Equals(Brithday, other.Brithday))))
      && ((__isset.gender == other.__isset.gender) && ((!__isset.gender) || (global::System.Object.Equals(Gender, other.Gender))))
      && ((__isset.headurl == other.__isset.headurl) && ((!__isset.headurl) || (global::System.Object.Equals(Headurl, other.Headurl))))
      && ((__isset.area == other.__isset.area) && ((!__isset.area) || (global::System.Object.Equals(Area, other.Area))))
      && ((__isset.headbyte == other.__isset.headbyte) && ((!__isset.headbyte) || (TCollections.Equals(Headbyte, other.Headbyte))))
      && ((__isset.photoBytes == other.__isset.photoBytes) && ((!__isset.photoBytes) || (TCollections.Equals(PhotoBytes, other.PhotoBytes))))
      && ((__isset.extraList == other.__isset.extraList) && ((!__isset.extraList) || (TCollections.Equals(ExtraList, other.ExtraList))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Tid != null) && __isset.tid)
      {
        hashcode = (hashcode * 397) + Tid.GetHashCode();
      }
      if((Nickname != null) && __isset.nickname)
      {
        hashcode = (hashcode * 397) + Nickname.GetHashCode();
      }
      if((Remarkname != null) && __isset.remarkname)
      {
        hashcode = (hashcode * 397) + Remarkname.GetHashCode();
      }
      if((Brithday != null) && __isset.brithday)
      {
        hashcode = (hashcode * 397) + Brithday.GetHashCode();
      }
      if(__isset.gender)
      {
        hashcode = (hashcode * 397) + Gender.GetHashCode();
      }
      if((Headurl != null) && __isset.headurl)
      {
        hashcode = (hashcode * 397) + Headurl.GetHashCode();
      }
      if((Area != null) && __isset.area)
      {
        hashcode = (hashcode * 397) + Area.GetHashCode();
      }
      if((Headbyte != null) && __isset.headbyte)
      {
        hashcode = (hashcode * 397) + Headbyte.GetHashCode();
      }
      if((PhotoBytes != null) && __isset.photoBytes)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(PhotoBytes);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraList);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp92 = new StringBuilder("TimUserBean(");
    int tmp93 = 0;
    if((Tid != null) && __isset.tid)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Tid: ");
      Tid.ToString(tmp92);
    }
    if((Nickname != null) && __isset.nickname)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Nickname: ");
      Nickname.ToString(tmp92);
    }
    if((Remarkname != null) && __isset.remarkname)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Remarkname: ");
      Remarkname.ToString(tmp92);
    }
    if((Brithday != null) && __isset.brithday)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Brithday: ");
      Brithday.ToString(tmp92);
    }
    if(__isset.gender)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Gender: ");
      Gender.ToString(tmp92);
    }
    if((Headurl != null) && __isset.headurl)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Headurl: ");
      Headurl.ToString(tmp92);
    }
    if((Area != null) && __isset.area)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Area: ");
      Area.ToString(tmp92);
    }
    if((Headbyte != null) && __isset.headbyte)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("Headbyte: ");
      Headbyte.ToString(tmp92);
    }
    if((PhotoBytes != null) && __isset.photoBytes)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("PhotoBytes: ");
      PhotoBytes.ToString(tmp92);
    }
    if((ExtraList != null) && __isset.extraList)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("ExtraList: ");
      ExtraList.ToString(tmp92);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      if(0 < tmp93++) { tmp92.Append(", "); }
      tmp92.Append("ExtraMap: ");
      ExtraMap.ToString(tmp92);
    }
    tmp92.Append(')');
    return tmp92.ToString();
  }
}

