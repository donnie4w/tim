/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimMessageIq : TBase
{
  private List<string> _tidlist;
  private TimPage _timPage;
  private List<string> _midlist;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// tid集合
  /// </summary>
  public List<string> Tidlist
  {
    get
    {
      return _tidlist;
    }
    set
    {
      __isset.tidlist = true;
      this._tidlist = value;
    }
  }

  /// <summary>
  /// 分页
  /// </summary>
  public TimPage TimPage
  {
    get
    {
      return _timPage;
    }
    set
    {
      __isset.timPage = true;
      this._timPage = value;
    }
  }

  /// <summary>
  /// mid集合
  /// </summary>
  public List<string> Midlist
  {
    get
    {
      return _midlist;
    }
    set
    {
      __isset.midlist = true;
      this._midlist = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool tidlist;
    public bool timPage;
    public bool midlist;
    public bool extraMap;
  }

  public TimMessageIq()
  {
  }

  public TimMessageIq DeepCopy()
  {
    var tmp236 = new TimMessageIq();
    if((Tidlist != null) && __isset.tidlist)
    {
      tmp236.Tidlist = this.Tidlist.DeepCopy();
    }
    tmp236.__isset.tidlist = this.__isset.tidlist;
    if((TimPage != null) && __isset.timPage)
    {
      tmp236.TimPage = (TimPage)this.TimPage.DeepCopy();
    }
    tmp236.__isset.timPage = this.__isset.timPage;
    if((Midlist != null) && __isset.midlist)
    {
      tmp236.Midlist = this.Midlist.DeepCopy();
    }
    tmp236.__isset.midlist = this.__isset.midlist;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp236.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp236.__isset.extraMap = this.__isset.extraMap;
    return tmp236;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list237 = await iprot.ReadListBeginAsync(cancellationToken);
                Tidlist = new List<string>(_list237.Count);
                for(int _i238 = 0; _i238 < _list237.Count; ++_i238)
                {
                  string _elem239;
                  _elem239 = await iprot.ReadStringAsync(cancellationToken);
                  Tidlist.Add(_elem239);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              TimPage = new TimPage();
              await TimPage.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                var _list240 = await iprot.ReadListBeginAsync(cancellationToken);
                Midlist = new List<string>(_list240.Count);
                for(int _i241 = 0; _i241 < _list240.Count; ++_i241)
                {
                  string _elem242;
                  _elem242 = await iprot.ReadStringAsync(cancellationToken);
                  Midlist.Add(_elem242);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Map)
            {
              {
                var _map243 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map243.Count);
                for(int _i244 = 0; _i244 < _map243.Count; ++_i244)
                {
                  string _key245;
                  string _val246;
                  _key245 = await iprot.ReadStringAsync(cancellationToken);
                  _val246 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key245] = _val246;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp247 = new TStruct("TimMessageIq");
      await oprot.WriteStructBeginAsync(tmp247, cancellationToken);
      var tmp248 = new TField();
      if((Tidlist != null) && __isset.tidlist)
      {
        tmp248.Name = "tidlist";
        tmp248.Type = TType.List;
        tmp248.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp248, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.String, Tidlist.Count), cancellationToken);
        foreach (string _iter249 in Tidlist)
        {
          await oprot.WriteStringAsync(_iter249, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TimPage != null) && __isset.timPage)
      {
        tmp248.Name = "timPage";
        tmp248.Type = TType.Struct;
        tmp248.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp248, cancellationToken);
        await TimPage.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Midlist != null) && __isset.midlist)
      {
        tmp248.Name = "midlist";
        tmp248.Type = TType.List;
        tmp248.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp248, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.String, Midlist.Count), cancellationToken);
        foreach (string _iter250 in Midlist)
        {
          await oprot.WriteStringAsync(_iter250, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp248.Name = "extraMap";
        tmp248.Type = TType.Map;
        tmp248.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp248, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter251 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter251, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter251], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimMessageIq other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.tidlist == other.__isset.tidlist) && ((!__isset.tidlist) || (TCollections.Equals(Tidlist, other.Tidlist))))
      && ((__isset.timPage == other.__isset.timPage) && ((!__isset.timPage) || (global::System.Object.Equals(TimPage, other.TimPage))))
      && ((__isset.midlist == other.__isset.midlist) && ((!__isset.midlist) || (TCollections.Equals(Midlist, other.Midlist))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Tidlist != null) && __isset.tidlist)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Tidlist);
      }
      if((TimPage != null) && __isset.timPage)
      {
        hashcode = (hashcode * 397) + TimPage.GetHashCode();
      }
      if((Midlist != null) && __isset.midlist)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Midlist);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp252 = new StringBuilder("TimMessageIq(");
    int tmp253 = 0;
    if((Tidlist != null) && __isset.tidlist)
    {
      if(0 < tmp253++) { tmp252.Append(", "); }
      tmp252.Append("Tidlist: ");
      Tidlist.ToString(tmp252);
    }
    if((TimPage != null) && __isset.timPage)
    {
      if(0 < tmp253++) { tmp252.Append(", "); }
      tmp252.Append("TimPage: ");
      TimPage.ToString(tmp252);
    }
    if((Midlist != null) && __isset.midlist)
    {
      if(0 < tmp253++) { tmp252.Append(", "); }
      tmp252.Append("Midlist: ");
      Midlist.ToString(tmp252);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      if(0 < tmp253++) { tmp252.Append(", "); }
      tmp252.Append("ExtraMap: ");
      ExtraMap.ToString(tmp252);
    }
    tmp252.Append(')');
    return tmp252.ToString();
  }
}

