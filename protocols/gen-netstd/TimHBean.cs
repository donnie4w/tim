/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimHBean : TBase
{
  private int _platform;

  /// <summary>
  /// 渠道
  /// </summary>
  public int Chl { get; set; }

  /// <summary>
  /// 平台
  /// </summary>
  public int Platform
  {
    get
    {
      return _platform;
    }
    set
    {
      __isset.platform = true;
      this._platform = value;
    }
  }

  /// <summary>
  /// version 客户端协议版本
  /// </summary>
  public short Version { get; set; }


  public Isset __isset;
  public struct Isset
  {
    public bool platform;
  }

  public TimHBean()
  {
  }

  public TimHBean(int chl, short version) : this()
  {
    this.Chl = chl;
    this.Version = version;
  }

  public TimHBean DeepCopy()
  {
    var tmp24 = new TimHBean();
    tmp24.Chl = this.Chl;
    if(__isset.platform)
    {
      tmp24.Platform = this.Platform;
    }
    tmp24.__isset.platform = this.__isset.platform;
    tmp24.Version = this.Version;
    return tmp24;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_chl = false;
      bool isset_version = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Chl = await iprot.ReadI32Async(cancellationToken);
              isset_chl = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Platform = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I16)
            {
              Version = await iprot.ReadI16Async(cancellationToken);
              isset_version = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_chl)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_version)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp25 = new TStruct("TimHBean");
      await oprot.WriteStructBeginAsync(tmp25, cancellationToken);
      var tmp26 = new TField();
      tmp26.Name = "chl";
      tmp26.Type = TType.I32;
      tmp26.ID = 1;
      await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
      await oprot.WriteI32Async(Chl, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if(__isset.platform)
      {
        tmp26.Name = "platform";
        tmp26.Type = TType.I32;
        tmp26.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
        await oprot.WriteI32Async(Platform, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp26.Name = "version";
      tmp26.Type = TType.I16;
      tmp26.ID = 3;
      await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
      await oprot.WriteI16Async(Version, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimHBean other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(Chl, other.Chl)
      && ((__isset.platform == other.__isset.platform) && ((!__isset.platform) || (global::System.Object.Equals(Platform, other.Platform))))
      && global::System.Object.Equals(Version, other.Version);
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      hashcode = (hashcode * 397) + Chl.GetHashCode();
      if(__isset.platform)
      {
        hashcode = (hashcode * 397) + Platform.GetHashCode();
      }
      hashcode = (hashcode * 397) + Version.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp27 = new StringBuilder("TimHBean(");
    tmp27.Append(", Chl: ");
    Chl.ToString(tmp27);
    if(__isset.platform)
    {
      tmp27.Append(", Platform: ");
      Platform.ToString(tmp27);
    }
    tmp27.Append(", Version: ");
    Version.ToString(tmp27);
    tmp27.Append(')');
    return tmp27.ToString();
  }
}

