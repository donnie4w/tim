/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimRoom : TBase
{
  private Tid _tid;
  private Tid _founderTid;
  private List<Tid> _HostsTid;
  private List<Tid> _membersTid;
  private string _headurl;
  private string _roomName;
  private string _desc;
  private TimTime _createTime;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 房间Tid
  /// </summary>
  public Tid Tid
  {
    get
    {
      return _tid;
    }
    set
    {
      __isset.tid = true;
      this._tid = value;
    }
  }

  /// <summary>
  /// 创建人Tid
  /// </summary>
  public Tid FounderTid
  {
    get
    {
      return _founderTid;
    }
    set
    {
      __isset.founderTid = true;
      this._founderTid = value;
    }
  }

  /// <summary>
  /// 主持人Tid
  /// </summary>
  public List<Tid> HostsTid
  {
    get
    {
      return _HostsTid;
    }
    set
    {
      __isset.HostsTid = true;
      this._HostsTid = value;
    }
  }

  /// <summary>
  /// memberTid
  /// </summary>
  public List<Tid> MembersTid
  {
    get
    {
      return _membersTid;
    }
    set
    {
      __isset.membersTid = true;
      this._membersTid = value;
    }
  }

  /// <summary>
  /// 头像地址 http://xxx.jpg
  /// </summary>
  public string Headurl
  {
    get
    {
      return _headurl;
    }
    set
    {
      __isset.headurl = true;
      this._headurl = value;
    }
  }

  /// <summary>
  /// 房间名称
  /// </summary>
  public string RoomName
  {
    get
    {
      return _roomName;
    }
    set
    {
      __isset.roomName = true;
      this._roomName = value;
    }
  }

  /// <summary>
  /// 房间说明
  /// </summary>
  public string Desc
  {
    get
    {
      return _desc;
    }
    set
    {
      __isset.desc = true;
      this._desc = value;
    }
  }

  /// <summary>
  /// 房间创建时间
  /// </summary>
  public TimTime CreateTime
  {
    get
    {
      return _createTime;
    }
    set
    {
      __isset.createTime = true;
      this._createTime = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool tid;
    public bool founderTid;
    public bool HostsTid;
    public bool membersTid;
    public bool headurl;
    public bool roomName;
    public bool desc;
    public bool createTime;
    public bool extraList;
    public bool extraMap;
  }

  public TimRoom()
  {
  }

  public TimRoom DeepCopy()
  {
    var tmp94 = new TimRoom();
    if((Tid != null) && __isset.tid)
    {
      tmp94.Tid = (Tid)this.Tid.DeepCopy();
    }
    tmp94.__isset.tid = this.__isset.tid;
    if((FounderTid != null) && __isset.founderTid)
    {
      tmp94.FounderTid = (Tid)this.FounderTid.DeepCopy();
    }
    tmp94.__isset.founderTid = this.__isset.founderTid;
    if((HostsTid != null) && __isset.HostsTid)
    {
      tmp94.HostsTid = this.HostsTid.DeepCopy();
    }
    tmp94.__isset.HostsTid = this.__isset.HostsTid;
    if((MembersTid != null) && __isset.membersTid)
    {
      tmp94.MembersTid = this.MembersTid.DeepCopy();
    }
    tmp94.__isset.membersTid = this.__isset.membersTid;
    if((Headurl != null) && __isset.headurl)
    {
      tmp94.Headurl = this.Headurl;
    }
    tmp94.__isset.headurl = this.__isset.headurl;
    if((RoomName != null) && __isset.roomName)
    {
      tmp94.RoomName = this.RoomName;
    }
    tmp94.__isset.roomName = this.__isset.roomName;
    if((Desc != null) && __isset.desc)
    {
      tmp94.Desc = this.Desc;
    }
    tmp94.__isset.desc = this.__isset.desc;
    if((CreateTime != null) && __isset.createTime)
    {
      tmp94.CreateTime = (TimTime)this.CreateTime.DeepCopy();
    }
    tmp94.__isset.createTime = this.__isset.createTime;
    if((ExtraList != null) && __isset.extraList)
    {
      tmp94.ExtraList = this.ExtraList.DeepCopy();
    }
    tmp94.__isset.extraList = this.__isset.extraList;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp94.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp94.__isset.extraMap = this.__isset.extraMap;
    return tmp94;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Tid = new Tid();
              await Tid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              FounderTid = new Tid();
              await FounderTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                var _list95 = await iprot.ReadListBeginAsync(cancellationToken);
                HostsTid = new List<Tid>(_list95.Count);
                for(int _i96 = 0; _i96 < _list95.Count; ++_i96)
                {
                  Tid _elem97;
                  _elem97 = new Tid();
                  await _elem97.ReadAsync(iprot, cancellationToken);
                  HostsTid.Add(_elem97);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                var _list98 = await iprot.ReadListBeginAsync(cancellationToken);
                MembersTid = new List<Tid>(_list98.Count);
                for(int _i99 = 0; _i99 < _list98.Count; ++_i99)
                {
                  Tid _elem100;
                  _elem100 = new Tid();
                  await _elem100.ReadAsync(iprot, cancellationToken);
                  MembersTid.Add(_elem100);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Headurl = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              RoomName = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              Desc = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.Struct)
            {
              CreateTime = new TimTime();
              await CreateTime.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.List)
            {
              {
                var _list101 = await iprot.ReadListBeginAsync(cancellationToken);
                ExtraList = new List<TimNode>(_list101.Count);
                for(int _i102 = 0; _i102 < _list101.Count; ++_i102)
                {
                  TimNode _elem103;
                  _elem103 = new TimNode();
                  await _elem103.ReadAsync(iprot, cancellationToken);
                  ExtraList.Add(_elem103);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Map)
            {
              {
                var _map104 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map104.Count);
                for(int _i105 = 0; _i105 < _map104.Count; ++_i105)
                {
                  string _key106;
                  string _val107;
                  _key106 = await iprot.ReadStringAsync(cancellationToken);
                  _val107 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key106] = _val107;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp108 = new TStruct("TimRoom");
      await oprot.WriteStructBeginAsync(tmp108, cancellationToken);
      var tmp109 = new TField();
      if((Tid != null) && __isset.tid)
      {
        tmp109.Name = "tid";
        tmp109.Type = TType.Struct;
        tmp109.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await Tid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((FounderTid != null) && __isset.founderTid)
      {
        tmp109.Name = "founderTid";
        tmp109.Type = TType.Struct;
        tmp109.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await FounderTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((HostsTid != null) && __isset.HostsTid)
      {
        tmp109.Name = "HostsTid";
        tmp109.Type = TType.List;
        tmp109.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, HostsTid.Count), cancellationToken);
        foreach (Tid _iter110 in HostsTid)
        {
          await _iter110.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((MembersTid != null) && __isset.membersTid)
      {
        tmp109.Name = "membersTid";
        tmp109.Type = TType.List;
        tmp109.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, MembersTid.Count), cancellationToken);
        foreach (Tid _iter111 in MembersTid)
        {
          await _iter111.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Headurl != null) && __isset.headurl)
      {
        tmp109.Name = "headurl";
        tmp109.Type = TType.String;
        tmp109.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await oprot.WriteStringAsync(Headurl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((RoomName != null) && __isset.roomName)
      {
        tmp109.Name = "roomName";
        tmp109.Type = TType.String;
        tmp109.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await oprot.WriteStringAsync(RoomName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Desc != null) && __isset.desc)
      {
        tmp109.Name = "desc";
        tmp109.Type = TType.String;
        tmp109.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await oprot.WriteStringAsync(Desc, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((CreateTime != null) && __isset.createTime)
      {
        tmp109.Name = "createTime";
        tmp109.Type = TType.Struct;
        tmp109.ID = 8;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await CreateTime.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        tmp109.Name = "extraList";
        tmp109.Type = TType.List;
        tmp109.ID = 9;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, ExtraList.Count), cancellationToken);
        foreach (TimNode _iter112 in ExtraList)
        {
          await _iter112.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp109.Name = "extraMap";
        tmp109.Type = TType.Map;
        tmp109.ID = 10;
        await oprot.WriteFieldBeginAsync(tmp109, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter113 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter113, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter113], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimRoom other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.tid == other.__isset.tid) && ((!__isset.tid) || (global::System.Object.Equals(Tid, other.Tid))))
      && ((__isset.founderTid == other.__isset.founderTid) && ((!__isset.founderTid) || (global::System.Object.Equals(FounderTid, other.FounderTid))))
      && ((__isset.HostsTid == other.__isset.HostsTid) && ((!__isset.HostsTid) || (TCollections.Equals(HostsTid, other.HostsTid))))
      && ((__isset.membersTid == other.__isset.membersTid) && ((!__isset.membersTid) || (TCollections.Equals(MembersTid, other.MembersTid))))
      && ((__isset.headurl == other.__isset.headurl) && ((!__isset.headurl) || (global::System.Object.Equals(Headurl, other.Headurl))))
      && ((__isset.roomName == other.__isset.roomName) && ((!__isset.roomName) || (global::System.Object.Equals(RoomName, other.RoomName))))
      && ((__isset.desc == other.__isset.desc) && ((!__isset.desc) || (global::System.Object.Equals(Desc, other.Desc))))
      && ((__isset.createTime == other.__isset.createTime) && ((!__isset.createTime) || (global::System.Object.Equals(CreateTime, other.CreateTime))))
      && ((__isset.extraList == other.__isset.extraList) && ((!__isset.extraList) || (TCollections.Equals(ExtraList, other.ExtraList))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Tid != null) && __isset.tid)
      {
        hashcode = (hashcode * 397) + Tid.GetHashCode();
      }
      if((FounderTid != null) && __isset.founderTid)
      {
        hashcode = (hashcode * 397) + FounderTid.GetHashCode();
      }
      if((HostsTid != null) && __isset.HostsTid)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(HostsTid);
      }
      if((MembersTid != null) && __isset.membersTid)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(MembersTid);
      }
      if((Headurl != null) && __isset.headurl)
      {
        hashcode = (hashcode * 397) + Headurl.GetHashCode();
      }
      if((RoomName != null) && __isset.roomName)
      {
        hashcode = (hashcode * 397) + RoomName.GetHashCode();
      }
      if((Desc != null) && __isset.desc)
      {
        hashcode = (hashcode * 397) + Desc.GetHashCode();
      }
      if((CreateTime != null) && __isset.createTime)
      {
        hashcode = (hashcode * 397) + CreateTime.GetHashCode();
      }
      if((ExtraList != null) && __isset.extraList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraList);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp114 = new StringBuilder("TimRoom(");
    int tmp115 = 0;
    if((Tid != null) && __isset.tid)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("Tid: ");
      Tid.ToString(tmp114);
    }
    if((FounderTid != null) && __isset.founderTid)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("FounderTid: ");
      FounderTid.ToString(tmp114);
    }
    if((HostsTid != null) && __isset.HostsTid)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("HostsTid: ");
      HostsTid.ToString(tmp114);
    }
    if((MembersTid != null) && __isset.membersTid)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("MembersTid: ");
      MembersTid.ToString(tmp114);
    }
    if((Headurl != null) && __isset.headurl)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("Headurl: ");
      Headurl.ToString(tmp114);
    }
    if((RoomName != null) && __isset.roomName)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("RoomName: ");
      RoomName.ToString(tmp114);
    }
    if((Desc != null) && __isset.desc)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("Desc: ");
      Desc.ToString(tmp114);
    }
    if((CreateTime != null) && __isset.createTime)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("CreateTime: ");
      CreateTime.ToString(tmp114);
    }
    if((ExtraList != null) && __isset.extraList)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("ExtraList: ");
      ExtraList.ToString(tmp114);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      if(0 < tmp115++) { tmp114.Append(", "); }
      tmp114.Append("ExtraMap: ");
      ExtraMap.ToString(tmp114);
    }
    tmp114.Append(')');
    return tmp114.ToString();
  }
}

