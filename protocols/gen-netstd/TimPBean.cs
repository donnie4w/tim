/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimPBean : TBase
{
  private Tid _fromTid;
  private Tid _toTid;
  private string _status;
  private string _type;
  private int _priority;
  private string _show;
  private Tid _leaguerTid;
  private List<TimNode> _extraList;
  private TimError _error;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 标识
  /// </summary>
  public string ThreadId { get; set; }

  public Tid FromTid
  {
    get
    {
      return _fromTid;
    }
    set
    {
      __isset.fromTid = true;
      this._fromTid = value;
    }
  }

  public Tid ToTid
  {
    get
    {
      return _toTid;
    }
    set
    {
      __isset.toTid = true;
      this._toTid = value;
    }
  }

  /// <summary>
  /// subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
  /// </summary>
  public string Status
  {
    get
    {
      return _status;
    }
    set
    {
      __isset.status = true;
      this._status = value;
    }
  }

  /// <summary>
  /// normal：类似于email，主要特点是不要求响应；
  /// chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
  /// groupchat：类似于聊天室里的群聊；
  /// headline：用于发送alert和notification；
  /// error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
  /// </summary>
  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
  /// </summary>
  public int Priority
  {
    get
    {
      return _priority;
    }
    set
    {
      __isset.priority = true;
      this._priority = value;
    }
  }

  /// <summary>
  /// chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
  /// </summary>
  public string Show
  {
    get
    {
      return _show;
    }
    set
    {
      __isset.show = true;
      this._show = value;
    }
  }

  /// <summary>
  /// 成员Tid   群聊时信息发送者Tid
  /// </summary>
  public Tid LeaguerTid
  {
    get
    {
      return _leaguerTid;
    }
    set
    {
      __isset.leaguerTid = true;
      this._leaguerTid = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  /// <summary>
  /// 错误码
  /// </summary>
  public TimError Error
  {
    get
    {
      return _error;
    }
    set
    {
      __isset.error = true;
      this._error = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool fromTid;
    public bool toTid;
    public bool status;
    public bool type;
    public bool priority;
    public bool show;
    public bool leaguerTid;
    public bool extraList;
    public bool error;
    public bool extraMap;
  }

  public TimPBean()
  {
  }

  public TimPBean(string threadId) : this()
  {
    this.ThreadId = threadId;
  }

  public TimPBean DeepCopy()
  {
    var tmp116 = new TimPBean();
    if((ThreadId != null))
    {
      tmp116.ThreadId = this.ThreadId;
    }
    if((FromTid != null) && __isset.fromTid)
    {
      tmp116.FromTid = (Tid)this.FromTid.DeepCopy();
    }
    tmp116.__isset.fromTid = this.__isset.fromTid;
    if((ToTid != null) && __isset.toTid)
    {
      tmp116.ToTid = (Tid)this.ToTid.DeepCopy();
    }
    tmp116.__isset.toTid = this.__isset.toTid;
    if((Status != null) && __isset.status)
    {
      tmp116.Status = this.Status;
    }
    tmp116.__isset.status = this.__isset.status;
    if((Type != null) && __isset.type)
    {
      tmp116.Type = this.Type;
    }
    tmp116.__isset.type = this.__isset.type;
    if(__isset.priority)
    {
      tmp116.Priority = this.Priority;
    }
    tmp116.__isset.priority = this.__isset.priority;
    if((Show != null) && __isset.show)
    {
      tmp116.Show = this.Show;
    }
    tmp116.__isset.show = this.__isset.show;
    if((LeaguerTid != null) && __isset.leaguerTid)
    {
      tmp116.LeaguerTid = (Tid)this.LeaguerTid.DeepCopy();
    }
    tmp116.__isset.leaguerTid = this.__isset.leaguerTid;
    if((ExtraList != null) && __isset.extraList)
    {
      tmp116.ExtraList = this.ExtraList.DeepCopy();
    }
    tmp116.__isset.extraList = this.__isset.extraList;
    if((Error != null) && __isset.error)
    {
      tmp116.Error = (TimError)this.Error.DeepCopy();
    }
    tmp116.__isset.error = this.__isset.error;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp116.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp116.__isset.extraMap = this.__isset.extraMap;
    return tmp116;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_threadId = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ThreadId = await iprot.ReadStringAsync(cancellationToken);
              isset_threadId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              FromTid = new Tid();
              await FromTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              ToTid = new Tid();
              await ToTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Status = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Type = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              Priority = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              Show = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.Struct)
            {
              LeaguerTid = new Tid();
              await LeaguerTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.List)
            {
              {
                var _list117 = await iprot.ReadListBeginAsync(cancellationToken);
                ExtraList = new List<TimNode>(_list117.Count);
                for(int _i118 = 0; _i118 < _list117.Count; ++_i118)
                {
                  TimNode _elem119;
                  _elem119 = new TimNode();
                  await _elem119.ReadAsync(iprot, cancellationToken);
                  ExtraList.Add(_elem119);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Struct)
            {
              Error = new TimError();
              await Error.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.Map)
            {
              {
                var _map120 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map120.Count);
                for(int _i121 = 0; _i121 < _map120.Count; ++_i121)
                {
                  string _key122;
                  string _val123;
                  _key122 = await iprot.ReadStringAsync(cancellationToken);
                  _val123 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key122] = _val123;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_threadId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp124 = new TStruct("TimPBean");
      await oprot.WriteStructBeginAsync(tmp124, cancellationToken);
      var tmp125 = new TField();
      if((ThreadId != null))
      {
        tmp125.Name = "threadId";
        tmp125.Type = TType.String;
        tmp125.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await oprot.WriteStringAsync(ThreadId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((FromTid != null) && __isset.fromTid)
      {
        tmp125.Name = "fromTid";
        tmp125.Type = TType.Struct;
        tmp125.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await FromTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ToTid != null) && __isset.toTid)
      {
        tmp125.Name = "toTid";
        tmp125.Type = TType.Struct;
        tmp125.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await ToTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Status != null) && __isset.status)
      {
        tmp125.Name = "status";
        tmp125.Type = TType.String;
        tmp125.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await oprot.WriteStringAsync(Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Type != null) && __isset.type)
      {
        tmp125.Name = "type";
        tmp125.Type = TType.String;
        tmp125.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await oprot.WriteStringAsync(Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.priority)
      {
        tmp125.Name = "priority";
        tmp125.Type = TType.I32;
        tmp125.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await oprot.WriteI32Async(Priority, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Show != null) && __isset.show)
      {
        tmp125.Name = "show";
        tmp125.Type = TType.String;
        tmp125.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await oprot.WriteStringAsync(Show, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((LeaguerTid != null) && __isset.leaguerTid)
      {
        tmp125.Name = "leaguerTid";
        tmp125.Type = TType.Struct;
        tmp125.ID = 8;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await LeaguerTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        tmp125.Name = "extraList";
        tmp125.Type = TType.List;
        tmp125.ID = 9;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, ExtraList.Count), cancellationToken);
        foreach (TimNode _iter126 in ExtraList)
        {
          await _iter126.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Error != null) && __isset.error)
      {
        tmp125.Name = "error";
        tmp125.Type = TType.Struct;
        tmp125.ID = 10;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await Error.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp125.Name = "extraMap";
        tmp125.Type = TType.Map;
        tmp125.ID = 11;
        await oprot.WriteFieldBeginAsync(tmp125, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter127 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter127, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter127], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimPBean other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(ThreadId, other.ThreadId)
      && ((__isset.fromTid == other.__isset.fromTid) && ((!__isset.fromTid) || (global::System.Object.Equals(FromTid, other.FromTid))))
      && ((__isset.toTid == other.__isset.toTid) && ((!__isset.toTid) || (global::System.Object.Equals(ToTid, other.ToTid))))
      && ((__isset.status == other.__isset.status) && ((!__isset.status) || (global::System.Object.Equals(Status, other.Status))))
      && ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
      && ((__isset.priority == other.__isset.priority) && ((!__isset.priority) || (global::System.Object.Equals(Priority, other.Priority))))
      && ((__isset.show == other.__isset.show) && ((!__isset.show) || (global::System.Object.Equals(Show, other.Show))))
      && ((__isset.leaguerTid == other.__isset.leaguerTid) && ((!__isset.leaguerTid) || (global::System.Object.Equals(LeaguerTid, other.LeaguerTid))))
      && ((__isset.extraList == other.__isset.extraList) && ((!__isset.extraList) || (TCollections.Equals(ExtraList, other.ExtraList))))
      && ((__isset.error == other.__isset.error) && ((!__isset.error) || (global::System.Object.Equals(Error, other.Error))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((ThreadId != null))
      {
        hashcode = (hashcode * 397) + ThreadId.GetHashCode();
      }
      if((FromTid != null) && __isset.fromTid)
      {
        hashcode = (hashcode * 397) + FromTid.GetHashCode();
      }
      if((ToTid != null) && __isset.toTid)
      {
        hashcode = (hashcode * 397) + ToTid.GetHashCode();
      }
      if((Status != null) && __isset.status)
      {
        hashcode = (hashcode * 397) + Status.GetHashCode();
      }
      if((Type != null) && __isset.type)
      {
        hashcode = (hashcode * 397) + Type.GetHashCode();
      }
      if(__isset.priority)
      {
        hashcode = (hashcode * 397) + Priority.GetHashCode();
      }
      if((Show != null) && __isset.show)
      {
        hashcode = (hashcode * 397) + Show.GetHashCode();
      }
      if((LeaguerTid != null) && __isset.leaguerTid)
      {
        hashcode = (hashcode * 397) + LeaguerTid.GetHashCode();
      }
      if((ExtraList != null) && __isset.extraList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraList);
      }
      if((Error != null) && __isset.error)
      {
        hashcode = (hashcode * 397) + Error.GetHashCode();
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp128 = new StringBuilder("TimPBean(");
    if((ThreadId != null))
    {
      tmp128.Append(", ThreadId: ");
      ThreadId.ToString(tmp128);
    }
    if((FromTid != null) && __isset.fromTid)
    {
      tmp128.Append(", FromTid: ");
      FromTid.ToString(tmp128);
    }
    if((ToTid != null) && __isset.toTid)
    {
      tmp128.Append(", ToTid: ");
      ToTid.ToString(tmp128);
    }
    if((Status != null) && __isset.status)
    {
      tmp128.Append(", Status: ");
      Status.ToString(tmp128);
    }
    if((Type != null) && __isset.type)
    {
      tmp128.Append(", Type: ");
      Type.ToString(tmp128);
    }
    if(__isset.priority)
    {
      tmp128.Append(", Priority: ");
      Priority.ToString(tmp128);
    }
    if((Show != null) && __isset.show)
    {
      tmp128.Append(", Show: ");
      Show.ToString(tmp128);
    }
    if((LeaguerTid != null) && __isset.leaguerTid)
    {
      tmp128.Append(", LeaguerTid: ");
      LeaguerTid.ToString(tmp128);
    }
    if((ExtraList != null) && __isset.extraList)
    {
      tmp128.Append(", ExtraList: ");
      ExtraList.ToString(tmp128);
    }
    if((Error != null) && __isset.error)
    {
      tmp128.Append(", Error: ");
      Error.ToString(tmp128);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp128.Append(", ExtraMap: ");
      ExtraMap.ToString(tmp128);
    }
    tmp128.Append(')');
    return tmp128.ToString();
  }
}

