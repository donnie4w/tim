/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimPage : TBase
{
  private string _fromTimeStamp;
  private string _toTimeStamp;
  private int _limitCount;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 时间上
  /// </summary>
  public string FromTimeStamp
  {
    get
    {
      return _fromTimeStamp;
    }
    set
    {
      __isset.fromTimeStamp = true;
      this._fromTimeStamp = value;
    }
  }

  /// <summary>
  /// 时间下
  /// </summary>
  public string ToTimeStamp
  {
    get
    {
      return _toTimeStamp;
    }
    set
    {
      __isset.toTimeStamp = true;
      this._toTimeStamp = value;
    }
  }

  /// <summary>
  /// 条数
  /// </summary>
  public int LimitCount
  {
    get
    {
      return _limitCount;
    }
    set
    {
      __isset.limitCount = true;
      this._limitCount = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool fromTimeStamp;
    public bool toTimeStamp;
    public bool limitCount;
    public bool extraMap;
  }

  public TimPage()
  {
  }

  public TimPage DeepCopy()
  {
    var tmp226 = new TimPage();
    if((FromTimeStamp != null) && __isset.fromTimeStamp)
    {
      tmp226.FromTimeStamp = this.FromTimeStamp;
    }
    tmp226.__isset.fromTimeStamp = this.__isset.fromTimeStamp;
    if((ToTimeStamp != null) && __isset.toTimeStamp)
    {
      tmp226.ToTimeStamp = this.ToTimeStamp;
    }
    tmp226.__isset.toTimeStamp = this.__isset.toTimeStamp;
    if(__isset.limitCount)
    {
      tmp226.LimitCount = this.LimitCount;
    }
    tmp226.__isset.limitCount = this.__isset.limitCount;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp226.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp226.__isset.extraMap = this.__isset.extraMap;
    return tmp226;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              FromTimeStamp = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              ToTimeStamp = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              LimitCount = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Map)
            {
              {
                var _map227 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map227.Count);
                for(int _i228 = 0; _i228 < _map227.Count; ++_i228)
                {
                  string _key229;
                  string _val230;
                  _key229 = await iprot.ReadStringAsync(cancellationToken);
                  _val230 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key229] = _val230;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp231 = new TStruct("TimPage");
      await oprot.WriteStructBeginAsync(tmp231, cancellationToken);
      var tmp232 = new TField();
      if((FromTimeStamp != null) && __isset.fromTimeStamp)
      {
        tmp232.Name = "fromTimeStamp";
        tmp232.Type = TType.String;
        tmp232.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp232, cancellationToken);
        await oprot.WriteStringAsync(FromTimeStamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ToTimeStamp != null) && __isset.toTimeStamp)
      {
        tmp232.Name = "toTimeStamp";
        tmp232.Type = TType.String;
        tmp232.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp232, cancellationToken);
        await oprot.WriteStringAsync(ToTimeStamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.limitCount)
      {
        tmp232.Name = "limitCount";
        tmp232.Type = TType.I32;
        tmp232.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp232, cancellationToken);
        await oprot.WriteI32Async(LimitCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp232.Name = "extraMap";
        tmp232.Type = TType.Map;
        tmp232.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp232, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter233 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter233, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter233], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimPage other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.fromTimeStamp == other.__isset.fromTimeStamp) && ((!__isset.fromTimeStamp) || (global::System.Object.Equals(FromTimeStamp, other.FromTimeStamp))))
      && ((__isset.toTimeStamp == other.__isset.toTimeStamp) && ((!__isset.toTimeStamp) || (global::System.Object.Equals(ToTimeStamp, other.ToTimeStamp))))
      && ((__isset.limitCount == other.__isset.limitCount) && ((!__isset.limitCount) || (global::System.Object.Equals(LimitCount, other.LimitCount))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((FromTimeStamp != null) && __isset.fromTimeStamp)
      {
        hashcode = (hashcode * 397) + FromTimeStamp.GetHashCode();
      }
      if((ToTimeStamp != null) && __isset.toTimeStamp)
      {
        hashcode = (hashcode * 397) + ToTimeStamp.GetHashCode();
      }
      if(__isset.limitCount)
      {
        hashcode = (hashcode * 397) + LimitCount.GetHashCode();
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp234 = new StringBuilder("TimPage(");
    int tmp235 = 0;
    if((FromTimeStamp != null) && __isset.fromTimeStamp)
    {
      if(0 < tmp235++) { tmp234.Append(", "); }
      tmp234.Append("FromTimeStamp: ");
      FromTimeStamp.ToString(tmp234);
    }
    if((ToTimeStamp != null) && __isset.toTimeStamp)
    {
      if(0 < tmp235++) { tmp234.Append(", "); }
      tmp234.Append("ToTimeStamp: ");
      ToTimeStamp.ToString(tmp234);
    }
    if(__isset.limitCount)
    {
      if(0 < tmp235++) { tmp234.Append(", "); }
      tmp234.Append("LimitCount: ");
      LimitCount.ToString(tmp234);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      if(0 < tmp235++) { tmp234.Append(", "); }
      tmp234.Append("ExtraMap: ");
      ExtraMap.ToString(tmp234);
    }
    tmp234.Append(')');
    return tmp234.ToString();
  }
}

