/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimPropertyBean : TBase
{
  private string _threadId;
  private string _interflow;
  private string _tls;

  public string ThreadId
  {
    get
    {
      return _threadId;
    }
    set
    {
      __isset.threadId = true;
      this._threadId = value;
    }
  }

  /// <summary>
  /// 消息合流
  /// </summary>
  public string Interflow
  {
    get
    {
      return _interflow;
    }
    set
    {
      __isset.interflow = true;
      this._interflow = value;
    }
  }

  /// <summary>
  /// tls
  /// </summary>
  public string Tls
  {
    get
    {
      return _tls;
    }
    set
    {
      __isset.tls = true;
      this._tls = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool threadId;
    public bool interflow;
    public bool tls;
  }

  public TimPropertyBean()
  {
  }

  public TimPropertyBean DeepCopy()
  {
    var tmp287 = new TimPropertyBean();
    if((ThreadId != null) && __isset.threadId)
    {
      tmp287.ThreadId = this.ThreadId;
    }
    tmp287.__isset.threadId = this.__isset.threadId;
    if((Interflow != null) && __isset.interflow)
    {
      tmp287.Interflow = this.Interflow;
    }
    tmp287.__isset.interflow = this.__isset.interflow;
    if((Tls != null) && __isset.tls)
    {
      tmp287.Tls = this.Tls;
    }
    tmp287.__isset.tls = this.__isset.tls;
    return tmp287;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ThreadId = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Interflow = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Tls = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp288 = new TStruct("TimPropertyBean");
      await oprot.WriteStructBeginAsync(tmp288, cancellationToken);
      var tmp289 = new TField();
      if((ThreadId != null) && __isset.threadId)
      {
        tmp289.Name = "threadId";
        tmp289.Type = TType.String;
        tmp289.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp289, cancellationToken);
        await oprot.WriteStringAsync(ThreadId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Interflow != null) && __isset.interflow)
      {
        tmp289.Name = "interflow";
        tmp289.Type = TType.String;
        tmp289.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp289, cancellationToken);
        await oprot.WriteStringAsync(Interflow, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Tls != null) && __isset.tls)
      {
        tmp289.Name = "tls";
        tmp289.Type = TType.String;
        tmp289.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp289, cancellationToken);
        await oprot.WriteStringAsync(Tls, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimPropertyBean other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.threadId == other.__isset.threadId) && ((!__isset.threadId) || (global::System.Object.Equals(ThreadId, other.ThreadId))))
      && ((__isset.interflow == other.__isset.interflow) && ((!__isset.interflow) || (global::System.Object.Equals(Interflow, other.Interflow))))
      && ((__isset.tls == other.__isset.tls) && ((!__isset.tls) || (global::System.Object.Equals(Tls, other.Tls))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((ThreadId != null) && __isset.threadId)
      {
        hashcode = (hashcode * 397) + ThreadId.GetHashCode();
      }
      if((Interflow != null) && __isset.interflow)
      {
        hashcode = (hashcode * 397) + Interflow.GetHashCode();
      }
      if((Tls != null) && __isset.tls)
      {
        hashcode = (hashcode * 397) + Tls.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp290 = new StringBuilder("TimPropertyBean(");
    int tmp291 = 0;
    if((ThreadId != null) && __isset.threadId)
    {
      if(0 < tmp291++) { tmp290.Append(", "); }
      tmp290.Append("ThreadId: ");
      ThreadId.ToString(tmp290);
    }
    if((Interflow != null) && __isset.interflow)
    {
      if(0 < tmp291++) { tmp290.Append(", "); }
      tmp290.Append("Interflow: ");
      Interflow.ToString(tmp290);
    }
    if((Tls != null) && __isset.tls)
    {
      if(0 < tmp291++) { tmp290.Append(", "); }
      tmp290.Append("Tls: ");
      Tls.ToString(tmp290);
    }
    tmp290.Append(')');
    return tmp290.ToString();
  }
}

