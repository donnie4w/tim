/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimIqBean : TBase
{
  private Tid _fromTid;
  private Tid _toTid;
  private string _type;
  private List<TimNode> _extraList;
  private TimError _error;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 线程id
  /// </summary>
  public string ThreadId { get; set; }

  public Tid FromTid
  {
    get
    {
      return _fromTid;
    }
    set
    {
      __isset.fromTid = true;
      this._fromTid = value;
    }
  }

  public Tid ToTid
  {
    get
    {
      return _toTid;
    }
    set
    {
      __isset.toTid = true;
      this._toTid = value;
    }
  }

  /// <summary>
  /// Get :获取当前域值。类似于http get方法
  /// Set :设置或替换get查询的值。类似于http put方法。
  /// Result :说明成功的响应了先前的查询。类似于http状态码200。
  /// Error: 查询和响应中出现的错误。
  /// </summary>
  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  /// <summary>
  /// 错误码
  /// </summary>
  public TimError Error
  {
    get
    {
      return _error;
    }
    set
    {
      __isset.error = true;
      this._error = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool fromTid;
    public bool toTid;
    public bool type;
    public bool extraList;
    public bool error;
    public bool extraMap;
  }

  public TimIqBean()
  {
  }

  public TimIqBean(string threadId) : this()
  {
    this.ThreadId = threadId;
  }

  public TimIqBean DeepCopy()
  {
    var tmp144 = new TimIqBean();
    if((ThreadId != null))
    {
      tmp144.ThreadId = this.ThreadId;
    }
    if((FromTid != null) && __isset.fromTid)
    {
      tmp144.FromTid = (Tid)this.FromTid.DeepCopy();
    }
    tmp144.__isset.fromTid = this.__isset.fromTid;
    if((ToTid != null) && __isset.toTid)
    {
      tmp144.ToTid = (Tid)this.ToTid.DeepCopy();
    }
    tmp144.__isset.toTid = this.__isset.toTid;
    if((Type != null) && __isset.type)
    {
      tmp144.Type = this.Type;
    }
    tmp144.__isset.type = this.__isset.type;
    if((ExtraList != null) && __isset.extraList)
    {
      tmp144.ExtraList = this.ExtraList.DeepCopy();
    }
    tmp144.__isset.extraList = this.__isset.extraList;
    if((Error != null) && __isset.error)
    {
      tmp144.Error = (TimError)this.Error.DeepCopy();
    }
    tmp144.__isset.error = this.__isset.error;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp144.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp144.__isset.extraMap = this.__isset.extraMap;
    return tmp144;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_threadId = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ThreadId = await iprot.ReadStringAsync(cancellationToken);
              isset_threadId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              FromTid = new Tid();
              await FromTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              ToTid = new Tid();
              await ToTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Type = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                var _list145 = await iprot.ReadListBeginAsync(cancellationToken);
                ExtraList = new List<TimNode>(_list145.Count);
                for(int _i146 = 0; _i146 < _list145.Count; ++_i146)
                {
                  TimNode _elem147;
                  _elem147 = new TimNode();
                  await _elem147.ReadAsync(iprot, cancellationToken);
                  ExtraList.Add(_elem147);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Struct)
            {
              Error = new TimError();
              await Error.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Map)
            {
              {
                var _map148 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map148.Count);
                for(int _i149 = 0; _i149 < _map148.Count; ++_i149)
                {
                  string _key150;
                  string _val151;
                  _key150 = await iprot.ReadStringAsync(cancellationToken);
                  _val151 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key150] = _val151;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_threadId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp152 = new TStruct("TimIqBean");
      await oprot.WriteStructBeginAsync(tmp152, cancellationToken);
      var tmp153 = new TField();
      if((ThreadId != null))
      {
        tmp153.Name = "threadId";
        tmp153.Type = TType.String;
        tmp153.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp153, cancellationToken);
        await oprot.WriteStringAsync(ThreadId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((FromTid != null) && __isset.fromTid)
      {
        tmp153.Name = "fromTid";
        tmp153.Type = TType.Struct;
        tmp153.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp153, cancellationToken);
        await FromTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ToTid != null) && __isset.toTid)
      {
        tmp153.Name = "toTid";
        tmp153.Type = TType.Struct;
        tmp153.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp153, cancellationToken);
        await ToTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Type != null) && __isset.type)
      {
        tmp153.Name = "type";
        tmp153.Type = TType.String;
        tmp153.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp153, cancellationToken);
        await oprot.WriteStringAsync(Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        tmp153.Name = "extraList";
        tmp153.Type = TType.List;
        tmp153.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp153, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, ExtraList.Count), cancellationToken);
        foreach (TimNode _iter154 in ExtraList)
        {
          await _iter154.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Error != null) && __isset.error)
      {
        tmp153.Name = "error";
        tmp153.Type = TType.Struct;
        tmp153.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp153, cancellationToken);
        await Error.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp153.Name = "extraMap";
        tmp153.Type = TType.Map;
        tmp153.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp153, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter155 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter155, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter155], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimIqBean other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(ThreadId, other.ThreadId)
      && ((__isset.fromTid == other.__isset.fromTid) && ((!__isset.fromTid) || (global::System.Object.Equals(FromTid, other.FromTid))))
      && ((__isset.toTid == other.__isset.toTid) && ((!__isset.toTid) || (global::System.Object.Equals(ToTid, other.ToTid))))
      && ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
      && ((__isset.extraList == other.__isset.extraList) && ((!__isset.extraList) || (TCollections.Equals(ExtraList, other.ExtraList))))
      && ((__isset.error == other.__isset.error) && ((!__isset.error) || (global::System.Object.Equals(Error, other.Error))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((ThreadId != null))
      {
        hashcode = (hashcode * 397) + ThreadId.GetHashCode();
      }
      if((FromTid != null) && __isset.fromTid)
      {
        hashcode = (hashcode * 397) + FromTid.GetHashCode();
      }
      if((ToTid != null) && __isset.toTid)
      {
        hashcode = (hashcode * 397) + ToTid.GetHashCode();
      }
      if((Type != null) && __isset.type)
      {
        hashcode = (hashcode * 397) + Type.GetHashCode();
      }
      if((ExtraList != null) && __isset.extraList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraList);
      }
      if((Error != null) && __isset.error)
      {
        hashcode = (hashcode * 397) + Error.GetHashCode();
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp156 = new StringBuilder("TimIqBean(");
    if((ThreadId != null))
    {
      tmp156.Append(", ThreadId: ");
      ThreadId.ToString(tmp156);
    }
    if((FromTid != null) && __isset.fromTid)
    {
      tmp156.Append(", FromTid: ");
      FromTid.ToString(tmp156);
    }
    if((ToTid != null) && __isset.toTid)
    {
      tmp156.Append(", ToTid: ");
      ToTid.ToString(tmp156);
    }
    if((Type != null) && __isset.type)
    {
      tmp156.Append(", Type: ");
      Type.ToString(tmp156);
    }
    if((ExtraList != null) && __isset.extraList)
    {
      tmp156.Append(", ExtraList: ");
      ExtraList.ToString(tmp156);
    }
    if((Error != null) && __isset.error)
    {
      tmp156.Append(", Error: ");
      Error.ToString(tmp156);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp156.Append(", ExtraMap: ");
      ExtraMap.ToString(tmp156);
    }
    tmp156.Append(')');
    return tmp156.ToString();
  }
}

