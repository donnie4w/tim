/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class ITim
{
  public interface IAsync
  {
    /// <summary>
    /// 流程开始
    /// </summary>
    /// <param name="param"></param>
    global::System.Threading.Tasks.Task timStream(TimParam param, CancellationToken cancellationToken = default);

    /// <summary>
    /// tls协议
    /// </summary>
    global::System.Threading.Tasks.Task timStarttls(CancellationToken cancellationToken = default);

    /// <summary>
    /// 登陆协议
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="pwd"></param>
    global::System.Threading.Tasks.Task timLogin(Tid tid, string pwd, CancellationToken cancellationToken = default);

    /// <summary>
    /// 回执信息
    /// </summary>
    /// <param name="ab"></param>
    global::System.Threading.Tasks.Task timAck(TimAckBean ab, CancellationToken cancellationToken = default);

    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbean"></param>
    global::System.Threading.Tasks.Task timPresence(TimPBean pbean, CancellationToken cancellationToken = default);

    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbean"></param>
    global::System.Threading.Tasks.Task timMessage(TimMBean mbean, CancellationToken cancellationToken = default);

    /// <summary>
    /// ping 心跳协议
    /// </summary>
    /// <param name="threadId"></param>
    global::System.Threading.Tasks.Task timPing(string threadId, CancellationToken cancellationToken = default);

    /// <summary>
    /// 错误通知
    /// </summary>
    /// <param name="e"></param>
    global::System.Threading.Tasks.Task timError(TimError e, CancellationToken cancellationToken = default);

    /// <summary>
    /// 登出协议
    /// </summary>
    global::System.Threading.Tasks.Task timLogout(CancellationToken cancellationToken = default);

    /// <summary>
    /// 注册协议
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task timRegist(Tid tid, string auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 花名册
    /// </summary>
    /// <param name="roster"></param>
    global::System.Threading.Tasks.Task timRoser(TimRoster roster, CancellationToken cancellationToken = default);

    /// <summary>
    /// 发送信息或接收信息列表（合流）
    /// </summary>
    /// <param name="mbeanList"></param>
    global::System.Threading.Tasks.Task timMessageList(TimMBeanList mbeanList, CancellationToken cancellationToken = default);

    /// <summary>
    /// 发送状态信息列表（合流）
    /// </summary>
    /// <param name="pbeanList"></param>
    global::System.Threading.Tasks.Task timPresenceList(TimPBeanList pbeanList, CancellationToken cancellationToken = default);

    /// <summary>
    /// 信息请求 get请求数据 del删除
    /// </summary>
    /// <param name="timMsgIq"></param>
    /// <param name="iqType"></param>
    global::System.Threading.Tasks.Task timMessageIq(TimMessageIq timMsgIq, string iqType, CancellationToken cancellationToken = default);

    /// <summary>
    /// 信息请求
    /// </summary>
    /// <param name="mbean"></param>
    global::System.Threading.Tasks.Task timMessageResult(TimMBean mbean, CancellationToken cancellationToken = default);

    /// <summary>
    /// 用户协议属性请求
    /// </summary>
    /// <param name="tpb"></param>
    global::System.Threading.Tasks.Task timProperty(TimPropertyBean tpb, CancellationToken cancellationToken = default);

    /// <summary>
    /// 请求远程验证信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="pwd"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimRemoteUserBean> timRemoteUserAuth(Tid tid, string pwd, TimAuth auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 请求远程用户信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimRemoteUserBean> timRemoteUserGet(Tid tid, TimAuth auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 编辑远程用户信息
    /// </summary>
    /// <param name="tid"></param>
    /// <param name="ub"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimRemoteUserBean> timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbean"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimResponseBean> timResponsePresence(TimPBean pbean, TimAuth auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbean"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimResponseBean> timResponseMessage(TimMBean mbean, TimAuth auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 信息请求 get请求数据 del删除（辅助接口）
    /// </summary>
    /// <param name="timMsgIq"></param>
    /// <param name="iqType"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimMBeanList> timResponseMessageIq(TimMessageIq timMsgIq, string iqType, TimAuth auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 广播出席协议或接收广播协议
    /// </summary>
    /// <param name="pbeanList"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimResponseBean> timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth, CancellationToken cancellationToken = default);

    /// <summary>
    /// 发送信息或接收信息
    /// </summary>
    /// <param name="mbeanList"></param>
    /// <param name="auth"></param>
    global::System.Threading.Tasks.Task<TimResponseBean> timResponseMessageList(TimMBeanList mbeanList, TimAuth auth, CancellationToken cancellationToken = default);

  }


  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task timStream(TimParam param, CancellationToken cancellationToken = default)
    {
      await send_timStream(param, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timStream(TimParam param, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timStream", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp292 = new InternalStructs.timStream_args() {
        Param = param,
      };
      
      await tmp292.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timStarttls(CancellationToken cancellationToken = default)
    {
      await send_timStarttls(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timStarttls(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timStarttls", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp293 = new InternalStructs.timStarttls_args() {
      };
      
      await tmp293.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timLogin(Tid tid, string pwd, CancellationToken cancellationToken = default)
    {
      await send_timLogin(tid, pwd, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timLogin(Tid tid, string pwd, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timLogin", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp294 = new InternalStructs.timLogin_args() {
        Tid = tid,
        Pwd = pwd,
      };
      
      await tmp294.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timAck(TimAckBean ab, CancellationToken cancellationToken = default)
    {
      await send_timAck(ab, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timAck(TimAckBean ab, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timAck", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp295 = new InternalStructs.timAck_args() {
        Ab = ab,
      };
      
      await tmp295.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timPresence(TimPBean pbean, CancellationToken cancellationToken = default)
    {
      await send_timPresence(pbean, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timPresence(TimPBean pbean, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timPresence", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp296 = new InternalStructs.timPresence_args() {
        Pbean = pbean,
      };
      
      await tmp296.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timMessage(TimMBean mbean, CancellationToken cancellationToken = default)
    {
      await send_timMessage(mbean, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timMessage(TimMBean mbean, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timMessage", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp297 = new InternalStructs.timMessage_args() {
        Mbean = mbean,
      };
      
      await tmp297.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timPing(string threadId, CancellationToken cancellationToken = default)
    {
      await send_timPing(threadId, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timPing(string threadId, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timPing", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp298 = new InternalStructs.timPing_args() {
        ThreadId = threadId,
      };
      
      await tmp298.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timError(TimError e, CancellationToken cancellationToken = default)
    {
      await send_timError(e, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timError(TimError e, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timError", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp299 = new InternalStructs.timError_args() {
        E = e,
      };
      
      await tmp299.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timLogout(CancellationToken cancellationToken = default)
    {
      await send_timLogout(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timLogout(CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timLogout", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp300 = new InternalStructs.timLogout_args() {
      };
      
      await tmp300.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timRegist(Tid tid, string auth, CancellationToken cancellationToken = default)
    {
      await send_timRegist(tid, auth, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timRegist(Tid tid, string auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timRegist", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp301 = new InternalStructs.timRegist_args() {
        Tid = tid,
        Auth = auth,
      };
      
      await tmp301.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timRoser(TimRoster roster, CancellationToken cancellationToken = default)
    {
      await send_timRoser(roster, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timRoser(TimRoster roster, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timRoser", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp302 = new InternalStructs.timRoser_args() {
        Roster = roster,
      };
      
      await tmp302.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timMessageList(TimMBeanList mbeanList, CancellationToken cancellationToken = default)
    {
      await send_timMessageList(mbeanList, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timMessageList(TimMBeanList mbeanList, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timMessageList", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp303 = new InternalStructs.timMessageList_args() {
        MbeanList = mbeanList,
      };
      
      await tmp303.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timPresenceList(TimPBeanList pbeanList, CancellationToken cancellationToken = default)
    {
      await send_timPresenceList(pbeanList, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timPresenceList(TimPBeanList pbeanList, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timPresenceList", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp304 = new InternalStructs.timPresenceList_args() {
        PbeanList = pbeanList,
      };
      
      await tmp304.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timMessageIq(TimMessageIq timMsgIq, string iqType, CancellationToken cancellationToken = default)
    {
      await send_timMessageIq(timMsgIq, iqType, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timMessageIq(TimMessageIq timMsgIq, string iqType, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timMessageIq", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp305 = new InternalStructs.timMessageIq_args() {
        TimMsgIq = timMsgIq,
        IqType = iqType,
      };
      
      await tmp305.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timMessageResult(TimMBean mbean, CancellationToken cancellationToken = default)
    {
      await send_timMessageResult(mbean, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timMessageResult(TimMBean mbean, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timMessageResult", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp306 = new InternalStructs.timMessageResult_args() {
        Mbean = mbean,
      };
      
      await tmp306.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timProperty(TimPropertyBean tpb, CancellationToken cancellationToken = default)
    {
      await send_timProperty(tpb, cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timProperty(TimPropertyBean tpb, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timProperty", TMessageType.Oneway, SeqId), cancellationToken);
      
      var tmp307 = new InternalStructs.timProperty_args() {
        Tpb = tpb,
      };
      
      await tmp307.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimRemoteUserBean> timRemoteUserAuth(Tid tid, string pwd, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timRemoteUserAuth(tid, pwd, auth, cancellationToken);
      return await recv_timRemoteUserAuth(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timRemoteUserAuth(Tid tid, string pwd, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timRemoteUserAuth", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp308 = new InternalStructs.timRemoteUserAuth_args() {
        Tid = tid,
        Pwd = pwd,
        Auth = auth,
      };
      
      await tmp308.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimRemoteUserBean> recv_timRemoteUserAuth(CancellationToken cancellationToken = default)
    {
      
      var tmp309 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp309.Type == TMessageType.Exception)
      {
        var tmp310 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp310;
      }

      var tmp311 = new InternalStructs.timRemoteUserAuth_result();
      await tmp311.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp311.__isset.success)
      {
        return tmp311.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timRemoteUserAuth failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TimRemoteUserBean> timRemoteUserGet(Tid tid, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timRemoteUserGet(tid, auth, cancellationToken);
      return await recv_timRemoteUserGet(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timRemoteUserGet(Tid tid, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timRemoteUserGet", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp312 = new InternalStructs.timRemoteUserGet_args() {
        Tid = tid,
        Auth = auth,
      };
      
      await tmp312.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimRemoteUserBean> recv_timRemoteUserGet(CancellationToken cancellationToken = default)
    {
      
      var tmp313 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp313.Type == TMessageType.Exception)
      {
        var tmp314 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp314;
      }

      var tmp315 = new InternalStructs.timRemoteUserGet_result();
      await tmp315.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp315.__isset.success)
      {
        return tmp315.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timRemoteUserGet failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TimRemoteUserBean> timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timRemoteUserEdit(tid, ub, auth, cancellationToken);
      return await recv_timRemoteUserEdit(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timRemoteUserEdit", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp316 = new InternalStructs.timRemoteUserEdit_args() {
        Tid = tid,
        Ub = ub,
        Auth = auth,
      };
      
      await tmp316.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimRemoteUserBean> recv_timRemoteUserEdit(CancellationToken cancellationToken = default)
    {
      
      var tmp317 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp317.Type == TMessageType.Exception)
      {
        var tmp318 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp318;
      }

      var tmp319 = new InternalStructs.timRemoteUserEdit_result();
      await tmp319.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp319.__isset.success)
      {
        return tmp319.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timRemoteUserEdit failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> timResponsePresence(TimPBean pbean, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timResponsePresence(pbean, auth, cancellationToken);
      return await recv_timResponsePresence(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timResponsePresence(TimPBean pbean, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timResponsePresence", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp320 = new InternalStructs.timResponsePresence_args() {
        Pbean = pbean,
        Auth = auth,
      };
      
      await tmp320.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> recv_timResponsePresence(CancellationToken cancellationToken = default)
    {
      
      var tmp321 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp321.Type == TMessageType.Exception)
      {
        var tmp322 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp322;
      }

      var tmp323 = new InternalStructs.timResponsePresence_result();
      await tmp323.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp323.__isset.success)
      {
        return tmp323.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponsePresence failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> timResponseMessage(TimMBean mbean, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timResponseMessage(mbean, auth, cancellationToken);
      return await recv_timResponseMessage(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timResponseMessage(TimMBean mbean, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timResponseMessage", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp324 = new InternalStructs.timResponseMessage_args() {
        Mbean = mbean,
        Auth = auth,
      };
      
      await tmp324.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> recv_timResponseMessage(CancellationToken cancellationToken = default)
    {
      
      var tmp325 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp325.Type == TMessageType.Exception)
      {
        var tmp326 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp326;
      }

      var tmp327 = new InternalStructs.timResponseMessage_result();
      await tmp327.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp327.__isset.success)
      {
        return tmp327.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponseMessage failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TimMBeanList> timResponseMessageIq(TimMessageIq timMsgIq, string iqType, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timResponseMessageIq(timMsgIq, iqType, auth, cancellationToken);
      return await recv_timResponseMessageIq(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timResponseMessageIq(TimMessageIq timMsgIq, string iqType, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timResponseMessageIq", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp328 = new InternalStructs.timResponseMessageIq_args() {
        TimMsgIq = timMsgIq,
        IqType = iqType,
        Auth = auth,
      };
      
      await tmp328.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimMBeanList> recv_timResponseMessageIq(CancellationToken cancellationToken = default)
    {
      
      var tmp329 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp329.Type == TMessageType.Exception)
      {
        var tmp330 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp330;
      }

      var tmp331 = new InternalStructs.timResponseMessageIq_result();
      await tmp331.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp331.__isset.success)
      {
        return tmp331.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponseMessageIq failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timResponsePresenceList(pbeanList, auth, cancellationToken);
      return await recv_timResponsePresenceList(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timResponsePresenceList", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp332 = new InternalStructs.timResponsePresenceList_args() {
        PbeanList = pbeanList,
        Auth = auth,
      };
      
      await tmp332.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> recv_timResponsePresenceList(CancellationToken cancellationToken = default)
    {
      
      var tmp333 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp333.Type == TMessageType.Exception)
      {
        var tmp334 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp334;
      }

      var tmp335 = new InternalStructs.timResponsePresenceList_result();
      await tmp335.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp335.__isset.success)
      {
        return tmp335.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponsePresenceList failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> timResponseMessageList(TimMBeanList mbeanList, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await send_timResponseMessageList(mbeanList, auth, cancellationToken);
      return await recv_timResponseMessageList(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_timResponseMessageList(TimMBeanList mbeanList, TimAuth auth, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("timResponseMessageList", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp336 = new InternalStructs.timResponseMessageList_args() {
        MbeanList = mbeanList,
        Auth = auth,
      };
      
      await tmp336.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<TimResponseBean> recv_timResponseMessageList(CancellationToken cancellationToken = default)
    {
      
      var tmp337 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp337.Type == TMessageType.Exception)
      {
        var tmp338 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp338;
      }

      var tmp339 = new InternalStructs.timResponseMessageList_result();
      await tmp339.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp339.__isset.success)
      {
        return tmp339.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "timResponseMessageList failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["timStream"] = timStream_ProcessAsync;
      processMap_["timStarttls"] = timStarttls_ProcessAsync;
      processMap_["timLogin"] = timLogin_ProcessAsync;
      processMap_["timAck"] = timAck_ProcessAsync;
      processMap_["timPresence"] = timPresence_ProcessAsync;
      processMap_["timMessage"] = timMessage_ProcessAsync;
      processMap_["timPing"] = timPing_ProcessAsync;
      processMap_["timError"] = timError_ProcessAsync;
      processMap_["timLogout"] = timLogout_ProcessAsync;
      processMap_["timRegist"] = timRegist_ProcessAsync;
      processMap_["timRoser"] = timRoser_ProcessAsync;
      processMap_["timMessageList"] = timMessageList_ProcessAsync;
      processMap_["timPresenceList"] = timPresenceList_ProcessAsync;
      processMap_["timMessageIq"] = timMessageIq_ProcessAsync;
      processMap_["timMessageResult"] = timMessageResult_ProcessAsync;
      processMap_["timProperty"] = timProperty_ProcessAsync;
      processMap_["timRemoteUserAuth"] = timRemoteUserAuth_ProcessAsync;
      processMap_["timRemoteUserGet"] = timRemoteUserGet_ProcessAsync;
      processMap_["timRemoteUserEdit"] = timRemoteUserEdit_ProcessAsync;
      processMap_["timResponsePresence"] = timResponsePresence_ProcessAsync;
      processMap_["timResponseMessage"] = timResponseMessage_ProcessAsync;
      processMap_["timResponseMessageIq"] = timResponseMessageIq_ProcessAsync;
      processMap_["timResponsePresenceList"] = timResponsePresenceList_ProcessAsync;
      processMap_["timResponseMessageList"] = timResponseMessageList_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task timStream_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp340 = new InternalStructs.timStream_args();
      await tmp340.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timStream(tmp340.Param, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp342)
      {
        var tmp343 = $"Error occurred in {GetType().FullName}: {tmp342.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp342, tmp343);
        else
          Console.Error.WriteLine(tmp343);
      }
    }

    public async global::System.Threading.Tasks.Task timStarttls_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp344 = new InternalStructs.timStarttls_args();
      await tmp344.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timStarttls(cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp346)
      {
        var tmp347 = $"Error occurred in {GetType().FullName}: {tmp346.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp346, tmp347);
        else
          Console.Error.WriteLine(tmp347);
      }
    }

    public async global::System.Threading.Tasks.Task timLogin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp348 = new InternalStructs.timLogin_args();
      await tmp348.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timLogin(tmp348.Tid, tmp348.Pwd, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp350)
      {
        var tmp351 = $"Error occurred in {GetType().FullName}: {tmp350.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp350, tmp351);
        else
          Console.Error.WriteLine(tmp351);
      }
    }

    public async global::System.Threading.Tasks.Task timAck_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp352 = new InternalStructs.timAck_args();
      await tmp352.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timAck(tmp352.Ab, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp354)
      {
        var tmp355 = $"Error occurred in {GetType().FullName}: {tmp354.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp354, tmp355);
        else
          Console.Error.WriteLine(tmp355);
      }
    }

    public async global::System.Threading.Tasks.Task timPresence_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp356 = new InternalStructs.timPresence_args();
      await tmp356.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timPresence(tmp356.Pbean, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp358)
      {
        var tmp359 = $"Error occurred in {GetType().FullName}: {tmp358.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp358, tmp359);
        else
          Console.Error.WriteLine(tmp359);
      }
    }

    public async global::System.Threading.Tasks.Task timMessage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp360 = new InternalStructs.timMessage_args();
      await tmp360.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timMessage(tmp360.Mbean, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp362)
      {
        var tmp363 = $"Error occurred in {GetType().FullName}: {tmp362.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp362, tmp363);
        else
          Console.Error.WriteLine(tmp363);
      }
    }

    public async global::System.Threading.Tasks.Task timPing_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp364 = new InternalStructs.timPing_args();
      await tmp364.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timPing(tmp364.ThreadId, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp366)
      {
        var tmp367 = $"Error occurred in {GetType().FullName}: {tmp366.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp366, tmp367);
        else
          Console.Error.WriteLine(tmp367);
      }
    }

    public async global::System.Threading.Tasks.Task timError_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp368 = new InternalStructs.timError_args();
      await tmp368.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timError(tmp368.E, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp370)
      {
        var tmp371 = $"Error occurred in {GetType().FullName}: {tmp370.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp370, tmp371);
        else
          Console.Error.WriteLine(tmp371);
      }
    }

    public async global::System.Threading.Tasks.Task timLogout_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp372 = new InternalStructs.timLogout_args();
      await tmp372.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timLogout(cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp374)
      {
        var tmp375 = $"Error occurred in {GetType().FullName}: {tmp374.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp374, tmp375);
        else
          Console.Error.WriteLine(tmp375);
      }
    }

    public async global::System.Threading.Tasks.Task timRegist_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp376 = new InternalStructs.timRegist_args();
      await tmp376.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timRegist(tmp376.Tid, tmp376.Auth, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp378)
      {
        var tmp379 = $"Error occurred in {GetType().FullName}: {tmp378.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp378, tmp379);
        else
          Console.Error.WriteLine(tmp379);
      }
    }

    public async global::System.Threading.Tasks.Task timRoser_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp380 = new InternalStructs.timRoser_args();
      await tmp380.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timRoser(tmp380.Roster, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp382)
      {
        var tmp383 = $"Error occurred in {GetType().FullName}: {tmp382.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp382, tmp383);
        else
          Console.Error.WriteLine(tmp383);
      }
    }

    public async global::System.Threading.Tasks.Task timMessageList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp384 = new InternalStructs.timMessageList_args();
      await tmp384.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timMessageList(tmp384.MbeanList, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp386)
      {
        var tmp387 = $"Error occurred in {GetType().FullName}: {tmp386.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp386, tmp387);
        else
          Console.Error.WriteLine(tmp387);
      }
    }

    public async global::System.Threading.Tasks.Task timPresenceList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp388 = new InternalStructs.timPresenceList_args();
      await tmp388.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timPresenceList(tmp388.PbeanList, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp390)
      {
        var tmp391 = $"Error occurred in {GetType().FullName}: {tmp390.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp390, tmp391);
        else
          Console.Error.WriteLine(tmp391);
      }
    }

    public async global::System.Threading.Tasks.Task timMessageIq_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp392 = new InternalStructs.timMessageIq_args();
      await tmp392.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timMessageIq(tmp392.TimMsgIq, tmp392.IqType, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp394)
      {
        var tmp395 = $"Error occurred in {GetType().FullName}: {tmp394.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp394, tmp395);
        else
          Console.Error.WriteLine(tmp395);
      }
    }

    public async global::System.Threading.Tasks.Task timMessageResult_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp396 = new InternalStructs.timMessageResult_args();
      await tmp396.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timMessageResult(tmp396.Mbean, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp398)
      {
        var tmp399 = $"Error occurred in {GetType().FullName}: {tmp398.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp398, tmp399);
        else
          Console.Error.WriteLine(tmp399);
      }
    }

    public async global::System.Threading.Tasks.Task timProperty_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp400 = new InternalStructs.timProperty_args();
      await tmp400.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      try
      {
        await _iAsync.timProperty(tmp400.Tpb, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp402)
      {
        var tmp403 = $"Error occurred in {GetType().FullName}: {tmp402.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp402, tmp403);
        else
          Console.Error.WriteLine(tmp403);
      }
    }

    public async global::System.Threading.Tasks.Task timRemoteUserAuth_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp404 = new InternalStructs.timRemoteUserAuth_args();
      await tmp404.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp405 = new InternalStructs.timRemoteUserAuth_result();
      try
      {
        tmp405.Success = await _iAsync.timRemoteUserAuth(tmp404.Tid, tmp404.Pwd, tmp404.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timRemoteUserAuth", TMessageType.Reply, seqid), cancellationToken); 
        await tmp405.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp406)
      {
        var tmp407 = $"Error occurred in {GetType().FullName}: {tmp406.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp406, tmp407);
        else
          Console.Error.WriteLine(tmp407);
        var tmp408 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timRemoteUserAuth", TMessageType.Exception, seqid), cancellationToken);
        await tmp408.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timRemoteUserGet_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp409 = new InternalStructs.timRemoteUserGet_args();
      await tmp409.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp410 = new InternalStructs.timRemoteUserGet_result();
      try
      {
        tmp410.Success = await _iAsync.timRemoteUserGet(tmp409.Tid, tmp409.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timRemoteUserGet", TMessageType.Reply, seqid), cancellationToken); 
        await tmp410.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp411)
      {
        var tmp412 = $"Error occurred in {GetType().FullName}: {tmp411.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp411, tmp412);
        else
          Console.Error.WriteLine(tmp412);
        var tmp413 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timRemoteUserGet", TMessageType.Exception, seqid), cancellationToken);
        await tmp413.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timRemoteUserEdit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp414 = new InternalStructs.timRemoteUserEdit_args();
      await tmp414.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp415 = new InternalStructs.timRemoteUserEdit_result();
      try
      {
        tmp415.Success = await _iAsync.timRemoteUserEdit(tmp414.Tid, tmp414.Ub, tmp414.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timRemoteUserEdit", TMessageType.Reply, seqid), cancellationToken); 
        await tmp415.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp416)
      {
        var tmp417 = $"Error occurred in {GetType().FullName}: {tmp416.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp416, tmp417);
        else
          Console.Error.WriteLine(tmp417);
        var tmp418 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timRemoteUserEdit", TMessageType.Exception, seqid), cancellationToken);
        await tmp418.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timResponsePresence_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp419 = new InternalStructs.timResponsePresence_args();
      await tmp419.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp420 = new InternalStructs.timResponsePresence_result();
      try
      {
        tmp420.Success = await _iAsync.timResponsePresence(tmp419.Pbean, tmp419.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timResponsePresence", TMessageType.Reply, seqid), cancellationToken); 
        await tmp420.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp421)
      {
        var tmp422 = $"Error occurred in {GetType().FullName}: {tmp421.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp421, tmp422);
        else
          Console.Error.WriteLine(tmp422);
        var tmp423 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timResponsePresence", TMessageType.Exception, seqid), cancellationToken);
        await tmp423.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timResponseMessage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp424 = new InternalStructs.timResponseMessage_args();
      await tmp424.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp425 = new InternalStructs.timResponseMessage_result();
      try
      {
        tmp425.Success = await _iAsync.timResponseMessage(tmp424.Mbean, tmp424.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timResponseMessage", TMessageType.Reply, seqid), cancellationToken); 
        await tmp425.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp426)
      {
        var tmp427 = $"Error occurred in {GetType().FullName}: {tmp426.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp426, tmp427);
        else
          Console.Error.WriteLine(tmp427);
        var tmp428 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timResponseMessage", TMessageType.Exception, seqid), cancellationToken);
        await tmp428.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timResponseMessageIq_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp429 = new InternalStructs.timResponseMessageIq_args();
      await tmp429.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp430 = new InternalStructs.timResponseMessageIq_result();
      try
      {
        tmp430.Success = await _iAsync.timResponseMessageIq(tmp429.TimMsgIq, tmp429.IqType, tmp429.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timResponseMessageIq", TMessageType.Reply, seqid), cancellationToken); 
        await tmp430.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp431)
      {
        var tmp432 = $"Error occurred in {GetType().FullName}: {tmp431.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp431, tmp432);
        else
          Console.Error.WriteLine(tmp432);
        var tmp433 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timResponseMessageIq", TMessageType.Exception, seqid), cancellationToken);
        await tmp433.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timResponsePresenceList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp434 = new InternalStructs.timResponsePresenceList_args();
      await tmp434.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp435 = new InternalStructs.timResponsePresenceList_result();
      try
      {
        tmp435.Success = await _iAsync.timResponsePresenceList(tmp434.PbeanList, tmp434.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timResponsePresenceList", TMessageType.Reply, seqid), cancellationToken); 
        await tmp435.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp436)
      {
        var tmp437 = $"Error occurred in {GetType().FullName}: {tmp436.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp436, tmp437);
        else
          Console.Error.WriteLine(tmp437);
        var tmp438 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timResponsePresenceList", TMessageType.Exception, seqid), cancellationToken);
        await tmp438.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task timResponseMessageList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp439 = new InternalStructs.timResponseMessageList_args();
      await tmp439.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp440 = new InternalStructs.timResponseMessageList_result();
      try
      {
        tmp440.Success = await _iAsync.timResponseMessageList(tmp439.MbeanList, tmp439.Auth, cancellationToken);
        await oprot.WriteMessageBeginAsync(new TMessage("timResponseMessageList", TMessageType.Reply, seqid), cancellationToken); 
        await tmp440.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp441)
      {
        var tmp442 = $"Error occurred in {GetType().FullName}: {tmp441.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp441, tmp442);
        else
          Console.Error.WriteLine(tmp442);
        var tmp443 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("timResponseMessageList", TMessageType.Exception, seqid), cancellationToken);
        await tmp443.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class timStream_args : TBase
    {
      private TimParam _param;

      public TimParam Param
      {
        get
        {
          return _param;
        }
        set
        {
          __isset.param = true;
          this._param = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool param;
      }

      public timStream_args()
      {
      }

      public timStream_args DeepCopy()
      {
        var tmp444 = new timStream_args();
        if((Param != null) && __isset.param)
        {
          tmp444.Param = (TimParam)this.Param.DeepCopy();
        }
        tmp444.__isset.param = this.__isset.param;
        return tmp444;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Param = new TimParam();
                  await Param.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp445 = new TStruct("timStream_args");
          await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
          var tmp446 = new TField();
          if((Param != null) && __isset.param)
          {
            tmp446.Name = "param";
            tmp446.Type = TType.Struct;
            tmp446.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
            await Param.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timStream_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.param == other.__isset.param) && ((!__isset.param) || (global::System.Object.Equals(Param, other.Param))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Param != null) && __isset.param)
          {
            hashcode = (hashcode * 397) + Param.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp447 = new StringBuilder("timStream_args(");
        int tmp448 = 0;
        if((Param != null) && __isset.param)
        {
          if(0 < tmp448++) { tmp447.Append(", "); }
          tmp447.Append("Param: ");
          Param.ToString(tmp447);
        }
        tmp447.Append(')');
        return tmp447.ToString();
      }
    }


    public partial class timStarttls_args : TBase
    {

      public timStarttls_args()
      {
      }

      public timStarttls_args DeepCopy()
      {
        var tmp449 = new timStarttls_args();
        return tmp449;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp450 = new TStruct("timStarttls_args");
          await oprot.WriteStructBeginAsync(tmp450, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timStarttls_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp451 = new StringBuilder("timStarttls_args(");
        tmp451.Append(')');
        return tmp451.ToString();
      }
    }


    public partial class timLogin_args : TBase
    {
      private Tid _tid;
      private string _pwd;

      public Tid Tid
      {
        get
        {
          return _tid;
        }
        set
        {
          __isset.tid = true;
          this._tid = value;
        }
      }

      public string Pwd
      {
        get
        {
          return _pwd;
        }
        set
        {
          __isset.pwd = true;
          this._pwd = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool tid;
        public bool pwd;
      }

      public timLogin_args()
      {
      }

      public timLogin_args DeepCopy()
      {
        var tmp453 = new timLogin_args();
        if((Tid != null) && __isset.tid)
        {
          tmp453.Tid = (Tid)this.Tid.DeepCopy();
        }
        tmp453.__isset.tid = this.__isset.tid;
        if((Pwd != null) && __isset.pwd)
        {
          tmp453.Pwd = this.Pwd;
        }
        tmp453.__isset.pwd = this.__isset.pwd;
        return tmp453;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Tid = new Tid();
                  await Tid.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Pwd = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp454 = new TStruct("timLogin_args");
          await oprot.WriteStructBeginAsync(tmp454, cancellationToken);
          var tmp455 = new TField();
          if((Tid != null) && __isset.tid)
          {
            tmp455.Name = "tid";
            tmp455.Type = TType.Struct;
            tmp455.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp455, cancellationToken);
            await Tid.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Pwd != null) && __isset.pwd)
          {
            tmp455.Name = "pwd";
            tmp455.Type = TType.String;
            tmp455.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp455, cancellationToken);
            await oprot.WriteStringAsync(Pwd, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timLogin_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.tid == other.__isset.tid) && ((!__isset.tid) || (global::System.Object.Equals(Tid, other.Tid))))
          && ((__isset.pwd == other.__isset.pwd) && ((!__isset.pwd) || (global::System.Object.Equals(Pwd, other.Pwd))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Tid != null) && __isset.tid)
          {
            hashcode = (hashcode * 397) + Tid.GetHashCode();
          }
          if((Pwd != null) && __isset.pwd)
          {
            hashcode = (hashcode * 397) + Pwd.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp456 = new StringBuilder("timLogin_args(");
        int tmp457 = 0;
        if((Tid != null) && __isset.tid)
        {
          if(0 < tmp457++) { tmp456.Append(", "); }
          tmp456.Append("Tid: ");
          Tid.ToString(tmp456);
        }
        if((Pwd != null) && __isset.pwd)
        {
          if(0 < tmp457++) { tmp456.Append(", "); }
          tmp456.Append("Pwd: ");
          Pwd.ToString(tmp456);
        }
        tmp456.Append(')');
        return tmp456.ToString();
      }
    }


    public partial class timAck_args : TBase
    {
      private TimAckBean _ab;

      public TimAckBean Ab
      {
        get
        {
          return _ab;
        }
        set
        {
          __isset.ab = true;
          this._ab = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool ab;
      }

      public timAck_args()
      {
      }

      public timAck_args DeepCopy()
      {
        var tmp458 = new timAck_args();
        if((Ab != null) && __isset.ab)
        {
          tmp458.Ab = (TimAckBean)this.Ab.DeepCopy();
        }
        tmp458.__isset.ab = this.__isset.ab;
        return tmp458;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ab = new TimAckBean();
                  await Ab.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp459 = new TStruct("timAck_args");
          await oprot.WriteStructBeginAsync(tmp459, cancellationToken);
          var tmp460 = new TField();
          if((Ab != null) && __isset.ab)
          {
            tmp460.Name = "ab";
            tmp460.Type = TType.Struct;
            tmp460.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp460, cancellationToken);
            await Ab.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timAck_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.ab == other.__isset.ab) && ((!__isset.ab) || (global::System.Object.Equals(Ab, other.Ab))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Ab != null) && __isset.ab)
          {
            hashcode = (hashcode * 397) + Ab.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp461 = new StringBuilder("timAck_args(");
        int tmp462 = 0;
        if((Ab != null) && __isset.ab)
        {
          if(0 < tmp462++) { tmp461.Append(", "); }
          tmp461.Append("Ab: ");
          Ab.ToString(tmp461);
        }
        tmp461.Append(')');
        return tmp461.ToString();
      }
    }


    public partial class timPresence_args : TBase
    {
      private TimPBean _pbean;

      public TimPBean Pbean
      {
        get
        {
          return _pbean;
        }
        set
        {
          __isset.pbean = true;
          this._pbean = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool pbean;
      }

      public timPresence_args()
      {
      }

      public timPresence_args DeepCopy()
      {
        var tmp463 = new timPresence_args();
        if((Pbean != null) && __isset.pbean)
        {
          tmp463.Pbean = (TimPBean)this.Pbean.DeepCopy();
        }
        tmp463.__isset.pbean = this.__isset.pbean;
        return tmp463;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Pbean = new TimPBean();
                  await Pbean.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp464 = new TStruct("timPresence_args");
          await oprot.WriteStructBeginAsync(tmp464, cancellationToken);
          var tmp465 = new TField();
          if((Pbean != null) && __isset.pbean)
          {
            tmp465.Name = "pbean";
            tmp465.Type = TType.Struct;
            tmp465.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp465, cancellationToken);
            await Pbean.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timPresence_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.pbean == other.__isset.pbean) && ((!__isset.pbean) || (global::System.Object.Equals(Pbean, other.Pbean))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Pbean != null) && __isset.pbean)
          {
            hashcode = (hashcode * 397) + Pbean.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp466 = new StringBuilder("timPresence_args(");
        int tmp467 = 0;
        if((Pbean != null) && __isset.pbean)
        {
          if(0 < tmp467++) { tmp466.Append(", "); }
          tmp466.Append("Pbean: ");
          Pbean.ToString(tmp466);
        }
        tmp466.Append(')');
        return tmp466.ToString();
      }
    }


    public partial class timMessage_args : TBase
    {
      private TimMBean _mbean;

      public TimMBean Mbean
      {
        get
        {
          return _mbean;
        }
        set
        {
          __isset.mbean = true;
          this._mbean = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool mbean;
      }

      public timMessage_args()
      {
      }

      public timMessage_args DeepCopy()
      {
        var tmp468 = new timMessage_args();
        if((Mbean != null) && __isset.mbean)
        {
          tmp468.Mbean = (TimMBean)this.Mbean.DeepCopy();
        }
        tmp468.__isset.mbean = this.__isset.mbean;
        return tmp468;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Mbean = new TimMBean();
                  await Mbean.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp469 = new TStruct("timMessage_args");
          await oprot.WriteStructBeginAsync(tmp469, cancellationToken);
          var tmp470 = new TField();
          if((Mbean != null) && __isset.mbean)
          {
            tmp470.Name = "mbean";
            tmp470.Type = TType.Struct;
            tmp470.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
            await Mbean.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timMessage_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.mbean == other.__isset.mbean) && ((!__isset.mbean) || (global::System.Object.Equals(Mbean, other.Mbean))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Mbean != null) && __isset.mbean)
          {
            hashcode = (hashcode * 397) + Mbean.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp471 = new StringBuilder("timMessage_args(");
        int tmp472 = 0;
        if((Mbean != null) && __isset.mbean)
        {
          if(0 < tmp472++) { tmp471.Append(", "); }
          tmp471.Append("Mbean: ");
          Mbean.ToString(tmp471);
        }
        tmp471.Append(')');
        return tmp471.ToString();
      }
    }


    public partial class timPing_args : TBase
    {
      private string _threadId;

      public string ThreadId
      {
        get
        {
          return _threadId;
        }
        set
        {
          __isset.threadId = true;
          this._threadId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool threadId;
      }

      public timPing_args()
      {
      }

      public timPing_args DeepCopy()
      {
        var tmp473 = new timPing_args();
        if((ThreadId != null) && __isset.threadId)
        {
          tmp473.ThreadId = this.ThreadId;
        }
        tmp473.__isset.threadId = this.__isset.threadId;
        return tmp473;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  ThreadId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp474 = new TStruct("timPing_args");
          await oprot.WriteStructBeginAsync(tmp474, cancellationToken);
          var tmp475 = new TField();
          if((ThreadId != null) && __isset.threadId)
          {
            tmp475.Name = "threadId";
            tmp475.Type = TType.String;
            tmp475.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp475, cancellationToken);
            await oprot.WriteStringAsync(ThreadId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timPing_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.threadId == other.__isset.threadId) && ((!__isset.threadId) || (global::System.Object.Equals(ThreadId, other.ThreadId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((ThreadId != null) && __isset.threadId)
          {
            hashcode = (hashcode * 397) + ThreadId.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp476 = new StringBuilder("timPing_args(");
        int tmp477 = 0;
        if((ThreadId != null) && __isset.threadId)
        {
          if(0 < tmp477++) { tmp476.Append(", "); }
          tmp476.Append("ThreadId: ");
          ThreadId.ToString(tmp476);
        }
        tmp476.Append(')');
        return tmp476.ToString();
      }
    }


    public partial class timError_args : TBase
    {
      private TimError _e;

      public TimError E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public timError_args()
      {
      }

      public timError_args DeepCopy()
      {
        var tmp478 = new timError_args();
        if((E != null) && __isset.e)
        {
          tmp478.E = (TimError)this.E.DeepCopy();
        }
        tmp478.__isset.e = this.__isset.e;
        return tmp478;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new TimError();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp479 = new TStruct("timError_args");
          await oprot.WriteStructBeginAsync(tmp479, cancellationToken);
          var tmp480 = new TField();
          if((E != null) && __isset.e)
          {
            tmp480.Name = "e";
            tmp480.Type = TType.Struct;
            tmp480.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
            await E.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timError_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp481 = new StringBuilder("timError_args(");
        int tmp482 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp482++) { tmp481.Append(", "); }
          tmp481.Append("E: ");
          E.ToString(tmp481);
        }
        tmp481.Append(')');
        return tmp481.ToString();
      }
    }


    public partial class timLogout_args : TBase
    {

      public timLogout_args()
      {
      }

      public timLogout_args DeepCopy()
      {
        var tmp483 = new timLogout_args();
        return tmp483;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp484 = new TStruct("timLogout_args");
          await oprot.WriteStructBeginAsync(tmp484, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timLogout_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp485 = new StringBuilder("timLogout_args(");
        tmp485.Append(')');
        return tmp485.ToString();
      }
    }


    public partial class timRegist_args : TBase
    {
      private Tid _tid;
      private string _auth;

      public Tid Tid
      {
        get
        {
          return _tid;
        }
        set
        {
          __isset.tid = true;
          this._tid = value;
        }
      }

      public string Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool tid;
        public bool auth;
      }

      public timRegist_args()
      {
      }

      public timRegist_args DeepCopy()
      {
        var tmp487 = new timRegist_args();
        if((Tid != null) && __isset.tid)
        {
          tmp487.Tid = (Tid)this.Tid.DeepCopy();
        }
        tmp487.__isset.tid = this.__isset.tid;
        if((Auth != null) && __isset.auth)
        {
          tmp487.Auth = this.Auth;
        }
        tmp487.__isset.auth = this.__isset.auth;
        return tmp487;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Tid = new Tid();
                  await Tid.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Auth = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp488 = new TStruct("timRegist_args");
          await oprot.WriteStructBeginAsync(tmp488, cancellationToken);
          var tmp489 = new TField();
          if((Tid != null) && __isset.tid)
          {
            tmp489.Name = "tid";
            tmp489.Type = TType.Struct;
            tmp489.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp489, cancellationToken);
            await Tid.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp489.Name = "auth";
            tmp489.Type = TType.String;
            tmp489.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp489, cancellationToken);
            await oprot.WriteStringAsync(Auth, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRegist_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.tid == other.__isset.tid) && ((!__isset.tid) || (global::System.Object.Equals(Tid, other.Tid))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Tid != null) && __isset.tid)
          {
            hashcode = (hashcode * 397) + Tid.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp490 = new StringBuilder("timRegist_args(");
        int tmp491 = 0;
        if((Tid != null) && __isset.tid)
        {
          if(0 < tmp491++) { tmp490.Append(", "); }
          tmp490.Append("Tid: ");
          Tid.ToString(tmp490);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp491++) { tmp490.Append(", "); }
          tmp490.Append("Auth: ");
          Auth.ToString(tmp490);
        }
        tmp490.Append(')');
        return tmp490.ToString();
      }
    }


    public partial class timRoser_args : TBase
    {
      private TimRoster _roster;

      public TimRoster Roster
      {
        get
        {
          return _roster;
        }
        set
        {
          __isset.roster = true;
          this._roster = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool roster;
      }

      public timRoser_args()
      {
      }

      public timRoser_args DeepCopy()
      {
        var tmp492 = new timRoser_args();
        if((Roster != null) && __isset.roster)
        {
          tmp492.Roster = (TimRoster)this.Roster.DeepCopy();
        }
        tmp492.__isset.roster = this.__isset.roster;
        return tmp492;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Roster = new TimRoster();
                  await Roster.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp493 = new TStruct("timRoser_args");
          await oprot.WriteStructBeginAsync(tmp493, cancellationToken);
          var tmp494 = new TField();
          if((Roster != null) && __isset.roster)
          {
            tmp494.Name = "roster";
            tmp494.Type = TType.Struct;
            tmp494.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp494, cancellationToken);
            await Roster.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRoser_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.roster == other.__isset.roster) && ((!__isset.roster) || (global::System.Object.Equals(Roster, other.Roster))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Roster != null) && __isset.roster)
          {
            hashcode = (hashcode * 397) + Roster.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp495 = new StringBuilder("timRoser_args(");
        int tmp496 = 0;
        if((Roster != null) && __isset.roster)
        {
          if(0 < tmp496++) { tmp495.Append(", "); }
          tmp495.Append("Roster: ");
          Roster.ToString(tmp495);
        }
        tmp495.Append(')');
        return tmp495.ToString();
      }
    }


    public partial class timMessageList_args : TBase
    {
      private TimMBeanList _mbeanList;

      public TimMBeanList MbeanList
      {
        get
        {
          return _mbeanList;
        }
        set
        {
          __isset.mbeanList = true;
          this._mbeanList = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool mbeanList;
      }

      public timMessageList_args()
      {
      }

      public timMessageList_args DeepCopy()
      {
        var tmp497 = new timMessageList_args();
        if((MbeanList != null) && __isset.mbeanList)
        {
          tmp497.MbeanList = (TimMBeanList)this.MbeanList.DeepCopy();
        }
        tmp497.__isset.mbeanList = this.__isset.mbeanList;
        return tmp497;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  MbeanList = new TimMBeanList();
                  await MbeanList.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp498 = new TStruct("timMessageList_args");
          await oprot.WriteStructBeginAsync(tmp498, cancellationToken);
          var tmp499 = new TField();
          if((MbeanList != null) && __isset.mbeanList)
          {
            tmp499.Name = "mbeanList";
            tmp499.Type = TType.Struct;
            tmp499.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp499, cancellationToken);
            await MbeanList.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timMessageList_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.mbeanList == other.__isset.mbeanList) && ((!__isset.mbeanList) || (global::System.Object.Equals(MbeanList, other.MbeanList))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((MbeanList != null) && __isset.mbeanList)
          {
            hashcode = (hashcode * 397) + MbeanList.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp500 = new StringBuilder("timMessageList_args(");
        int tmp501 = 0;
        if((MbeanList != null) && __isset.mbeanList)
        {
          if(0 < tmp501++) { tmp500.Append(", "); }
          tmp500.Append("MbeanList: ");
          MbeanList.ToString(tmp500);
        }
        tmp500.Append(')');
        return tmp500.ToString();
      }
    }


    public partial class timPresenceList_args : TBase
    {
      private TimPBeanList _pbeanList;

      public TimPBeanList PbeanList
      {
        get
        {
          return _pbeanList;
        }
        set
        {
          __isset.pbeanList = true;
          this._pbeanList = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool pbeanList;
      }

      public timPresenceList_args()
      {
      }

      public timPresenceList_args DeepCopy()
      {
        var tmp502 = new timPresenceList_args();
        if((PbeanList != null) && __isset.pbeanList)
        {
          tmp502.PbeanList = (TimPBeanList)this.PbeanList.DeepCopy();
        }
        tmp502.__isset.pbeanList = this.__isset.pbeanList;
        return tmp502;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  PbeanList = new TimPBeanList();
                  await PbeanList.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp503 = new TStruct("timPresenceList_args");
          await oprot.WriteStructBeginAsync(tmp503, cancellationToken);
          var tmp504 = new TField();
          if((PbeanList != null) && __isset.pbeanList)
          {
            tmp504.Name = "pbeanList";
            tmp504.Type = TType.Struct;
            tmp504.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp504, cancellationToken);
            await PbeanList.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timPresenceList_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.pbeanList == other.__isset.pbeanList) && ((!__isset.pbeanList) || (global::System.Object.Equals(PbeanList, other.PbeanList))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((PbeanList != null) && __isset.pbeanList)
          {
            hashcode = (hashcode * 397) + PbeanList.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp505 = new StringBuilder("timPresenceList_args(");
        int tmp506 = 0;
        if((PbeanList != null) && __isset.pbeanList)
        {
          if(0 < tmp506++) { tmp505.Append(", "); }
          tmp505.Append("PbeanList: ");
          PbeanList.ToString(tmp505);
        }
        tmp505.Append(')');
        return tmp505.ToString();
      }
    }


    public partial class timMessageIq_args : TBase
    {
      private TimMessageIq _timMsgIq;
      private string _iqType;

      public TimMessageIq TimMsgIq
      {
        get
        {
          return _timMsgIq;
        }
        set
        {
          __isset.timMsgIq = true;
          this._timMsgIq = value;
        }
      }

      public string IqType
      {
        get
        {
          return _iqType;
        }
        set
        {
          __isset.iqType = true;
          this._iqType = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timMsgIq;
        public bool iqType;
      }

      public timMessageIq_args()
      {
      }

      public timMessageIq_args DeepCopy()
      {
        var tmp507 = new timMessageIq_args();
        if((TimMsgIq != null) && __isset.timMsgIq)
        {
          tmp507.TimMsgIq = (TimMessageIq)this.TimMsgIq.DeepCopy();
        }
        tmp507.__isset.timMsgIq = this.__isset.timMsgIq;
        if((IqType != null) && __isset.iqType)
        {
          tmp507.IqType = this.IqType;
        }
        tmp507.__isset.iqType = this.__isset.iqType;
        return tmp507;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  TimMsgIq = new TimMessageIq();
                  await TimMsgIq.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  IqType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp508 = new TStruct("timMessageIq_args");
          await oprot.WriteStructBeginAsync(tmp508, cancellationToken);
          var tmp509 = new TField();
          if((TimMsgIq != null) && __isset.timMsgIq)
          {
            tmp509.Name = "timMsgIq";
            tmp509.Type = TType.Struct;
            tmp509.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp509, cancellationToken);
            await TimMsgIq.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((IqType != null) && __isset.iqType)
          {
            tmp509.Name = "iqType";
            tmp509.Type = TType.String;
            tmp509.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp509, cancellationToken);
            await oprot.WriteStringAsync(IqType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timMessageIq_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.timMsgIq == other.__isset.timMsgIq) && ((!__isset.timMsgIq) || (global::System.Object.Equals(TimMsgIq, other.TimMsgIq))))
          && ((__isset.iqType == other.__isset.iqType) && ((!__isset.iqType) || (global::System.Object.Equals(IqType, other.IqType))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((TimMsgIq != null) && __isset.timMsgIq)
          {
            hashcode = (hashcode * 397) + TimMsgIq.GetHashCode();
          }
          if((IqType != null) && __isset.iqType)
          {
            hashcode = (hashcode * 397) + IqType.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp510 = new StringBuilder("timMessageIq_args(");
        int tmp511 = 0;
        if((TimMsgIq != null) && __isset.timMsgIq)
        {
          if(0 < tmp511++) { tmp510.Append(", "); }
          tmp510.Append("TimMsgIq: ");
          TimMsgIq.ToString(tmp510);
        }
        if((IqType != null) && __isset.iqType)
        {
          if(0 < tmp511++) { tmp510.Append(", "); }
          tmp510.Append("IqType: ");
          IqType.ToString(tmp510);
        }
        tmp510.Append(')');
        return tmp510.ToString();
      }
    }


    public partial class timMessageResult_args : TBase
    {
      private TimMBean _mbean;

      public TimMBean Mbean
      {
        get
        {
          return _mbean;
        }
        set
        {
          __isset.mbean = true;
          this._mbean = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool mbean;
      }

      public timMessageResult_args()
      {
      }

      public timMessageResult_args DeepCopy()
      {
        var tmp512 = new timMessageResult_args();
        if((Mbean != null) && __isset.mbean)
        {
          tmp512.Mbean = (TimMBean)this.Mbean.DeepCopy();
        }
        tmp512.__isset.mbean = this.__isset.mbean;
        return tmp512;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Mbean = new TimMBean();
                  await Mbean.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp513 = new TStruct("timMessageResult_args");
          await oprot.WriteStructBeginAsync(tmp513, cancellationToken);
          var tmp514 = new TField();
          if((Mbean != null) && __isset.mbean)
          {
            tmp514.Name = "mbean";
            tmp514.Type = TType.Struct;
            tmp514.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp514, cancellationToken);
            await Mbean.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timMessageResult_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.mbean == other.__isset.mbean) && ((!__isset.mbean) || (global::System.Object.Equals(Mbean, other.Mbean))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Mbean != null) && __isset.mbean)
          {
            hashcode = (hashcode * 397) + Mbean.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp515 = new StringBuilder("timMessageResult_args(");
        int tmp516 = 0;
        if((Mbean != null) && __isset.mbean)
        {
          if(0 < tmp516++) { tmp515.Append(", "); }
          tmp515.Append("Mbean: ");
          Mbean.ToString(tmp515);
        }
        tmp515.Append(')');
        return tmp515.ToString();
      }
    }


    public partial class timProperty_args : TBase
    {
      private TimPropertyBean _tpb;

      public TimPropertyBean Tpb
      {
        get
        {
          return _tpb;
        }
        set
        {
          __isset.tpb = true;
          this._tpb = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool tpb;
      }

      public timProperty_args()
      {
      }

      public timProperty_args DeepCopy()
      {
        var tmp517 = new timProperty_args();
        if((Tpb != null) && __isset.tpb)
        {
          tmp517.Tpb = (TimPropertyBean)this.Tpb.DeepCopy();
        }
        tmp517.__isset.tpb = this.__isset.tpb;
        return tmp517;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Tpb = new TimPropertyBean();
                  await Tpb.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp518 = new TStruct("timProperty_args");
          await oprot.WriteStructBeginAsync(tmp518, cancellationToken);
          var tmp519 = new TField();
          if((Tpb != null) && __isset.tpb)
          {
            tmp519.Name = "tpb";
            tmp519.Type = TType.Struct;
            tmp519.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp519, cancellationToken);
            await Tpb.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timProperty_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.tpb == other.__isset.tpb) && ((!__isset.tpb) || (global::System.Object.Equals(Tpb, other.Tpb))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Tpb != null) && __isset.tpb)
          {
            hashcode = (hashcode * 397) + Tpb.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp520 = new StringBuilder("timProperty_args(");
        int tmp521 = 0;
        if((Tpb != null) && __isset.tpb)
        {
          if(0 < tmp521++) { tmp520.Append(", "); }
          tmp520.Append("Tpb: ");
          Tpb.ToString(tmp520);
        }
        tmp520.Append(')');
        return tmp520.ToString();
      }
    }


    public partial class timRemoteUserAuth_args : TBase
    {
      private Tid _tid;
      private string _pwd;
      private TimAuth _auth;

      public Tid Tid
      {
        get
        {
          return _tid;
        }
        set
        {
          __isset.tid = true;
          this._tid = value;
        }
      }

      public string Pwd
      {
        get
        {
          return _pwd;
        }
        set
        {
          __isset.pwd = true;
          this._pwd = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool tid;
        public bool pwd;
        public bool auth;
      }

      public timRemoteUserAuth_args()
      {
      }

      public timRemoteUserAuth_args DeepCopy()
      {
        var tmp522 = new timRemoteUserAuth_args();
        if((Tid != null) && __isset.tid)
        {
          tmp522.Tid = (Tid)this.Tid.DeepCopy();
        }
        tmp522.__isset.tid = this.__isset.tid;
        if((Pwd != null) && __isset.pwd)
        {
          tmp522.Pwd = this.Pwd;
        }
        tmp522.__isset.pwd = this.__isset.pwd;
        if((Auth != null) && __isset.auth)
        {
          tmp522.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp522.__isset.auth = this.__isset.auth;
        return tmp522;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Tid = new Tid();
                  await Tid.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  Pwd = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp523 = new TStruct("timRemoteUserAuth_args");
          await oprot.WriteStructBeginAsync(tmp523, cancellationToken);
          var tmp524 = new TField();
          if((Tid != null) && __isset.tid)
          {
            tmp524.Name = "tid";
            tmp524.Type = TType.Struct;
            tmp524.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp524, cancellationToken);
            await Tid.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Pwd != null) && __isset.pwd)
          {
            tmp524.Name = "pwd";
            tmp524.Type = TType.String;
            tmp524.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp524, cancellationToken);
            await oprot.WriteStringAsync(Pwd, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp524.Name = "auth";
            tmp524.Type = TType.Struct;
            tmp524.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp524, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRemoteUserAuth_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.tid == other.__isset.tid) && ((!__isset.tid) || (global::System.Object.Equals(Tid, other.Tid))))
          && ((__isset.pwd == other.__isset.pwd) && ((!__isset.pwd) || (global::System.Object.Equals(Pwd, other.Pwd))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Tid != null) && __isset.tid)
          {
            hashcode = (hashcode * 397) + Tid.GetHashCode();
          }
          if((Pwd != null) && __isset.pwd)
          {
            hashcode = (hashcode * 397) + Pwd.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp525 = new StringBuilder("timRemoteUserAuth_args(");
        int tmp526 = 0;
        if((Tid != null) && __isset.tid)
        {
          if(0 < tmp526++) { tmp525.Append(", "); }
          tmp525.Append("Tid: ");
          Tid.ToString(tmp525);
        }
        if((Pwd != null) && __isset.pwd)
        {
          if(0 < tmp526++) { tmp525.Append(", "); }
          tmp525.Append("Pwd: ");
          Pwd.ToString(tmp525);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp526++) { tmp525.Append(", "); }
          tmp525.Append("Auth: ");
          Auth.ToString(tmp525);
        }
        tmp525.Append(')');
        return tmp525.ToString();
      }
    }


    public partial class timRemoteUserAuth_result : TBase
    {
      private TimRemoteUserBean _success;

      public TimRemoteUserBean Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timRemoteUserAuth_result()
      {
      }

      public timRemoteUserAuth_result DeepCopy()
      {
        var tmp527 = new timRemoteUserAuth_result();
        if((Success != null) && __isset.success)
        {
          tmp527.Success = (TimRemoteUserBean)this.Success.DeepCopy();
        }
        tmp527.__isset.success = this.__isset.success;
        return tmp527;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimRemoteUserBean();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp528 = new TStruct("timRemoteUserAuth_result");
          await oprot.WriteStructBeginAsync(tmp528, cancellationToken);
          var tmp529 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp529.Name = "Success";
              tmp529.Type = TType.Struct;
              tmp529.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp529, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRemoteUserAuth_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp530 = new StringBuilder("timRemoteUserAuth_result(");
        int tmp531 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp531++) { tmp530.Append(", "); }
          tmp530.Append("Success: ");
          Success.ToString(tmp530);
        }
        tmp530.Append(')');
        return tmp530.ToString();
      }
    }


    public partial class timRemoteUserGet_args : TBase
    {
      private Tid _tid;
      private TimAuth _auth;

      public Tid Tid
      {
        get
        {
          return _tid;
        }
        set
        {
          __isset.tid = true;
          this._tid = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool tid;
        public bool auth;
      }

      public timRemoteUserGet_args()
      {
      }

      public timRemoteUserGet_args DeepCopy()
      {
        var tmp532 = new timRemoteUserGet_args();
        if((Tid != null) && __isset.tid)
        {
          tmp532.Tid = (Tid)this.Tid.DeepCopy();
        }
        tmp532.__isset.tid = this.__isset.tid;
        if((Auth != null) && __isset.auth)
        {
          tmp532.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp532.__isset.auth = this.__isset.auth;
        return tmp532;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Tid = new Tid();
                  await Tid.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp533 = new TStruct("timRemoteUserGet_args");
          await oprot.WriteStructBeginAsync(tmp533, cancellationToken);
          var tmp534 = new TField();
          if((Tid != null) && __isset.tid)
          {
            tmp534.Name = "tid";
            tmp534.Type = TType.Struct;
            tmp534.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp534, cancellationToken);
            await Tid.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp534.Name = "auth";
            tmp534.Type = TType.Struct;
            tmp534.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp534, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRemoteUserGet_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.tid == other.__isset.tid) && ((!__isset.tid) || (global::System.Object.Equals(Tid, other.Tid))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Tid != null) && __isset.tid)
          {
            hashcode = (hashcode * 397) + Tid.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp535 = new StringBuilder("timRemoteUserGet_args(");
        int tmp536 = 0;
        if((Tid != null) && __isset.tid)
        {
          if(0 < tmp536++) { tmp535.Append(", "); }
          tmp535.Append("Tid: ");
          Tid.ToString(tmp535);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp536++) { tmp535.Append(", "); }
          tmp535.Append("Auth: ");
          Auth.ToString(tmp535);
        }
        tmp535.Append(')');
        return tmp535.ToString();
      }
    }


    public partial class timRemoteUserGet_result : TBase
    {
      private TimRemoteUserBean _success;

      public TimRemoteUserBean Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timRemoteUserGet_result()
      {
      }

      public timRemoteUserGet_result DeepCopy()
      {
        var tmp537 = new timRemoteUserGet_result();
        if((Success != null) && __isset.success)
        {
          tmp537.Success = (TimRemoteUserBean)this.Success.DeepCopy();
        }
        tmp537.__isset.success = this.__isset.success;
        return tmp537;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimRemoteUserBean();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp538 = new TStruct("timRemoteUserGet_result");
          await oprot.WriteStructBeginAsync(tmp538, cancellationToken);
          var tmp539 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp539.Name = "Success";
              tmp539.Type = TType.Struct;
              tmp539.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp539, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRemoteUserGet_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp540 = new StringBuilder("timRemoteUserGet_result(");
        int tmp541 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp541++) { tmp540.Append(", "); }
          tmp540.Append("Success: ");
          Success.ToString(tmp540);
        }
        tmp540.Append(')');
        return tmp540.ToString();
      }
    }


    public partial class timRemoteUserEdit_args : TBase
    {
      private Tid _tid;
      private TimUserBean _ub;
      private TimAuth _auth;

      public Tid Tid
      {
        get
        {
          return _tid;
        }
        set
        {
          __isset.tid = true;
          this._tid = value;
        }
      }

      public TimUserBean Ub
      {
        get
        {
          return _ub;
        }
        set
        {
          __isset.ub = true;
          this._ub = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool tid;
        public bool ub;
        public bool auth;
      }

      public timRemoteUserEdit_args()
      {
      }

      public timRemoteUserEdit_args DeepCopy()
      {
        var tmp542 = new timRemoteUserEdit_args();
        if((Tid != null) && __isset.tid)
        {
          tmp542.Tid = (Tid)this.Tid.DeepCopy();
        }
        tmp542.__isset.tid = this.__isset.tid;
        if((Ub != null) && __isset.ub)
        {
          tmp542.Ub = (TimUserBean)this.Ub.DeepCopy();
        }
        tmp542.__isset.ub = this.__isset.ub;
        if((Auth != null) && __isset.auth)
        {
          tmp542.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp542.__isset.auth = this.__isset.auth;
        return tmp542;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Tid = new Tid();
                  await Tid.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Ub = new TimUserBean();
                  await Ub.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp543 = new TStruct("timRemoteUserEdit_args");
          await oprot.WriteStructBeginAsync(tmp543, cancellationToken);
          var tmp544 = new TField();
          if((Tid != null) && __isset.tid)
          {
            tmp544.Name = "tid";
            tmp544.Type = TType.Struct;
            tmp544.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp544, cancellationToken);
            await Tid.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Ub != null) && __isset.ub)
          {
            tmp544.Name = "ub";
            tmp544.Type = TType.Struct;
            tmp544.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp544, cancellationToken);
            await Ub.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp544.Name = "auth";
            tmp544.Type = TType.Struct;
            tmp544.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp544, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRemoteUserEdit_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.tid == other.__isset.tid) && ((!__isset.tid) || (global::System.Object.Equals(Tid, other.Tid))))
          && ((__isset.ub == other.__isset.ub) && ((!__isset.ub) || (global::System.Object.Equals(Ub, other.Ub))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Tid != null) && __isset.tid)
          {
            hashcode = (hashcode * 397) + Tid.GetHashCode();
          }
          if((Ub != null) && __isset.ub)
          {
            hashcode = (hashcode * 397) + Ub.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp545 = new StringBuilder("timRemoteUserEdit_args(");
        int tmp546 = 0;
        if((Tid != null) && __isset.tid)
        {
          if(0 < tmp546++) { tmp545.Append(", "); }
          tmp545.Append("Tid: ");
          Tid.ToString(tmp545);
        }
        if((Ub != null) && __isset.ub)
        {
          if(0 < tmp546++) { tmp545.Append(", "); }
          tmp545.Append("Ub: ");
          Ub.ToString(tmp545);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp546++) { tmp545.Append(", "); }
          tmp545.Append("Auth: ");
          Auth.ToString(tmp545);
        }
        tmp545.Append(')');
        return tmp545.ToString();
      }
    }


    public partial class timRemoteUserEdit_result : TBase
    {
      private TimRemoteUserBean _success;

      public TimRemoteUserBean Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timRemoteUserEdit_result()
      {
      }

      public timRemoteUserEdit_result DeepCopy()
      {
        var tmp547 = new timRemoteUserEdit_result();
        if((Success != null) && __isset.success)
        {
          tmp547.Success = (TimRemoteUserBean)this.Success.DeepCopy();
        }
        tmp547.__isset.success = this.__isset.success;
        return tmp547;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimRemoteUserBean();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp548 = new TStruct("timRemoteUserEdit_result");
          await oprot.WriteStructBeginAsync(tmp548, cancellationToken);
          var tmp549 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp549.Name = "Success";
              tmp549.Type = TType.Struct;
              tmp549.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp549, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timRemoteUserEdit_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp550 = new StringBuilder("timRemoteUserEdit_result(");
        int tmp551 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp551++) { tmp550.Append(", "); }
          tmp550.Append("Success: ");
          Success.ToString(tmp550);
        }
        tmp550.Append(')');
        return tmp550.ToString();
      }
    }


    public partial class timResponsePresence_args : TBase
    {
      private TimPBean _pbean;
      private TimAuth _auth;

      public TimPBean Pbean
      {
        get
        {
          return _pbean;
        }
        set
        {
          __isset.pbean = true;
          this._pbean = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool pbean;
        public bool auth;
      }

      public timResponsePresence_args()
      {
      }

      public timResponsePresence_args DeepCopy()
      {
        var tmp552 = new timResponsePresence_args();
        if((Pbean != null) && __isset.pbean)
        {
          tmp552.Pbean = (TimPBean)this.Pbean.DeepCopy();
        }
        tmp552.__isset.pbean = this.__isset.pbean;
        if((Auth != null) && __isset.auth)
        {
          tmp552.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp552.__isset.auth = this.__isset.auth;
        return tmp552;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Pbean = new TimPBean();
                  await Pbean.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp553 = new TStruct("timResponsePresence_args");
          await oprot.WriteStructBeginAsync(tmp553, cancellationToken);
          var tmp554 = new TField();
          if((Pbean != null) && __isset.pbean)
          {
            tmp554.Name = "pbean";
            tmp554.Type = TType.Struct;
            tmp554.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp554, cancellationToken);
            await Pbean.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp554.Name = "auth";
            tmp554.Type = TType.Struct;
            tmp554.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp554, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponsePresence_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.pbean == other.__isset.pbean) && ((!__isset.pbean) || (global::System.Object.Equals(Pbean, other.Pbean))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Pbean != null) && __isset.pbean)
          {
            hashcode = (hashcode * 397) + Pbean.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp555 = new StringBuilder("timResponsePresence_args(");
        int tmp556 = 0;
        if((Pbean != null) && __isset.pbean)
        {
          if(0 < tmp556++) { tmp555.Append(", "); }
          tmp555.Append("Pbean: ");
          Pbean.ToString(tmp555);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp556++) { tmp555.Append(", "); }
          tmp555.Append("Auth: ");
          Auth.ToString(tmp555);
        }
        tmp555.Append(')');
        return tmp555.ToString();
      }
    }


    public partial class timResponsePresence_result : TBase
    {
      private TimResponseBean _success;

      public TimResponseBean Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timResponsePresence_result()
      {
      }

      public timResponsePresence_result DeepCopy()
      {
        var tmp557 = new timResponsePresence_result();
        if((Success != null) && __isset.success)
        {
          tmp557.Success = (TimResponseBean)this.Success.DeepCopy();
        }
        tmp557.__isset.success = this.__isset.success;
        return tmp557;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimResponseBean();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp558 = new TStruct("timResponsePresence_result");
          await oprot.WriteStructBeginAsync(tmp558, cancellationToken);
          var tmp559 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp559.Name = "Success";
              tmp559.Type = TType.Struct;
              tmp559.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp559, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponsePresence_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp560 = new StringBuilder("timResponsePresence_result(");
        int tmp561 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp561++) { tmp560.Append(", "); }
          tmp560.Append("Success: ");
          Success.ToString(tmp560);
        }
        tmp560.Append(')');
        return tmp560.ToString();
      }
    }


    public partial class timResponseMessage_args : TBase
    {
      private TimMBean _mbean;
      private TimAuth _auth;

      public TimMBean Mbean
      {
        get
        {
          return _mbean;
        }
        set
        {
          __isset.mbean = true;
          this._mbean = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool mbean;
        public bool auth;
      }

      public timResponseMessage_args()
      {
      }

      public timResponseMessage_args DeepCopy()
      {
        var tmp562 = new timResponseMessage_args();
        if((Mbean != null) && __isset.mbean)
        {
          tmp562.Mbean = (TimMBean)this.Mbean.DeepCopy();
        }
        tmp562.__isset.mbean = this.__isset.mbean;
        if((Auth != null) && __isset.auth)
        {
          tmp562.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp562.__isset.auth = this.__isset.auth;
        return tmp562;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Mbean = new TimMBean();
                  await Mbean.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp563 = new TStruct("timResponseMessage_args");
          await oprot.WriteStructBeginAsync(tmp563, cancellationToken);
          var tmp564 = new TField();
          if((Mbean != null) && __isset.mbean)
          {
            tmp564.Name = "mbean";
            tmp564.Type = TType.Struct;
            tmp564.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp564, cancellationToken);
            await Mbean.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp564.Name = "auth";
            tmp564.Type = TType.Struct;
            tmp564.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp564, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponseMessage_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.mbean == other.__isset.mbean) && ((!__isset.mbean) || (global::System.Object.Equals(Mbean, other.Mbean))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Mbean != null) && __isset.mbean)
          {
            hashcode = (hashcode * 397) + Mbean.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp565 = new StringBuilder("timResponseMessage_args(");
        int tmp566 = 0;
        if((Mbean != null) && __isset.mbean)
        {
          if(0 < tmp566++) { tmp565.Append(", "); }
          tmp565.Append("Mbean: ");
          Mbean.ToString(tmp565);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp566++) { tmp565.Append(", "); }
          tmp565.Append("Auth: ");
          Auth.ToString(tmp565);
        }
        tmp565.Append(')');
        return tmp565.ToString();
      }
    }


    public partial class timResponseMessage_result : TBase
    {
      private TimResponseBean _success;

      public TimResponseBean Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timResponseMessage_result()
      {
      }

      public timResponseMessage_result DeepCopy()
      {
        var tmp567 = new timResponseMessage_result();
        if((Success != null) && __isset.success)
        {
          tmp567.Success = (TimResponseBean)this.Success.DeepCopy();
        }
        tmp567.__isset.success = this.__isset.success;
        return tmp567;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimResponseBean();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp568 = new TStruct("timResponseMessage_result");
          await oprot.WriteStructBeginAsync(tmp568, cancellationToken);
          var tmp569 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp569.Name = "Success";
              tmp569.Type = TType.Struct;
              tmp569.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp569, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponseMessage_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp570 = new StringBuilder("timResponseMessage_result(");
        int tmp571 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp571++) { tmp570.Append(", "); }
          tmp570.Append("Success: ");
          Success.ToString(tmp570);
        }
        tmp570.Append(')');
        return tmp570.ToString();
      }
    }


    public partial class timResponseMessageIq_args : TBase
    {
      private TimMessageIq _timMsgIq;
      private string _iqType;
      private TimAuth _auth;

      public TimMessageIq TimMsgIq
      {
        get
        {
          return _timMsgIq;
        }
        set
        {
          __isset.timMsgIq = true;
          this._timMsgIq = value;
        }
      }

      public string IqType
      {
        get
        {
          return _iqType;
        }
        set
        {
          __isset.iqType = true;
          this._iqType = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool timMsgIq;
        public bool iqType;
        public bool auth;
      }

      public timResponseMessageIq_args()
      {
      }

      public timResponseMessageIq_args DeepCopy()
      {
        var tmp572 = new timResponseMessageIq_args();
        if((TimMsgIq != null) && __isset.timMsgIq)
        {
          tmp572.TimMsgIq = (TimMessageIq)this.TimMsgIq.DeepCopy();
        }
        tmp572.__isset.timMsgIq = this.__isset.timMsgIq;
        if((IqType != null) && __isset.iqType)
        {
          tmp572.IqType = this.IqType;
        }
        tmp572.__isset.iqType = this.__isset.iqType;
        if((Auth != null) && __isset.auth)
        {
          tmp572.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp572.__isset.auth = this.__isset.auth;
        return tmp572;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  TimMsgIq = new TimMessageIq();
                  await TimMsgIq.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  IqType = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp573 = new TStruct("timResponseMessageIq_args");
          await oprot.WriteStructBeginAsync(tmp573, cancellationToken);
          var tmp574 = new TField();
          if((TimMsgIq != null) && __isset.timMsgIq)
          {
            tmp574.Name = "timMsgIq";
            tmp574.Type = TType.Struct;
            tmp574.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
            await TimMsgIq.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((IqType != null) && __isset.iqType)
          {
            tmp574.Name = "iqType";
            tmp574.Type = TType.String;
            tmp574.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
            await oprot.WriteStringAsync(IqType, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp574.Name = "auth";
            tmp574.Type = TType.Struct;
            tmp574.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponseMessageIq_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.timMsgIq == other.__isset.timMsgIq) && ((!__isset.timMsgIq) || (global::System.Object.Equals(TimMsgIq, other.TimMsgIq))))
          && ((__isset.iqType == other.__isset.iqType) && ((!__isset.iqType) || (global::System.Object.Equals(IqType, other.IqType))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((TimMsgIq != null) && __isset.timMsgIq)
          {
            hashcode = (hashcode * 397) + TimMsgIq.GetHashCode();
          }
          if((IqType != null) && __isset.iqType)
          {
            hashcode = (hashcode * 397) + IqType.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp575 = new StringBuilder("timResponseMessageIq_args(");
        int tmp576 = 0;
        if((TimMsgIq != null) && __isset.timMsgIq)
        {
          if(0 < tmp576++) { tmp575.Append(", "); }
          tmp575.Append("TimMsgIq: ");
          TimMsgIq.ToString(tmp575);
        }
        if((IqType != null) && __isset.iqType)
        {
          if(0 < tmp576++) { tmp575.Append(", "); }
          tmp575.Append("IqType: ");
          IqType.ToString(tmp575);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp576++) { tmp575.Append(", "); }
          tmp575.Append("Auth: ");
          Auth.ToString(tmp575);
        }
        tmp575.Append(')');
        return tmp575.ToString();
      }
    }


    public partial class timResponseMessageIq_result : TBase
    {
      private TimMBeanList _success;

      public TimMBeanList Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timResponseMessageIq_result()
      {
      }

      public timResponseMessageIq_result DeepCopy()
      {
        var tmp577 = new timResponseMessageIq_result();
        if((Success != null) && __isset.success)
        {
          tmp577.Success = (TimMBeanList)this.Success.DeepCopy();
        }
        tmp577.__isset.success = this.__isset.success;
        return tmp577;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimMBeanList();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp578 = new TStruct("timResponseMessageIq_result");
          await oprot.WriteStructBeginAsync(tmp578, cancellationToken);
          var tmp579 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp579.Name = "Success";
              tmp579.Type = TType.Struct;
              tmp579.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponseMessageIq_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp580 = new StringBuilder("timResponseMessageIq_result(");
        int tmp581 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp581++) { tmp580.Append(", "); }
          tmp580.Append("Success: ");
          Success.ToString(tmp580);
        }
        tmp580.Append(')');
        return tmp580.ToString();
      }
    }


    public partial class timResponsePresenceList_args : TBase
    {
      private TimPBeanList _pbeanList;
      private TimAuth _auth;

      public TimPBeanList PbeanList
      {
        get
        {
          return _pbeanList;
        }
        set
        {
          __isset.pbeanList = true;
          this._pbeanList = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool pbeanList;
        public bool auth;
      }

      public timResponsePresenceList_args()
      {
      }

      public timResponsePresenceList_args DeepCopy()
      {
        var tmp582 = new timResponsePresenceList_args();
        if((PbeanList != null) && __isset.pbeanList)
        {
          tmp582.PbeanList = (TimPBeanList)this.PbeanList.DeepCopy();
        }
        tmp582.__isset.pbeanList = this.__isset.pbeanList;
        if((Auth != null) && __isset.auth)
        {
          tmp582.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp582.__isset.auth = this.__isset.auth;
        return tmp582;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  PbeanList = new TimPBeanList();
                  await PbeanList.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp583 = new TStruct("timResponsePresenceList_args");
          await oprot.WriteStructBeginAsync(tmp583, cancellationToken);
          var tmp584 = new TField();
          if((PbeanList != null) && __isset.pbeanList)
          {
            tmp584.Name = "pbeanList";
            tmp584.Type = TType.Struct;
            tmp584.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
            await PbeanList.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp584.Name = "auth";
            tmp584.Type = TType.Struct;
            tmp584.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponsePresenceList_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.pbeanList == other.__isset.pbeanList) && ((!__isset.pbeanList) || (global::System.Object.Equals(PbeanList, other.PbeanList))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((PbeanList != null) && __isset.pbeanList)
          {
            hashcode = (hashcode * 397) + PbeanList.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp585 = new StringBuilder("timResponsePresenceList_args(");
        int tmp586 = 0;
        if((PbeanList != null) && __isset.pbeanList)
        {
          if(0 < tmp586++) { tmp585.Append(", "); }
          tmp585.Append("PbeanList: ");
          PbeanList.ToString(tmp585);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp586++) { tmp585.Append(", "); }
          tmp585.Append("Auth: ");
          Auth.ToString(tmp585);
        }
        tmp585.Append(')');
        return tmp585.ToString();
      }
    }


    public partial class timResponsePresenceList_result : TBase
    {
      private TimResponseBean _success;

      public TimResponseBean Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timResponsePresenceList_result()
      {
      }

      public timResponsePresenceList_result DeepCopy()
      {
        var tmp587 = new timResponsePresenceList_result();
        if((Success != null) && __isset.success)
        {
          tmp587.Success = (TimResponseBean)this.Success.DeepCopy();
        }
        tmp587.__isset.success = this.__isset.success;
        return tmp587;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimResponseBean();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp588 = new TStruct("timResponsePresenceList_result");
          await oprot.WriteStructBeginAsync(tmp588, cancellationToken);
          var tmp589 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp589.Name = "Success";
              tmp589.Type = TType.Struct;
              tmp589.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp589, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponsePresenceList_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp590 = new StringBuilder("timResponsePresenceList_result(");
        int tmp591 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp591++) { tmp590.Append(", "); }
          tmp590.Append("Success: ");
          Success.ToString(tmp590);
        }
        tmp590.Append(')');
        return tmp590.ToString();
      }
    }


    public partial class timResponseMessageList_args : TBase
    {
      private TimMBeanList _mbeanList;
      private TimAuth _auth;

      public TimMBeanList MbeanList
      {
        get
        {
          return _mbeanList;
        }
        set
        {
          __isset.mbeanList = true;
          this._mbeanList = value;
        }
      }

      public TimAuth Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool mbeanList;
        public bool auth;
      }

      public timResponseMessageList_args()
      {
      }

      public timResponseMessageList_args DeepCopy()
      {
        var tmp592 = new timResponseMessageList_args();
        if((MbeanList != null) && __isset.mbeanList)
        {
          tmp592.MbeanList = (TimMBeanList)this.MbeanList.DeepCopy();
        }
        tmp592.__isset.mbeanList = this.__isset.mbeanList;
        if((Auth != null) && __isset.auth)
        {
          tmp592.Auth = (TimAuth)this.Auth.DeepCopy();
        }
        tmp592.__isset.auth = this.__isset.auth;
        return tmp592;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  MbeanList = new TimMBeanList();
                  await MbeanList.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Auth = new TimAuth();
                  await Auth.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp593 = new TStruct("timResponseMessageList_args");
          await oprot.WriteStructBeginAsync(tmp593, cancellationToken);
          var tmp594 = new TField();
          if((MbeanList != null) && __isset.mbeanList)
          {
            tmp594.Name = "mbeanList";
            tmp594.Type = TType.Struct;
            tmp594.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
            await MbeanList.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Auth != null) && __isset.auth)
          {
            tmp594.Name = "auth";
            tmp594.Type = TType.Struct;
            tmp594.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
            await Auth.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponseMessageList_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.mbeanList == other.__isset.mbeanList) && ((!__isset.mbeanList) || (global::System.Object.Equals(MbeanList, other.MbeanList))))
          && ((__isset.auth == other.__isset.auth) && ((!__isset.auth) || (global::System.Object.Equals(Auth, other.Auth))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((MbeanList != null) && __isset.mbeanList)
          {
            hashcode = (hashcode * 397) + MbeanList.GetHashCode();
          }
          if((Auth != null) && __isset.auth)
          {
            hashcode = (hashcode * 397) + Auth.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp595 = new StringBuilder("timResponseMessageList_args(");
        int tmp596 = 0;
        if((MbeanList != null) && __isset.mbeanList)
        {
          if(0 < tmp596++) { tmp595.Append(", "); }
          tmp595.Append("MbeanList: ");
          MbeanList.ToString(tmp595);
        }
        if((Auth != null) && __isset.auth)
        {
          if(0 < tmp596++) { tmp595.Append(", "); }
          tmp595.Append("Auth: ");
          Auth.ToString(tmp595);
        }
        tmp595.Append(')');
        return tmp595.ToString();
      }
    }


    public partial class timResponseMessageList_result : TBase
    {
      private TimResponseBean _success;

      public TimResponseBean Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public timResponseMessageList_result()
      {
      }

      public timResponseMessageList_result DeepCopy()
      {
        var tmp597 = new timResponseMessageList_result();
        if((Success != null) && __isset.success)
        {
          tmp597.Success = (TimResponseBean)this.Success.DeepCopy();
        }
        tmp597.__isset.success = this.__isset.success;
        return tmp597;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TimResponseBean();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp598 = new TStruct("timResponseMessageList_result");
          await oprot.WriteStructBeginAsync(tmp598, cancellationToken);
          var tmp599 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp599.Name = "Success";
              tmp599.Type = TType.Struct;
              tmp599.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is timResponseMessageList_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp600 = new StringBuilder("timResponseMessageList_result(");
        int tmp601 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp601++) { tmp600.Append(", "); }
          tmp600.Append("Success: ");
          Success.ToString(tmp600);
        }
        tmp600.Append(')');
        return tmp600.ToString();
      }
    }

  }

}
