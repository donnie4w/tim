/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class Tid : TBase
{
  private string _domain;
  private string _resource;
  private string _type;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 登陆名   用户登录号，房间号等
  /// </summary>
  public string Name { get; set; }

  /// <summary>
  /// 域名 用于区分渠道等 appid，appsecret
  /// </summary>
  public string Domain
  {
    get
    {
      return _domain;
    }
    set
    {
      __isset.domain = true;
      this._domain = value;
    }
  }

  /// <summary>
  /// 系统 自行约定 如 ： 1IOS，2android，3H5，4WEB 等
  /// </summary>
  public string Resource
  {
    get
    {
      return _resource;
    }
    set
    {
      __isset.resource = true;
      this._resource = value;
    }
  }

  /// <summary>
  /// normal，group
  /// </summary>
  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 附加信息：如传递客户端信息 iphone6，xiaomi，huawei等
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool domain;
    public bool resource;
    public bool type;
    public bool extraList;
    public bool extraMap;
  }

  public Tid()
  {
  }

  public Tid(string name) : this()
  {
    this.Name = name;
  }

  public Tid DeepCopy()
  {
    var tmp62 = new Tid();
    if((Name != null))
    {
      tmp62.Name = this.Name;
    }
    if((Domain != null) && __isset.domain)
    {
      tmp62.Domain = this.Domain;
    }
    tmp62.__isset.domain = this.__isset.domain;
    if((Resource != null) && __isset.resource)
    {
      tmp62.Resource = this.Resource;
    }
    tmp62.__isset.resource = this.__isset.resource;
    if((Type != null) && __isset.type)
    {
      tmp62.Type = this.Type;
    }
    tmp62.__isset.type = this.__isset.type;
    if((ExtraList != null) && __isset.extraList)
    {
      tmp62.ExtraList = this.ExtraList.DeepCopy();
    }
    tmp62.__isset.extraList = this.__isset.extraList;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp62.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp62.__isset.extraMap = this.__isset.extraMap;
    return tmp62;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_name = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
              isset_name = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Domain = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Resource = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Type = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                var _list63 = await iprot.ReadListBeginAsync(cancellationToken);
                ExtraList = new List<TimNode>(_list63.Count);
                for(int _i64 = 0; _i64 < _list63.Count; ++_i64)
                {
                  TimNode _elem65;
                  _elem65 = new TimNode();
                  await _elem65.ReadAsync(iprot, cancellationToken);
                  ExtraList.Add(_elem65);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Map)
            {
              {
                var _map66 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map66.Count);
                for(int _i67 = 0; _i67 < _map66.Count; ++_i67)
                {
                  string _key68;
                  string _val69;
                  _key68 = await iprot.ReadStringAsync(cancellationToken);
                  _val69 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key68] = _val69;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_name)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp70 = new TStruct("Tid");
      await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
      var tmp71 = new TField();
      if((Name != null))
      {
        tmp71.Name = "name";
        tmp71.Type = TType.String;
        tmp71.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Domain != null) && __isset.domain)
      {
        tmp71.Name = "domain";
        tmp71.Type = TType.String;
        tmp71.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteStringAsync(Domain, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Resource != null) && __isset.resource)
      {
        tmp71.Name = "resource";
        tmp71.Type = TType.String;
        tmp71.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteStringAsync(Resource, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Type != null) && __isset.type)
      {
        tmp71.Name = "type";
        tmp71.Type = TType.String;
        tmp71.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteStringAsync(Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        tmp71.Name = "extraList";
        tmp71.Type = TType.List;
        tmp71.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, ExtraList.Count), cancellationToken);
        foreach (TimNode _iter72 in ExtraList)
        {
          await _iter72.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp71.Name = "extraMap";
        tmp71.Type = TType.Map;
        tmp71.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter73 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter73, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter73], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is Tid other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(Name, other.Name)
      && ((__isset.domain == other.__isset.domain) && ((!__isset.domain) || (global::System.Object.Equals(Domain, other.Domain))))
      && ((__isset.resource == other.__isset.resource) && ((!__isset.resource) || (global::System.Object.Equals(Resource, other.Resource))))
      && ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
      && ((__isset.extraList == other.__isset.extraList) && ((!__isset.extraList) || (TCollections.Equals(ExtraList, other.ExtraList))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Name != null))
      {
        hashcode = (hashcode * 397) + Name.GetHashCode();
      }
      if((Domain != null) && __isset.domain)
      {
        hashcode = (hashcode * 397) + Domain.GetHashCode();
      }
      if((Resource != null) && __isset.resource)
      {
        hashcode = (hashcode * 397) + Resource.GetHashCode();
      }
      if((Type != null) && __isset.type)
      {
        hashcode = (hashcode * 397) + Type.GetHashCode();
      }
      if((ExtraList != null) && __isset.extraList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraList);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp74 = new StringBuilder("Tid(");
    if((Name != null))
    {
      tmp74.Append(", Name: ");
      Name.ToString(tmp74);
    }
    if((Domain != null) && __isset.domain)
    {
      tmp74.Append(", Domain: ");
      Domain.ToString(tmp74);
    }
    if((Resource != null) && __isset.resource)
    {
      tmp74.Append(", Resource: ");
      Resource.ToString(tmp74);
    }
    if((Type != null) && __isset.type)
    {
      tmp74.Append(", Type: ");
      Type.ToString(tmp74);
    }
    if((ExtraList != null) && __isset.extraList)
    {
      tmp74.Append(", ExtraList: ");
      ExtraList.ToString(tmp74);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp74.Append(", ExtraMap: ");
      ExtraMap.ToString(tmp74);
    }
    tmp74.Append(')');
    return tmp74.ToString();
  }
}

