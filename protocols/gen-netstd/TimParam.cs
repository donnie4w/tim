/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimParam : TBase
{
  private string _timestamp;
  private short _version;
  private string _lang;
  private List<TimNode> _extraList;
  private Dictionary<string, string> _extraMap;
  private string _interflow;
  private string _tls;

  /// <summary>
  /// 服务器时间
  /// </summary>
  public string Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }

  /// <summary>
  /// 版本
  /// </summary>
  public short Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }

  /// <summary>
  /// 语言
  /// </summary>
  public string Lang
  {
    get
    {
      return _lang;
    }
    set
    {
      __isset.lang = true;
      this._lang = value;
    }
  }

  /// <summary>
  /// 附加信息
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }

  /// <summary>
  /// 消息合流
  /// </summary>
  public string Interflow
  {
    get
    {
      return _interflow;
    }
    set
    {
      __isset.interflow = true;
      this._interflow = value;
    }
  }

  /// <summary>
  /// tls
  /// </summary>
  public string Tls
  {
    get
    {
      return _tls;
    }
    set
    {
      __isset.tls = true;
      this._tls = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool timestamp;
    public bool version;
    public bool lang;
    public bool extraList;
    public bool extraMap;
    public bool interflow;
    public bool tls;
  }

  public TimParam()
  {
  }

  public TimParam DeepCopy()
  {
    var tmp29 = new TimParam();
    if((Timestamp != null) && __isset.timestamp)
    {
      tmp29.Timestamp = this.Timestamp;
    }
    tmp29.__isset.timestamp = this.__isset.timestamp;
    if(__isset.version)
    {
      tmp29.Version = this.Version;
    }
    tmp29.__isset.version = this.__isset.version;
    if((Lang != null) && __isset.lang)
    {
      tmp29.Lang = this.Lang;
    }
    tmp29.__isset.lang = this.__isset.lang;
    if((ExtraList != null) && __isset.extraList)
    {
      tmp29.ExtraList = this.ExtraList.DeepCopy();
    }
    tmp29.__isset.extraList = this.__isset.extraList;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp29.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp29.__isset.extraMap = this.__isset.extraMap;
    if((Interflow != null) && __isset.interflow)
    {
      tmp29.Interflow = this.Interflow;
    }
    tmp29.__isset.interflow = this.__isset.interflow;
    if((Tls != null) && __isset.tls)
    {
      tmp29.Tls = this.Tls;
    }
    tmp29.__isset.tls = this.__isset.tls;
    return tmp29;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Timestamp = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I16)
            {
              Version = await iprot.ReadI16Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Lang = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                var _list30 = await iprot.ReadListBeginAsync(cancellationToken);
                ExtraList = new List<TimNode>(_list30.Count);
                for(int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  TimNode _elem32;
                  _elem32 = new TimNode();
                  await _elem32.ReadAsync(iprot, cancellationToken);
                  ExtraList.Add(_elem32);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.Map)
            {
              {
                var _map33 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map33.Count);
                for(int _i34 = 0; _i34 < _map33.Count; ++_i34)
                {
                  string _key35;
                  string _val36;
                  _key35 = await iprot.ReadStringAsync(cancellationToken);
                  _val36 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key35] = _val36;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              Interflow = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.String)
            {
              Tls = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp37 = new TStruct("TimParam");
      await oprot.WriteStructBeginAsync(tmp37, cancellationToken);
      var tmp38 = new TField();
      if((Timestamp != null) && __isset.timestamp)
      {
        tmp38.Name = "timestamp";
        tmp38.Type = TType.String;
        tmp38.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
        await oprot.WriteStringAsync(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.version)
      {
        tmp38.Name = "version";
        tmp38.Type = TType.I16;
        tmp38.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
        await oprot.WriteI16Async(Version, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Lang != null) && __isset.lang)
      {
        tmp38.Name = "lang";
        tmp38.Type = TType.String;
        tmp38.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
        await oprot.WriteStringAsync(Lang, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        tmp38.Name = "extraList";
        tmp38.Type = TType.List;
        tmp38.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, ExtraList.Count), cancellationToken);
        foreach (TimNode _iter39 in ExtraList)
        {
          await _iter39.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp38.Name = "extraMap";
        tmp38.Type = TType.Map;
        tmp38.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter40 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter40, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter40], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Interflow != null) && __isset.interflow)
      {
        tmp38.Name = "interflow";
        tmp38.Type = TType.String;
        tmp38.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
        await oprot.WriteStringAsync(Interflow, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Tls != null) && __isset.tls)
      {
        tmp38.Name = "tls";
        tmp38.Type = TType.String;
        tmp38.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
        await oprot.WriteStringAsync(Tls, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimParam other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (global::System.Object.Equals(Timestamp, other.Timestamp))))
      && ((__isset.version == other.__isset.version) && ((!__isset.version) || (global::System.Object.Equals(Version, other.Version))))
      && ((__isset.lang == other.__isset.lang) && ((!__isset.lang) || (global::System.Object.Equals(Lang, other.Lang))))
      && ((__isset.extraList == other.__isset.extraList) && ((!__isset.extraList) || (TCollections.Equals(ExtraList, other.ExtraList))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))))
      && ((__isset.interflow == other.__isset.interflow) && ((!__isset.interflow) || (global::System.Object.Equals(Interflow, other.Interflow))))
      && ((__isset.tls == other.__isset.tls) && ((!__isset.tls) || (global::System.Object.Equals(Tls, other.Tls))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Timestamp != null) && __isset.timestamp)
      {
        hashcode = (hashcode * 397) + Timestamp.GetHashCode();
      }
      if(__isset.version)
      {
        hashcode = (hashcode * 397) + Version.GetHashCode();
      }
      if((Lang != null) && __isset.lang)
      {
        hashcode = (hashcode * 397) + Lang.GetHashCode();
      }
      if((ExtraList != null) && __isset.extraList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraList);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
      if((Interflow != null) && __isset.interflow)
      {
        hashcode = (hashcode * 397) + Interflow.GetHashCode();
      }
      if((Tls != null) && __isset.tls)
      {
        hashcode = (hashcode * 397) + Tls.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp41 = new StringBuilder("TimParam(");
    int tmp42 = 0;
    if((Timestamp != null) && __isset.timestamp)
    {
      if(0 < tmp42++) { tmp41.Append(", "); }
      tmp41.Append("Timestamp: ");
      Timestamp.ToString(tmp41);
    }
    if(__isset.version)
    {
      if(0 < tmp42++) { tmp41.Append(", "); }
      tmp41.Append("Version: ");
      Version.ToString(tmp41);
    }
    if((Lang != null) && __isset.lang)
    {
      if(0 < tmp42++) { tmp41.Append(", "); }
      tmp41.Append("Lang: ");
      Lang.ToString(tmp41);
    }
    if((ExtraList != null) && __isset.extraList)
    {
      if(0 < tmp42++) { tmp41.Append(", "); }
      tmp41.Append("ExtraList: ");
      ExtraList.ToString(tmp41);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      if(0 < tmp42++) { tmp41.Append(", "); }
      tmp41.Append("ExtraMap: ");
      ExtraMap.ToString(tmp41);
    }
    if((Interflow != null) && __isset.interflow)
    {
      if(0 < tmp42++) { tmp41.Append(", "); }
      tmp41.Append("Interflow: ");
      Interflow.ToString(tmp41);
    }
    if((Tls != null) && __isset.tls)
    {
      if(0 < tmp42++) { tmp41.Append(", "); }
      tmp41.Append("Tls: ");
      Tls.ToString(tmp41);
    }
    tmp41.Append(')');
    return tmp41.ToString();
  }
}

