/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimRemoteRoom : TBase
{
  private TimError _error;
  private TimRoom _room;
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 错误码
  /// </summary>
  public TimError Error
  {
    get
    {
      return _error;
    }
    set
    {
      __isset.error = true;
      this._error = value;
    }
  }

  /// <summary>
  /// 远程房间信息
  /// </summary>
  public TimRoom Room
  {
    get
    {
      return _room;
    }
    set
    {
      __isset.room = true;
      this._room = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool error;
    public bool room;
    public bool extraMap;
  }

  public TimRemoteRoom()
  {
  }

  public TimRemoteRoom DeepCopy()
  {
    var tmp178 = new TimRemoteRoom();
    if((Error != null) && __isset.error)
    {
      tmp178.Error = (TimError)this.Error.DeepCopy();
    }
    tmp178.__isset.error = this.__isset.error;
    if((Room != null) && __isset.room)
    {
      tmp178.Room = (TimRoom)this.Room.DeepCopy();
    }
    tmp178.__isset.room = this.__isset.room;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp178.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp178.__isset.extraMap = this.__isset.extraMap;
    return tmp178;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Error = new TimError();
              await Error.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              Room = new TimRoom();
              await Room.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Map)
            {
              {
                var _map179 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map179.Count);
                for(int _i180 = 0; _i180 < _map179.Count; ++_i180)
                {
                  string _key181;
                  string _val182;
                  _key181 = await iprot.ReadStringAsync(cancellationToken);
                  _val182 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key181] = _val182;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp183 = new TStruct("TimRemoteRoom");
      await oprot.WriteStructBeginAsync(tmp183, cancellationToken);
      var tmp184 = new TField();
      if((Error != null) && __isset.error)
      {
        tmp184.Name = "error";
        tmp184.Type = TType.Struct;
        tmp184.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
        await Error.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Room != null) && __isset.room)
      {
        tmp184.Name = "room";
        tmp184.Type = TType.Struct;
        tmp184.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
        await Room.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp184.Name = "extraMap";
        tmp184.Type = TType.Map;
        tmp184.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp184, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter185 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter185, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter185], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimRemoteRoom other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.error == other.__isset.error) && ((!__isset.error) || (global::System.Object.Equals(Error, other.Error))))
      && ((__isset.room == other.__isset.room) && ((!__isset.room) || (global::System.Object.Equals(Room, other.Room))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Error != null) && __isset.error)
      {
        hashcode = (hashcode * 397) + Error.GetHashCode();
      }
      if((Room != null) && __isset.room)
      {
        hashcode = (hashcode * 397) + Room.GetHashCode();
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp186 = new StringBuilder("TimRemoteRoom(");
    int tmp187 = 0;
    if((Error != null) && __isset.error)
    {
      if(0 < tmp187++) { tmp186.Append(", "); }
      tmp186.Append("Error: ");
      Error.ToString(tmp186);
    }
    if((Room != null) && __isset.room)
    {
      if(0 < tmp187++) { tmp186.Append(", "); }
      tmp186.Append("Room: ");
      Room.ToString(tmp186);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      if(0 < tmp187++) { tmp186.Append(", "); }
      tmp186.Append("ExtraMap: ");
      ExtraMap.ToString(tmp186);
    }
    tmp186.Append(')');
    return tmp186.ToString();
  }
}

