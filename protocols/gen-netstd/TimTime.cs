/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimTime : TBase
{
  private string _timestamp;
  private string _formattime;

  /// <summary>
  /// 时间戳    (毫秒)
  /// </summary>
  public string Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }

  /// <summary>
  /// 格式化时间
  /// </summary>
  public string Formattime
  {
    get
    {
      return _formattime;
    }
    set
    {
      __isset.formattime = true;
      this._formattime = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool timestamp;
    public bool formattime;
  }

  public TimTime()
  {
  }

  public TimTime DeepCopy()
  {
    var tmp43 = new TimTime();
    if((Timestamp != null) && __isset.timestamp)
    {
      tmp43.Timestamp = this.Timestamp;
    }
    tmp43.__isset.timestamp = this.__isset.timestamp;
    if((Formattime != null) && __isset.formattime)
    {
      tmp43.Formattime = this.Formattime;
    }
    tmp43.__isset.formattime = this.__isset.formattime;
    return tmp43;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Timestamp = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Formattime = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp44 = new TStruct("TimTime");
      await oprot.WriteStructBeginAsync(tmp44, cancellationToken);
      var tmp45 = new TField();
      if((Timestamp != null) && __isset.timestamp)
      {
        tmp45.Name = "timestamp";
        tmp45.Type = TType.String;
        tmp45.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
        await oprot.WriteStringAsync(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Formattime != null) && __isset.formattime)
      {
        tmp45.Name = "formattime";
        tmp45.Type = TType.String;
        tmp45.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp45, cancellationToken);
        await oprot.WriteStringAsync(Formattime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimTime other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (global::System.Object.Equals(Timestamp, other.Timestamp))))
      && ((__isset.formattime == other.__isset.formattime) && ((!__isset.formattime) || (global::System.Object.Equals(Formattime, other.Formattime))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Timestamp != null) && __isset.timestamp)
      {
        hashcode = (hashcode * 397) + Timestamp.GetHashCode();
      }
      if((Formattime != null) && __isset.formattime)
      {
        hashcode = (hashcode * 397) + Formattime.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp46 = new StringBuilder("TimTime(");
    int tmp47 = 0;
    if((Timestamp != null) && __isset.timestamp)
    {
      if(0 < tmp47++) { tmp46.Append(", "); }
      tmp46.Append("Timestamp: ");
      Timestamp.ToString(tmp46);
    }
    if((Formattime != null) && __isset.formattime)
    {
      if(0 < tmp47++) { tmp46.Append(", "); }
      tmp46.Append("Formattime: ");
      Formattime.ToString(tmp46);
    }
    tmp46.Append(')');
    return tmp46.ToString();
  }
}

