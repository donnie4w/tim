/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public static class timExtensions
{
  public static bool Equals(this Dictionary<string, string> instance, object that)
  {
    if (!(that is Dictionary<string, string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<string, string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<string, string> DeepCopy(this Dictionary<string, string> source)
  {
    if (source == null)
      return null;

    var tmp602 = new Dictionary<string, string>(source.Count);
    foreach (var pair in source)
      tmp602.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value : null);
    return tmp602;
  }


  public static bool Equals(this List<Tid> instance, object that)
  {
    if (!(that is List<Tid> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<Tid> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<Tid> DeepCopy(this List<Tid> source)
  {
    if (source == null)
      return null;

    var tmp603 = new List<Tid>(source.Count);
    foreach (var elem in source)
      tmp603.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp603;
  }


  public static bool Equals(this List<TimMBean> instance, object that)
  {
    if (!(that is List<TimMBean> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TimMBean> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<TimMBean> DeepCopy(this List<TimMBean> source)
  {
    if (source == null)
      return null;

    var tmp604 = new List<TimMBean>(source.Count);
    foreach (var elem in source)
      tmp604.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp604;
  }


  public static bool Equals(this List<TimNode> instance, object that)
  {
    if (!(that is List<TimNode> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TimNode> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<TimNode> DeepCopy(this List<TimNode> source)
  {
    if (source == null)
      return null;

    var tmp605 = new List<TimNode>(source.Count);
    foreach (var elem in source)
      tmp605.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp605;
  }


  public static bool Equals(this List<TimPBean> instance, object that)
  {
    if (!(that is List<TimPBean> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<TimPBean> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<TimPBean> DeepCopy(this List<TimPBean> source)
  {
    if (source == null)
      return null;

    var tmp606 = new List<TimPBean>(source.Count);
    foreach (var elem in source)
      tmp606.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp606;
  }


  public static bool Equals(this List<byte[]> instance, object that)
  {
    if (!(that is List<byte[]> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<byte[]> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<byte[]> DeepCopy(this List<byte[]> source)
  {
    if (source == null)
      return null;

    var tmp607 = new List<byte[]>(source.Count);
    foreach (var elem in source)
      tmp607.Add((elem != null) ? elem.ToArray() : null);
    return tmp607;
  }


  public static bool Equals(this List<string> instance, object that)
  {
    if (!(that is List<string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<string> DeepCopy(this List<string> source)
  {
    if (source == null)
      return null;

    var tmp608 = new List<string>(source.Count);
    foreach (var elem in source)
      tmp608.Add((elem != null) ? elem : null);
    return tmp608;
  }


}
