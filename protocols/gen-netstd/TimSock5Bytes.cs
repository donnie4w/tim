/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimSock5Bytes : TBase
{
  private Dictionary<string, string> _extraMap;

  /// <summary>
  /// 发布id
  /// </summary>
  public string PubId { get; set; }

  /// <summary>
  /// 序号数据块
  /// </summary>
  public int Index { get; set; }

  /// <summary>
  /// 数据块
  /// </summary>
  public List<byte[]> Bytes { get; set; }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool extraMap;
  }

  public TimSock5Bytes()
  {
  }

  public TimSock5Bytes(string pubId, int index, List<byte[]> bytes) : this()
  {
    this.PubId = pubId;
    this.Index = index;
    this.Bytes = bytes;
  }

  public TimSock5Bytes DeepCopy()
  {
    var tmp212 = new TimSock5Bytes();
    if((PubId != null))
    {
      tmp212.PubId = this.PubId;
    }
    tmp212.Index = this.Index;
    if((Bytes != null))
    {
      tmp212.Bytes = this.Bytes.DeepCopy();
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp212.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp212.__isset.extraMap = this.__isset.extraMap;
    return tmp212;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_pubId = false;
      bool isset_index = false;
      bool isset_bytes = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              PubId = await iprot.ReadStringAsync(cancellationToken);
              isset_pubId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Index = await iprot.ReadI32Async(cancellationToken);
              isset_index = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                var _list213 = await iprot.ReadListBeginAsync(cancellationToken);
                Bytes = new List<byte[]>(_list213.Count);
                for(int _i214 = 0; _i214 < _list213.Count; ++_i214)
                {
                  byte[] _elem215;
                  _elem215 = await iprot.ReadBinaryAsync(cancellationToken);
                  Bytes.Add(_elem215);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
              isset_bytes = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Map)
            {
              {
                var _map216 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map216.Count);
                for(int _i217 = 0; _i217 < _map216.Count; ++_i217)
                {
                  string _key218;
                  string _val219;
                  _key218 = await iprot.ReadStringAsync(cancellationToken);
                  _val219 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key218] = _val219;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_pubId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_index)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      if (!isset_bytes)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp220 = new TStruct("TimSock5Bytes");
      await oprot.WriteStructBeginAsync(tmp220, cancellationToken);
      var tmp221 = new TField();
      if((PubId != null))
      {
        tmp221.Name = "pubId";
        tmp221.Type = TType.String;
        tmp221.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp221, cancellationToken);
        await oprot.WriteStringAsync(PubId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      tmp221.Name = "index";
      tmp221.Type = TType.I32;
      tmp221.ID = 2;
      await oprot.WriteFieldBeginAsync(tmp221, cancellationToken);
      await oprot.WriteI32Async(Index, cancellationToken);
      await oprot.WriteFieldEndAsync(cancellationToken);
      if((Bytes != null))
      {
        tmp221.Name = "bytes";
        tmp221.Type = TType.List;
        tmp221.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp221, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.String, Bytes.Count), cancellationToken);
        foreach (byte[] _iter222 in Bytes)
        {
          await oprot.WriteBinaryAsync(_iter222, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp221.Name = "extraMap";
        tmp221.Type = TType.Map;
        tmp221.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp221, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter223 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter223, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter223], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimSock5Bytes other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(PubId, other.PubId)
      && global::System.Object.Equals(Index, other.Index)
      && TCollections.Equals(Bytes, other.Bytes)
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((PubId != null))
      {
        hashcode = (hashcode * 397) + PubId.GetHashCode();
      }
      hashcode = (hashcode * 397) + Index.GetHashCode();
      if((Bytes != null))
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Bytes);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp224 = new StringBuilder("TimSock5Bytes(");
    if((PubId != null))
    {
      tmp224.Append(", PubId: ");
      PubId.ToString(tmp224);
    }
    tmp224.Append(", Index: ");
    Index.ToString(tmp224);
    if((Bytes != null))
    {
      tmp224.Append(", Bytes: ");
      Bytes.ToString(tmp224);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp224.Append(", ExtraMap: ");
      ExtraMap.ToString(tmp224);
    }
    tmp224.Append(')');
    return tmp224.ToString();
  }
}

