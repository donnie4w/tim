/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimAuth : TBase
{
  private string _domain;
  private string _username;
  private string _pwd;

  /// <summary>
  /// 域名
  /// </summary>
  public string Domain
  {
    get
    {
      return _domain;
    }
    set
    {
      __isset.domain = true;
      this._domain = value;
    }
  }

  /// <summary>
  /// 用户名
  /// </summary>
  public string Username
  {
    get
    {
      return _username;
    }
    set
    {
      __isset.username = true;
      this._username = value;
    }
  }

  /// <summary>
  /// 密码
  /// </summary>
  public string Pwd
  {
    get
    {
      return _pwd;
    }
    set
    {
      __isset.pwd = true;
      this._pwd = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool domain;
    public bool username;
    public bool pwd;
  }

  public TimAuth()
  {
  }

  public TimAuth DeepCopy()
  {
    var tmp254 = new TimAuth();
    if((Domain != null) && __isset.domain)
    {
      tmp254.Domain = this.Domain;
    }
    tmp254.__isset.domain = this.__isset.domain;
    if((Username != null) && __isset.username)
    {
      tmp254.Username = this.Username;
    }
    tmp254.__isset.username = this.__isset.username;
    if((Pwd != null) && __isset.pwd)
    {
      tmp254.Pwd = this.Pwd;
    }
    tmp254.__isset.pwd = this.__isset.pwd;
    return tmp254;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Domain = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Username = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Pwd = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp255 = new TStruct("TimAuth");
      await oprot.WriteStructBeginAsync(tmp255, cancellationToken);
      var tmp256 = new TField();
      if((Domain != null) && __isset.domain)
      {
        tmp256.Name = "domain";
        tmp256.Type = TType.String;
        tmp256.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp256, cancellationToken);
        await oprot.WriteStringAsync(Domain, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Username != null) && __isset.username)
      {
        tmp256.Name = "username";
        tmp256.Type = TType.String;
        tmp256.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp256, cancellationToken);
        await oprot.WriteStringAsync(Username, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Pwd != null) && __isset.pwd)
      {
        tmp256.Name = "pwd";
        tmp256.Type = TType.String;
        tmp256.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp256, cancellationToken);
        await oprot.WriteStringAsync(Pwd, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimAuth other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.domain == other.__isset.domain) && ((!__isset.domain) || (global::System.Object.Equals(Domain, other.Domain))))
      && ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
      && ((__isset.pwd == other.__isset.pwd) && ((!__isset.pwd) || (global::System.Object.Equals(Pwd, other.Pwd))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Domain != null) && __isset.domain)
      {
        hashcode = (hashcode * 397) + Domain.GetHashCode();
      }
      if((Username != null) && __isset.username)
      {
        hashcode = (hashcode * 397) + Username.GetHashCode();
      }
      if((Pwd != null) && __isset.pwd)
      {
        hashcode = (hashcode * 397) + Pwd.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp257 = new StringBuilder("TimAuth(");
    int tmp258 = 0;
    if((Domain != null) && __isset.domain)
    {
      if(0 < tmp258++) { tmp257.Append(", "); }
      tmp257.Append("Domain: ");
      Domain.ToString(tmp257);
    }
    if((Username != null) && __isset.username)
    {
      if(0 < tmp258++) { tmp257.Append(", "); }
      tmp257.Append("Username: ");
      Username.ToString(tmp257);
    }
    if((Pwd != null) && __isset.pwd)
    {
      if(0 < tmp258++) { tmp257.Append(", "); }
      tmp257.Append("Pwd: ");
      Pwd.ToString(tmp257);
    }
    tmp257.Append(')');
    return tmp257.ToString();
  }
}

