/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimMBeanList : TBase
{
  private List<TimMBean> _timMBeanList;
  private string _reqType;
  private Dictionary<string, string> _extraMap;

  public string ThreadId { get; set; }

  /// <summary>
  /// 信息列表
  /// </summary>
  public List<TimMBean> TimMBeanList_
  {
    get
    {
      return _timMBeanList;
    }
    set
    {
      __isset.timMBeanList = true;
      this._timMBeanList = value;
    }
  }

  /// <summary>
  /// 类型
  /// </summary>
  public string ReqType
  {
    get
    {
      return _reqType;
    }
    set
    {
      __isset.reqType = true;
      this._reqType = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool timMBeanList;
    public bool reqType;
    public bool extraMap;
  }

  public TimMBeanList()
  {
  }

  public TimMBeanList(string threadId) : this()
  {
    this.ThreadId = threadId;
  }

  public TimMBeanList DeepCopy()
  {
    var tmp259 = new TimMBeanList();
    if((ThreadId != null))
    {
      tmp259.ThreadId = this.ThreadId;
    }
    if((TimMBeanList_ != null) && __isset.timMBeanList)
    {
      tmp259.TimMBeanList_ = this.TimMBeanList_.DeepCopy();
    }
    tmp259.__isset.timMBeanList = this.__isset.timMBeanList;
    if((ReqType != null) && __isset.reqType)
    {
      tmp259.ReqType = this.ReqType;
    }
    tmp259.__isset.reqType = this.__isset.reqType;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp259.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp259.__isset.extraMap = this.__isset.extraMap;
    return tmp259;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_threadId = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ThreadId = await iprot.ReadStringAsync(cancellationToken);
              isset_threadId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list260 = await iprot.ReadListBeginAsync(cancellationToken);
                TimMBeanList_ = new List<TimMBean>(_list260.Count);
                for(int _i261 = 0; _i261 < _list260.Count; ++_i261)
                {
                  TimMBean _elem262;
                  _elem262 = new TimMBean();
                  await _elem262.ReadAsync(iprot, cancellationToken);
                  TimMBeanList_.Add(_elem262);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              ReqType = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Map)
            {
              {
                var _map263 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map263.Count);
                for(int _i264 = 0; _i264 < _map263.Count; ++_i264)
                {
                  string _key265;
                  string _val266;
                  _key265 = await iprot.ReadStringAsync(cancellationToken);
                  _val266 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key265] = _val266;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_threadId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp267 = new TStruct("TimMBeanList");
      await oprot.WriteStructBeginAsync(tmp267, cancellationToken);
      var tmp268 = new TField();
      if((ThreadId != null))
      {
        tmp268.Name = "threadId";
        tmp268.Type = TType.String;
        tmp268.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp268, cancellationToken);
        await oprot.WriteStringAsync(ThreadId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((TimMBeanList_ != null) && __isset.timMBeanList)
      {
        tmp268.Name = "timMBeanList";
        tmp268.Type = TType.List;
        tmp268.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp268, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, TimMBeanList_.Count), cancellationToken);
        foreach (TimMBean _iter269 in TimMBeanList_)
        {
          await _iter269.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ReqType != null) && __isset.reqType)
      {
        tmp268.Name = "reqType";
        tmp268.Type = TType.String;
        tmp268.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp268, cancellationToken);
        await oprot.WriteStringAsync(ReqType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp268.Name = "extraMap";
        tmp268.Type = TType.Map;
        tmp268.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp268, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter270 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter270, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter270], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimMBeanList other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(ThreadId, other.ThreadId)
      && ((__isset.timMBeanList == other.__isset.timMBeanList) && ((!__isset.timMBeanList) || (TCollections.Equals(TimMBeanList_, other.TimMBeanList_))))
      && ((__isset.reqType == other.__isset.reqType) && ((!__isset.reqType) || (global::System.Object.Equals(ReqType, other.ReqType))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((ThreadId != null))
      {
        hashcode = (hashcode * 397) + ThreadId.GetHashCode();
      }
      if((TimMBeanList_ != null) && __isset.timMBeanList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(TimMBeanList_);
      }
      if((ReqType != null) && __isset.reqType)
      {
        hashcode = (hashcode * 397) + ReqType.GetHashCode();
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp271 = new StringBuilder("TimMBeanList(");
    if((ThreadId != null))
    {
      tmp271.Append(", ThreadId: ");
      ThreadId.ToString(tmp271);
    }
    if((TimMBeanList_ != null) && __isset.timMBeanList)
    {
      tmp271.Append(", TimMBeanList_: ");
      TimMBeanList_.ToString(tmp271);
    }
    if((ReqType != null) && __isset.reqType)
    {
      tmp271.Append(", ReqType: ");
      ReqType.ToString(tmp271);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp271.Append(", ExtraMap: ");
      ExtraMap.ToString(tmp271);
    }
    tmp271.Append(')');
    return tmp271.ToString();
  }
}

