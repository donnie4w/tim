/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class TimMBean : TBase
{
  private string _mid;
  private Tid _fromTid;
  private Tid _toTid;
  private string _body;
  private string _type;
  private short _msgType;
  private TimTime _offline;
  private Tid _leaguerTid;
  private List<TimNode> _extraList;
  private string _timestamp;
  private TimError _error;
  private Dictionary<string, string> _extraMap;
  private short _readstatus;

  /// <summary>
  /// 线程id
  /// </summary>
  public string ThreadId { get; set; }

  /// <summary>
  /// 消息id号
  /// </summary>
  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  /// <summary>
  /// 来源Tid
  /// </summary>
  public Tid FromTid
  {
    get
    {
      return _fromTid;
    }
    set
    {
      __isset.fromTid = true;
      this._fromTid = value;
    }
  }

  /// <summary>
  /// 目标Tid
  /// </summary>
  public Tid ToTid
  {
    get
    {
      return _toTid;
    }
    set
    {
      __isset.toTid = true;
      this._toTid = value;
    }
  }

  /// <summary>
  /// 信息内容
  /// </summary>
  public string Body
  {
    get
    {
      return _body;
    }
    set
    {
      __isset.body = true;
      this._body = value;
    }
  }

  /// <summary>
  /// normal：类似于email，主要特点是不要求响应；
  /// chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
  /// groupchat：类似于聊天室里的群聊；
  /// headline：用于发送alert和notification；
  /// error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
  /// </summary>
  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  /// <summary>
  /// 消息类型  1 文字 2 图片 3 语音 4视频 5混合
  /// </summary>
  public short MsgType
  {
    get
    {
      return _msgType;
    }
    set
    {
      __isset.msgType = true;
      this._msgType = value;
    }
  }

  /// <summary>
  /// 是否离线信息
  /// </summary>
  public TimTime Offline
  {
    get
    {
      return _offline;
    }
    set
    {
      __isset.offline = true;
      this._offline = value;
    }
  }

  /// <summary>
  /// 成员Tid   群聊时信息发送者Tid
  /// </summary>
  public Tid LeaguerTid
  {
    get
    {
      return _leaguerTid;
    }
    set
    {
      __isset.leaguerTid = true;
      this._leaguerTid = value;
    }
  }

  /// <summary>
  /// 扩展字段
  /// </summary>
  public List<TimNode> ExtraList
  {
    get
    {
      return _extraList;
    }
    set
    {
      __isset.extraList = true;
      this._extraList = value;
    }
  }

  /// <summary>
  /// 服务器发送信息时间戳(毫秒)
  /// </summary>
  public string Timestamp
  {
    get
    {
      return _timestamp;
    }
    set
    {
      __isset.timestamp = true;
      this._timestamp = value;
    }
  }

  /// <summary>
  /// 错误码
  /// </summary>
  public TimError Error
  {
    get
    {
      return _error;
    }
    set
    {
      __isset.error = true;
      this._error = value;
    }
  }

  public Dictionary<string, string> ExtraMap
  {
    get
    {
      return _extraMap;
    }
    set
    {
      __isset.extraMap = true;
      this._extraMap = value;
    }
  }

  /// <summary>
  /// 0未读  1已读
  /// </summary>
  public short Readstatus
  {
    get
    {
      return _readstatus;
    }
    set
    {
      __isset.readstatus = true;
      this._readstatus = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool mid;
    public bool fromTid;
    public bool toTid;
    public bool body;
    public bool type;
    public bool msgType;
    public bool offline;
    public bool leaguerTid;
    public bool extraList;
    public bool timestamp;
    public bool error;
    public bool extraMap;
    public bool readstatus;
  }

  public TimMBean()
  {
  }

  public TimMBean(string threadId) : this()
  {
    this.ThreadId = threadId;
  }

  public TimMBean DeepCopy()
  {
    var tmp130 = new TimMBean();
    if((ThreadId != null))
    {
      tmp130.ThreadId = this.ThreadId;
    }
    if((Mid != null) && __isset.mid)
    {
      tmp130.Mid = this.Mid;
    }
    tmp130.__isset.mid = this.__isset.mid;
    if((FromTid != null) && __isset.fromTid)
    {
      tmp130.FromTid = (Tid)this.FromTid.DeepCopy();
    }
    tmp130.__isset.fromTid = this.__isset.fromTid;
    if((ToTid != null) && __isset.toTid)
    {
      tmp130.ToTid = (Tid)this.ToTid.DeepCopy();
    }
    tmp130.__isset.toTid = this.__isset.toTid;
    if((Body != null) && __isset.body)
    {
      tmp130.Body = this.Body;
    }
    tmp130.__isset.body = this.__isset.body;
    if((Type != null) && __isset.type)
    {
      tmp130.Type = this.Type;
    }
    tmp130.__isset.type = this.__isset.type;
    if(__isset.msgType)
    {
      tmp130.MsgType = this.MsgType;
    }
    tmp130.__isset.msgType = this.__isset.msgType;
    if((Offline != null) && __isset.offline)
    {
      tmp130.Offline = (TimTime)this.Offline.DeepCopy();
    }
    tmp130.__isset.offline = this.__isset.offline;
    if((LeaguerTid != null) && __isset.leaguerTid)
    {
      tmp130.LeaguerTid = (Tid)this.LeaguerTid.DeepCopy();
    }
    tmp130.__isset.leaguerTid = this.__isset.leaguerTid;
    if((ExtraList != null) && __isset.extraList)
    {
      tmp130.ExtraList = this.ExtraList.DeepCopy();
    }
    tmp130.__isset.extraList = this.__isset.extraList;
    if((Timestamp != null) && __isset.timestamp)
    {
      tmp130.Timestamp = this.Timestamp;
    }
    tmp130.__isset.timestamp = this.__isset.timestamp;
    if((Error != null) && __isset.error)
    {
      tmp130.Error = (TimError)this.Error.DeepCopy();
    }
    tmp130.__isset.error = this.__isset.error;
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp130.ExtraMap = this.ExtraMap.DeepCopy();
    }
    tmp130.__isset.extraMap = this.__isset.extraMap;
    if(__isset.readstatus)
    {
      tmp130.Readstatus = this.Readstatus;
    }
    tmp130.__isset.readstatus = this.__isset.readstatus;
    return tmp130;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_threadId = false;
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              ThreadId = await iprot.ReadStringAsync(cancellationToken);
              isset_threadId = true;
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Mid = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              FromTid = new Tid();
              await FromTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              ToTid = new Tid();
              await ToTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Body = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              Type = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I16)
            {
              MsgType = await iprot.ReadI16Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.Struct)
            {
              Offline = new TimTime();
              await Offline.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.Struct)
            {
              LeaguerTid = new Tid();
              await LeaguerTid.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.List)
            {
              {
                var _list131 = await iprot.ReadListBeginAsync(cancellationToken);
                ExtraList = new List<TimNode>(_list131.Count);
                for(int _i132 = 0; _i132 < _list131.Count; ++_i132)
                {
                  TimNode _elem133;
                  _elem133 = new TimNode();
                  await _elem133.ReadAsync(iprot, cancellationToken);
                  ExtraList.Add(_elem133);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.String)
            {
              Timestamp = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.Struct)
            {
              Error = new TimError();
              await Error.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.Map)
            {
              {
                var _map134 = await iprot.ReadMapBeginAsync(cancellationToken);
                ExtraMap = new Dictionary<string, string>(_map134.Count);
                for(int _i135 = 0; _i135 < _map134.Count; ++_i135)
                {
                  string _key136;
                  string _val137;
                  _key136 = await iprot.ReadStringAsync(cancellationToken);
                  _val137 = await iprot.ReadStringAsync(cancellationToken);
                  ExtraMap[_key136] = _val137;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.I16)
            {
              Readstatus = await iprot.ReadI16Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
      if (!isset_threadId)
      {
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp138 = new TStruct("TimMBean");
      await oprot.WriteStructBeginAsync(tmp138, cancellationToken);
      var tmp139 = new TField();
      if((ThreadId != null))
      {
        tmp139.Name = "threadId";
        tmp139.Type = TType.String;
        tmp139.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteStringAsync(ThreadId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Mid != null) && __isset.mid)
      {
        tmp139.Name = "mid";
        tmp139.Type = TType.String;
        tmp139.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteStringAsync(Mid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((FromTid != null) && __isset.fromTid)
      {
        tmp139.Name = "fromTid";
        tmp139.Type = TType.Struct;
        tmp139.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await FromTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ToTid != null) && __isset.toTid)
      {
        tmp139.Name = "toTid";
        tmp139.Type = TType.Struct;
        tmp139.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await ToTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Body != null) && __isset.body)
      {
        tmp139.Name = "body";
        tmp139.Type = TType.String;
        tmp139.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteStringAsync(Body, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Type != null) && __isset.type)
      {
        tmp139.Name = "type";
        tmp139.Type = TType.String;
        tmp139.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteStringAsync(Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.msgType)
      {
        tmp139.Name = "msgType";
        tmp139.Type = TType.I16;
        tmp139.ID = 7;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteI16Async(MsgType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Offline != null) && __isset.offline)
      {
        tmp139.Name = "offline";
        tmp139.Type = TType.Struct;
        tmp139.ID = 8;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await Offline.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((LeaguerTid != null) && __isset.leaguerTid)
      {
        tmp139.Name = "leaguerTid";
        tmp139.Type = TType.Struct;
        tmp139.ID = 9;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await LeaguerTid.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraList != null) && __isset.extraList)
      {
        tmp139.Name = "extraList";
        tmp139.Type = TType.List;
        tmp139.ID = 10;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, ExtraList.Count), cancellationToken);
        foreach (TimNode _iter140 in ExtraList)
        {
          await _iter140.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Timestamp != null) && __isset.timestamp)
      {
        tmp139.Name = "timestamp";
        tmp139.Type = TType.String;
        tmp139.ID = 11;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteStringAsync(Timestamp, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Error != null) && __isset.error)
      {
        tmp139.Name = "error";
        tmp139.Type = TType.Struct;
        tmp139.ID = 12;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await Error.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        tmp139.Name = "extraMap";
        tmp139.Type = TType.Map;
        tmp139.ID = 13;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ExtraMap.Count), cancellationToken);
        foreach (string _iter141 in ExtraMap.Keys)
        {
          await oprot.WriteStringAsync(_iter141, cancellationToken);
          await oprot.WriteStringAsync(ExtraMap[_iter141], cancellationToken);
        }
        await oprot.WriteMapEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.readstatus)
      {
        tmp139.Name = "readstatus";
        tmp139.Type = TType.I16;
        tmp139.ID = 14;
        await oprot.WriteFieldBeginAsync(tmp139, cancellationToken);
        await oprot.WriteI16Async(Readstatus, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is TimMBean other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return global::System.Object.Equals(ThreadId, other.ThreadId)
      && ((__isset.mid == other.__isset.mid) && ((!__isset.mid) || (global::System.Object.Equals(Mid, other.Mid))))
      && ((__isset.fromTid == other.__isset.fromTid) && ((!__isset.fromTid) || (global::System.Object.Equals(FromTid, other.FromTid))))
      && ((__isset.toTid == other.__isset.toTid) && ((!__isset.toTid) || (global::System.Object.Equals(ToTid, other.ToTid))))
      && ((__isset.body == other.__isset.body) && ((!__isset.body) || (global::System.Object.Equals(Body, other.Body))))
      && ((__isset.type == other.__isset.type) && ((!__isset.type) || (global::System.Object.Equals(Type, other.Type))))
      && ((__isset.msgType == other.__isset.msgType) && ((!__isset.msgType) || (global::System.Object.Equals(MsgType, other.MsgType))))
      && ((__isset.offline == other.__isset.offline) && ((!__isset.offline) || (global::System.Object.Equals(Offline, other.Offline))))
      && ((__isset.leaguerTid == other.__isset.leaguerTid) && ((!__isset.leaguerTid) || (global::System.Object.Equals(LeaguerTid, other.LeaguerTid))))
      && ((__isset.extraList == other.__isset.extraList) && ((!__isset.extraList) || (TCollections.Equals(ExtraList, other.ExtraList))))
      && ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (global::System.Object.Equals(Timestamp, other.Timestamp))))
      && ((__isset.error == other.__isset.error) && ((!__isset.error) || (global::System.Object.Equals(Error, other.Error))))
      && ((__isset.extraMap == other.__isset.extraMap) && ((!__isset.extraMap) || (TCollections.Equals(ExtraMap, other.ExtraMap))))
      && ((__isset.readstatus == other.__isset.readstatus) && ((!__isset.readstatus) || (global::System.Object.Equals(Readstatus, other.Readstatus))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((ThreadId != null))
      {
        hashcode = (hashcode * 397) + ThreadId.GetHashCode();
      }
      if((Mid != null) && __isset.mid)
      {
        hashcode = (hashcode * 397) + Mid.GetHashCode();
      }
      if((FromTid != null) && __isset.fromTid)
      {
        hashcode = (hashcode * 397) + FromTid.GetHashCode();
      }
      if((ToTid != null) && __isset.toTid)
      {
        hashcode = (hashcode * 397) + ToTid.GetHashCode();
      }
      if((Body != null) && __isset.body)
      {
        hashcode = (hashcode * 397) + Body.GetHashCode();
      }
      if((Type != null) && __isset.type)
      {
        hashcode = (hashcode * 397) + Type.GetHashCode();
      }
      if(__isset.msgType)
      {
        hashcode = (hashcode * 397) + MsgType.GetHashCode();
      }
      if((Offline != null) && __isset.offline)
      {
        hashcode = (hashcode * 397) + Offline.GetHashCode();
      }
      if((LeaguerTid != null) && __isset.leaguerTid)
      {
        hashcode = (hashcode * 397) + LeaguerTid.GetHashCode();
      }
      if((ExtraList != null) && __isset.extraList)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraList);
      }
      if((Timestamp != null) && __isset.timestamp)
      {
        hashcode = (hashcode * 397) + Timestamp.GetHashCode();
      }
      if((Error != null) && __isset.error)
      {
        hashcode = (hashcode * 397) + Error.GetHashCode();
      }
      if((ExtraMap != null) && __isset.extraMap)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(ExtraMap);
      }
      if(__isset.readstatus)
      {
        hashcode = (hashcode * 397) + Readstatus.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp142 = new StringBuilder("TimMBean(");
    if((ThreadId != null))
    {
      tmp142.Append(", ThreadId: ");
      ThreadId.ToString(tmp142);
    }
    if((Mid != null) && __isset.mid)
    {
      tmp142.Append(", Mid: ");
      Mid.ToString(tmp142);
    }
    if((FromTid != null) && __isset.fromTid)
    {
      tmp142.Append(", FromTid: ");
      FromTid.ToString(tmp142);
    }
    if((ToTid != null) && __isset.toTid)
    {
      tmp142.Append(", ToTid: ");
      ToTid.ToString(tmp142);
    }
    if((Body != null) && __isset.body)
    {
      tmp142.Append(", Body: ");
      Body.ToString(tmp142);
    }
    if((Type != null) && __isset.type)
    {
      tmp142.Append(", Type: ");
      Type.ToString(tmp142);
    }
    if(__isset.msgType)
    {
      tmp142.Append(", MsgType: ");
      MsgType.ToString(tmp142);
    }
    if((Offline != null) && __isset.offline)
    {
      tmp142.Append(", Offline: ");
      Offline.ToString(tmp142);
    }
    if((LeaguerTid != null) && __isset.leaguerTid)
    {
      tmp142.Append(", LeaguerTid: ");
      LeaguerTid.ToString(tmp142);
    }
    if((ExtraList != null) && __isset.extraList)
    {
      tmp142.Append(", ExtraList: ");
      ExtraList.ToString(tmp142);
    }
    if((Timestamp != null) && __isset.timestamp)
    {
      tmp142.Append(", Timestamp: ");
      Timestamp.ToString(tmp142);
    }
    if((Error != null) && __isset.error)
    {
      tmp142.Append(", Error: ");
      Error.ToString(tmp142);
    }
    if((ExtraMap != null) && __isset.extraMap)
    {
      tmp142.Append(", ExtraMap: ");
      ExtraMap.ToString(tmp142);
    }
    if(__isset.readstatus)
    {
      tmp142.Append(", Readstatus: ");
      Readstatus.ToString(tmp142);
    }
    tmp142.Append(')');
    return tmp142.ToString();
  }
}

