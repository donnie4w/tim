//
// Autogenerated by Thrift Compiler (0.17.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


TimError = function(args) {
  this.errCode = null;
  this.errMsg = null;
  if (args) {
    if (args.errCode !== undefined && args.errCode !== null) {
      this.errCode = args.errCode;
    }
    if (args.errMsg !== undefined && args.errMsg !== null) {
      this.errMsg = args.errMsg;
    }
  }
};
TimError.prototype = {};
TimError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errMsg = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimError.prototype.write = function(output) {
  output.writeStructBegin('TimError');
  if (this.errCode !== null && this.errCode !== undefined) {
    output.writeFieldBegin('errCode', Thrift.Type.I32, 1);
    output.writeI32(this.errCode);
    output.writeFieldEnd();
  }
  if (this.errMsg !== null && this.errMsg !== undefined) {
    output.writeFieldBegin('errMsg', Thrift.Type.STRING, 2);
    output.writeString(this.errMsg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimNode = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
TimNode.prototype = {};
TimNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimNode.prototype.write = function(output) {
  output.writeStructBegin('TimNode');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimAckBean = function(args) {
  this.id = null;
  this.ackType = null;
  this.ackStatus = null;
  this.extraList = null;
  this.err = null;
  this.extraMap = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ackType !== undefined && args.ackType !== null) {
      this.ackType = args.ackType;
    }
    if (args.ackStatus !== undefined && args.ackStatus !== null) {
      this.ackStatus = args.ackStatus;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = new TimError(args.err);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimAckBean.prototype = {};
TimAckBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ackType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ackStatus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new TimNode();
          elem3.read(input);
          this.extraList.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new TimError();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp35 = input.readMapBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          if (_i6 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key7 = null;
          var val8 = null;
          key7 = input.readString().value;
          val8 = input.readString().value;
          this.extraMap[key7] = val8;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimAckBean.prototype.write = function(output) {
  output.writeStructBegin('TimAckBean');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.ackType !== null && this.ackType !== undefined) {
    output.writeFieldBegin('ackType', Thrift.Type.STRING, 2);
    output.writeString(this.ackType);
    output.writeFieldEnd();
  }
  if (this.ackStatus !== null && this.ackStatus !== undefined) {
    output.writeFieldBegin('ackStatus', Thrift.Type.STRING, 3);
    output.writeString(this.ackStatus);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter9 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter9)) {
        iter9 = this.extraList[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 5);
    this.err.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter10 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter10)) {
        var viter11 = this.extraMap[kiter10];
        output.writeString(kiter10);
        output.writeString(viter11);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimHBean = function(args) {
  this.chl = null;
  this.platform = null;
  this.version = null;
  if (args) {
    if (args.chl !== undefined && args.chl !== null) {
      this.chl = args.chl;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field chl is unset!');
    }
    if (args.platform !== undefined && args.platform !== null) {
      this.platform = args.platform;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
  }
};
TimHBean.prototype = {};
TimHBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.chl = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimHBean.prototype.write = function(output) {
  output.writeStructBegin('TimHBean');
  if (this.chl !== null && this.chl !== undefined) {
    output.writeFieldBegin('chl', Thrift.Type.I32, 1);
    output.writeI32(this.chl);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 2);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 3);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimParam = function(args) {
  this.timestamp = null;
  this.version = null;
  this.lang = null;
  this.extraList = null;
  this.extraMap = null;
  this.interflow = null;
  this.tls = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
    if (args.interflow !== undefined && args.interflow !== null) {
      this.interflow = args.interflow;
    }
    if (args.tls !== undefined && args.tls !== null) {
      this.tls = args.tls;
    }
  }
};
TimParam.prototype = {};
TimParam.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.version = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp313 = input.readListBegin();
        var _size12 = _rtmp313.size || 0;
        for (var _i14 = 0; _i14 < _size12; ++_i14) {
          var elem15 = null;
          elem15 = new TimNode();
          elem15.read(input);
          this.extraList.push(elem15);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp317 = input.readMapBegin();
        var _size16 = _rtmp317.size || 0;
        for (var _i18 = 0; _i18 < _size16; ++_i18) {
          if (_i18 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key19 = null;
          var val20 = null;
          key19 = input.readString().value;
          val20 = input.readString().value;
          this.extraMap[key19] = val20;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.interflow = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.tls = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimParam.prototype.write = function(output) {
  output.writeStructBegin('TimParam');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I16, 2);
    output.writeI16(this.version);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 3);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter21 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter21)) {
        iter21 = this.extraList[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter22 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter22)) {
        var viter23 = this.extraMap[kiter22];
        output.writeString(kiter22);
        output.writeString(viter23);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.interflow !== null && this.interflow !== undefined) {
    output.writeFieldBegin('interflow', Thrift.Type.STRING, 6);
    output.writeString(this.interflow);
    output.writeFieldEnd();
  }
  if (this.tls !== null && this.tls !== undefined) {
    output.writeFieldBegin('tls', Thrift.Type.STRING, 7);
    output.writeString(this.tls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimTime = function(args) {
  this.timestamp = null;
  this.formattime = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.formattime !== undefined && args.formattime !== null) {
      this.formattime = args.formattime;
    }
  }
};
TimTime.prototype = {};
TimTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.formattime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimTime.prototype.write = function(output) {
  output.writeStructBegin('TimTime');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.formattime !== null && this.formattime !== undefined) {
    output.writeFieldBegin('formattime', Thrift.Type.STRING, 2);
    output.writeString(this.formattime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimArea = function(args) {
  this.country = null;
  this.province = null;
  this.city = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimArea.prototype = {};
TimArea.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = new TimNode();
          elem27.read(input);
          this.extraList.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp329 = input.readMapBegin();
        var _size28 = _rtmp329.size || 0;
        for (var _i30 = 0; _i30 < _size28; ++_i30) {
          if (_i30 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key31 = null;
          var val32 = null;
          key31 = input.readString().value;
          val32 = input.readString().value;
          this.extraMap[key31] = val32;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimArea.prototype.write = function(output) {
  output.writeStructBegin('TimArea');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 1);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 2);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 3);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter33 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter33)) {
        iter33 = this.extraList[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter34 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter34)) {
        var viter35 = this.extraMap[kiter34];
        output.writeString(kiter34);
        output.writeString(viter35);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tid = function(args) {
  this.name = null;
  this.domain = null;
  this.resource = null;
  this.type = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.domain !== undefined && args.domain !== null) {
      this.domain = args.domain;
    }
    if (args.resource !== undefined && args.resource !== null) {
      this.resource = args.resource;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
Tid.prototype = {};
Tid.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resource = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp337 = input.readListBegin();
        var _size36 = _rtmp337.size || 0;
        for (var _i38 = 0; _i38 < _size36; ++_i38) {
          var elem39 = null;
          elem39 = new TimNode();
          elem39.read(input);
          this.extraList.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp341 = input.readMapBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          if (_i42 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key43 = null;
          var val44 = null;
          key43 = input.readString().value;
          val44 = input.readString().value;
          this.extraMap[key43] = val44;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tid.prototype.write = function(output) {
  output.writeStructBegin('Tid');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 2);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRING, 3);
    output.writeString(this.resource);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter45 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter45)) {
        iter45 = this.extraList[iter45];
        iter45.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter46 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter46)) {
        var viter47 = this.extraMap[kiter46];
        output.writeString(kiter46);
        output.writeString(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimUserBean = function(args) {
  this.tid = null;
  this.nickname = null;
  this.remarkname = null;
  this.brithday = null;
  this.gender = null;
  this.headurl = null;
  this.area = null;
  this.headbyte = null;
  this.photoBytes = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.nickname !== undefined && args.nickname !== null) {
      this.nickname = args.nickname;
    }
    if (args.remarkname !== undefined && args.remarkname !== null) {
      this.remarkname = args.remarkname;
    }
    if (args.brithday !== undefined && args.brithday !== null) {
      this.brithday = args.brithday;
    }
    if (args.gender !== undefined && args.gender !== null) {
      this.gender = args.gender;
    }
    if (args.headurl !== undefined && args.headurl !== null) {
      this.headurl = args.headurl;
    }
    if (args.area !== undefined && args.area !== null) {
      this.area = new TimArea(args.area);
    }
    if (args.headbyte !== undefined && args.headbyte !== null) {
      this.headbyte = args.headbyte;
    }
    if (args.photoBytes !== undefined && args.photoBytes !== null) {
      this.photoBytes = Thrift.copyList(args.photoBytes, [null]);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimUserBean.prototype = {};
TimUserBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nickname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.remarkname = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.brithday = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.gender = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.headurl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.area = new TimArea();
        this.area.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.headbyte = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.photoBytes = [];
        var _rtmp349 = input.readListBegin();
        var _size48 = _rtmp349.size || 0;
        for (var _i50 = 0; _i50 < _size48; ++_i50) {
          var elem51 = null;
          elem51 = input.readBinary().value;
          this.photoBytes.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp353 = input.readListBegin();
        var _size52 = _rtmp353.size || 0;
        for (var _i54 = 0; _i54 < _size52; ++_i54) {
          var elem55 = null;
          elem55 = new TimNode();
          elem55.read(input);
          this.extraList.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp357 = input.readMapBegin();
        var _size56 = _rtmp357.size || 0;
        for (var _i58 = 0; _i58 < _size56; ++_i58) {
          if (_i58 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key59 = null;
          var val60 = null;
          key59 = input.readString().value;
          val60 = input.readString().value;
          this.extraMap[key59] = val60;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimUserBean.prototype.write = function(output) {
  output.writeStructBegin('TimUserBean');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.nickname !== null && this.nickname !== undefined) {
    output.writeFieldBegin('nickname', Thrift.Type.STRING, 2);
    output.writeString(this.nickname);
    output.writeFieldEnd();
  }
  if (this.remarkname !== null && this.remarkname !== undefined) {
    output.writeFieldBegin('remarkname', Thrift.Type.STRING, 3);
    output.writeString(this.remarkname);
    output.writeFieldEnd();
  }
  if (this.brithday !== null && this.brithday !== undefined) {
    output.writeFieldBegin('brithday', Thrift.Type.STRING, 4);
    output.writeString(this.brithday);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.I16, 5);
    output.writeI16(this.gender);
    output.writeFieldEnd();
  }
  if (this.headurl !== null && this.headurl !== undefined) {
    output.writeFieldBegin('headurl', Thrift.Type.STRING, 6);
    output.writeString(this.headurl);
    output.writeFieldEnd();
  }
  if (this.area !== null && this.area !== undefined) {
    output.writeFieldBegin('area', Thrift.Type.STRUCT, 7);
    this.area.write(output);
    output.writeFieldEnd();
  }
  if (this.headbyte !== null && this.headbyte !== undefined) {
    output.writeFieldBegin('headbyte', Thrift.Type.STRING, 8);
    output.writeBinary(this.headbyte);
    output.writeFieldEnd();
  }
  if (this.photoBytes !== null && this.photoBytes !== undefined) {
    output.writeFieldBegin('photoBytes', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.photoBytes.length);
    for (var iter61 in this.photoBytes) {
      if (this.photoBytes.hasOwnProperty(iter61)) {
        iter61 = this.photoBytes[iter61];
        output.writeBinary(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter62 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter62)) {
        iter62 = this.extraList[iter62];
        iter62.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter63 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter63)) {
        var viter64 = this.extraMap[kiter63];
        output.writeString(kiter63);
        output.writeString(viter64);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRoom = function(args) {
  this.tid = null;
  this.founderTid = null;
  this.HostsTid = null;
  this.membersTid = null;
  this.headurl = null;
  this.roomName = null;
  this.desc = null;
  this.createTime = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    }
    if (args.founderTid !== undefined && args.founderTid !== null) {
      this.founderTid = new Tid(args.founderTid);
    }
    if (args.HostsTid !== undefined && args.HostsTid !== null) {
      this.HostsTid = Thrift.copyList(args.HostsTid, [Tid]);
    }
    if (args.membersTid !== undefined && args.membersTid !== null) {
      this.membersTid = Thrift.copyList(args.membersTid, [Tid]);
    }
    if (args.headurl !== undefined && args.headurl !== null) {
      this.headurl = args.headurl;
    }
    if (args.roomName !== undefined && args.roomName !== null) {
      this.roomName = args.roomName;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = new TimTime(args.createTime);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRoom.prototype = {};
TimRoom.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.founderTid = new Tid();
        this.founderTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.HostsTid = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = new Tid();
          elem68.read(input);
          this.HostsTid.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.membersTid = [];
        var _rtmp370 = input.readListBegin();
        var _size69 = _rtmp370.size || 0;
        for (var _i71 = 0; _i71 < _size69; ++_i71) {
          var elem72 = null;
          elem72 = new Tid();
          elem72.read(input);
          this.membersTid.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.headurl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.roomName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.createTime = new TimTime();
        this.createTime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp374 = input.readListBegin();
        var _size73 = _rtmp374.size || 0;
        for (var _i75 = 0; _i75 < _size73; ++_i75) {
          var elem76 = null;
          elem76 = new TimNode();
          elem76.read(input);
          this.extraList.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp378 = input.readMapBegin();
        var _size77 = _rtmp378.size || 0;
        for (var _i79 = 0; _i79 < _size77; ++_i79) {
          if (_i79 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key80 = null;
          var val81 = null;
          key80 = input.readString().value;
          val81 = input.readString().value;
          this.extraMap[key80] = val81;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRoom.prototype.write = function(output) {
  output.writeStructBegin('TimRoom');
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 1);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.founderTid !== null && this.founderTid !== undefined) {
    output.writeFieldBegin('founderTid', Thrift.Type.STRUCT, 2);
    this.founderTid.write(output);
    output.writeFieldEnd();
  }
  if (this.HostsTid !== null && this.HostsTid !== undefined) {
    output.writeFieldBegin('HostsTid', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.HostsTid.length);
    for (var iter82 in this.HostsTid) {
      if (this.HostsTid.hasOwnProperty(iter82)) {
        iter82 = this.HostsTid[iter82];
        iter82.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.membersTid !== null && this.membersTid !== undefined) {
    output.writeFieldBegin('membersTid', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.membersTid.length);
    for (var iter83 in this.membersTid) {
      if (this.membersTid.hasOwnProperty(iter83)) {
        iter83 = this.membersTid[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.headurl !== null && this.headurl !== undefined) {
    output.writeFieldBegin('headurl', Thrift.Type.STRING, 5);
    output.writeString(this.headurl);
    output.writeFieldEnd();
  }
  if (this.roomName !== null && this.roomName !== undefined) {
    output.writeFieldBegin('roomName', Thrift.Type.STRING, 6);
    output.writeString(this.roomName);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 7);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRUCT, 8);
    this.createTime.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter84 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter84)) {
        iter84 = this.extraList[iter84];
        iter84.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter85 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter85)) {
        var viter86 = this.extraMap[kiter85];
        output.writeString(kiter85);
        output.writeString(viter86);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPBean = function(args) {
  this.threadId = null;
  this.fromTid = null;
  this.toTid = null;
  this.status = null;
  this.type = null;
  this.priority = null;
  this.show = null;
  this.leaguerTid = null;
  this.extraList = null;
  this.error = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.show !== undefined && args.show !== null) {
      this.show = args.show;
    }
    if (args.leaguerTid !== undefined && args.leaguerTid !== null) {
      this.leaguerTid = new Tid(args.leaguerTid);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimPBean.prototype = {};
TimPBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.show = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.leaguerTid = new Tid();
        this.leaguerTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp388 = input.readListBegin();
        var _size87 = _rtmp388.size || 0;
        for (var _i89 = 0; _i89 < _size87; ++_i89) {
          var elem90 = null;
          elem90 = new TimNode();
          elem90.read(input);
          this.extraList.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp392 = input.readMapBegin();
        var _size91 = _rtmp392.size || 0;
        for (var _i93 = 0; _i93 < _size91; ++_i93) {
          if (_i93 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key94 = null;
          var val95 = null;
          key94 = input.readString().value;
          val95 = input.readString().value;
          this.extraMap[key94] = val95;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPBean.prototype.write = function(output) {
  output.writeStructBegin('TimPBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 2);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 3);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 4);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 6);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.show !== null && this.show !== undefined) {
    output.writeFieldBegin('show', Thrift.Type.STRING, 7);
    output.writeString(this.show);
    output.writeFieldEnd();
  }
  if (this.leaguerTid !== null && this.leaguerTid !== undefined) {
    output.writeFieldBegin('leaguerTid', Thrift.Type.STRUCT, 8);
    this.leaguerTid.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter96 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter96)) {
        iter96 = this.extraList[iter96];
        iter96.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 10);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter97 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter97)) {
        var viter98 = this.extraMap[kiter97];
        output.writeString(kiter97);
        output.writeString(viter98);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMBean = function(args) {
  this.threadId = null;
  this.mid = null;
  this.fromTid = null;
  this.toTid = null;
  this.body = null;
  this.type = null;
  this.msgType = null;
  this.offline = null;
  this.leaguerTid = null;
  this.extraList = null;
  this.timestamp = null;
  this.error = null;
  this.extraMap = null;
  this.readstatus = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.msgType !== undefined && args.msgType !== null) {
      this.msgType = args.msgType;
    }
    if (args.offline !== undefined && args.offline !== null) {
      this.offline = new TimTime(args.offline);
    }
    if (args.leaguerTid !== undefined && args.leaguerTid !== null) {
      this.leaguerTid = new Tid(args.leaguerTid);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
    if (args.readstatus !== undefined && args.readstatus !== null) {
      this.readstatus = args.readstatus;
    }
  }
};
TimMBean.prototype = {};
TimMBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.msgType = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.offline = new TimTime();
        this.offline.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.leaguerTid = new Tid();
        this.leaguerTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp3100 = input.readListBegin();
        var _size99 = _rtmp3100.size || 0;
        for (var _i101 = 0; _i101 < _size99; ++_i101) {
          var elem102 = null;
          elem102 = new TimNode();
          elem102.read(input);
          this.extraList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3104 = input.readMapBegin();
        var _size103 = _rtmp3104.size || 0;
        for (var _i105 = 0; _i105 < _size103; ++_i105) {
          if (_i105 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key106 = null;
          var val107 = null;
          key106 = input.readString().value;
          val107 = input.readString().value;
          this.extraMap[key106] = val107;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I16) {
        this.readstatus = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMBean.prototype.write = function(output) {
  output.writeStructBegin('TimMBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 3);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 4);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 5);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 6);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.msgType !== null && this.msgType !== undefined) {
    output.writeFieldBegin('msgType', Thrift.Type.I16, 7);
    output.writeI16(this.msgType);
    output.writeFieldEnd();
  }
  if (this.offline !== null && this.offline !== undefined) {
    output.writeFieldBegin('offline', Thrift.Type.STRUCT, 8);
    this.offline.write(output);
    output.writeFieldEnd();
  }
  if (this.leaguerTid !== null && this.leaguerTid !== undefined) {
    output.writeFieldBegin('leaguerTid', Thrift.Type.STRUCT, 9);
    this.leaguerTid.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter108 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter108)) {
        iter108 = this.extraList[iter108];
        iter108.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 11);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 12);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 13);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter109 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter109)) {
        var viter110 = this.extraMap[kiter109];
        output.writeString(kiter109);
        output.writeString(viter110);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.readstatus !== null && this.readstatus !== undefined) {
    output.writeFieldBegin('readstatus', Thrift.Type.I16, 14);
    output.writeI16(this.readstatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimIqBean = function(args) {
  this.threadId = null;
  this.fromTid = null;
  this.toTid = null;
  this.type = null;
  this.extraList = null;
  this.error = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimIqBean.prototype = {};
TimIqBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp3112 = input.readListBegin();
        var _size111 = _rtmp3112.size || 0;
        for (var _i113 = 0; _i113 < _size111; ++_i113) {
          var elem114 = null;
          elem114 = new TimNode();
          elem114.read(input);
          this.extraList.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3116 = input.readMapBegin();
        var _size115 = _rtmp3116.size || 0;
        for (var _i117 = 0; _i117 < _size115; ++_i117) {
          if (_i117 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key118 = null;
          var val119 = null;
          key118 = input.readString().value;
          val119 = input.readString().value;
          this.extraMap[key118] = val119;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimIqBean.prototype.write = function(output) {
  output.writeStructBegin('TimIqBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 2);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 3);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter120 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter120)) {
        iter120 = this.extraList[iter120];
        iter120.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 6);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter121 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter121)) {
        var viter122 = this.extraMap[kiter121];
        output.writeString(kiter121);
        output.writeString(viter122);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRoster = function(args) {
  this.subscription = null;
  this.tid = null;
  this.name = null;
  this.extraMap = null;
  if (args) {
    if (args.subscription !== undefined && args.subscription !== null) {
      this.subscription = args.subscription;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subscription is unset!');
    }
    if (args.tid !== undefined && args.tid !== null) {
      this.tid = new Tid(args.tid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tid is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRoster.prototype = {};
TimRoster.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.subscription = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tid = new Tid();
        this.tid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3124 = input.readMapBegin();
        var _size123 = _rtmp3124.size || 0;
        for (var _i125 = 0; _i125 < _size123; ++_i125) {
          if (_i125 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key126 = null;
          var val127 = null;
          key126 = input.readString().value;
          val127 = input.readString().value;
          this.extraMap[key126] = val127;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRoster.prototype.write = function(output) {
  output.writeStructBegin('TimRoster');
  if (this.subscription !== null && this.subscription !== undefined) {
    output.writeFieldBegin('subscription', Thrift.Type.STRING, 1);
    output.writeString(this.subscription);
    output.writeFieldEnd();
  }
  if (this.tid !== null && this.tid !== undefined) {
    output.writeFieldBegin('tid', Thrift.Type.STRUCT, 2);
    this.tid.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter128 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter128)) {
        var viter129 = this.extraMap[kiter128];
        output.writeString(kiter128);
        output.writeString(viter129);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRemoteUserBean = function(args) {
  this.error = null;
  this.ub = null;
  this.extraMap = null;
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.ub !== undefined && args.ub !== null) {
      this.ub = new TimUserBean(args.ub);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRemoteUserBean.prototype = {};
TimRemoteUserBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ub = new TimUserBean();
        this.ub.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3131 = input.readMapBegin();
        var _size130 = _rtmp3131.size || 0;
        for (var _i132 = 0; _i132 < _size130; ++_i132) {
          if (_i132 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key133 = null;
          var val134 = null;
          key133 = input.readString().value;
          val134 = input.readString().value;
          this.extraMap[key133] = val134;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRemoteUserBean.prototype.write = function(output) {
  output.writeStructBegin('TimRemoteUserBean');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.ub !== null && this.ub !== undefined) {
    output.writeFieldBegin('ub', Thrift.Type.STRUCT, 2);
    this.ub.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter135 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter135)) {
        var viter136 = this.extraMap[kiter135];
        output.writeString(kiter135);
        output.writeString(viter136);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimRemoteRoom = function(args) {
  this.error = null;
  this.room = null;
  this.extraMap = null;
  if (args) {
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.room !== undefined && args.room !== null) {
      this.room = new TimRoom(args.room);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimRemoteRoom.prototype = {};
TimRemoteRoom.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.room = new TimRoom();
        this.room.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3138 = input.readMapBegin();
        var _size137 = _rtmp3138.size || 0;
        for (var _i139 = 0; _i139 < _size137; ++_i139) {
          if (_i139 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key140 = null;
          var val141 = null;
          key140 = input.readString().value;
          val141 = input.readString().value;
          this.extraMap[key140] = val141;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimRemoteRoom.prototype.write = function(output) {
  output.writeStructBegin('TimRemoteRoom');
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.room !== null && this.room !== undefined) {
    output.writeFieldBegin('room', Thrift.Type.STRUCT, 2);
    this.room.write(output);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter142 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter142)) {
        var viter143 = this.extraMap[kiter142];
        output.writeString(kiter142);
        output.writeString(viter143);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimResponseBean = function(args) {
  this.threadId = null;
  this.error = null;
  this.extraList = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new TimError(args.error);
    }
    if (args.extraList !== undefined && args.extraList !== null) {
      this.extraList = Thrift.copyList(args.extraList, [TimNode]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimResponseBean.prototype = {};
TimResponseBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new TimError();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.extraList = [];
        var _rtmp3145 = input.readListBegin();
        var _size144 = _rtmp3145.size || 0;
        for (var _i146 = 0; _i146 < _size144; ++_i146) {
          var elem147 = null;
          elem147 = new TimNode();
          elem147.read(input);
          this.extraList.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3149 = input.readMapBegin();
        var _size148 = _rtmp3149.size || 0;
        for (var _i150 = 0; _i150 < _size148; ++_i150) {
          if (_i150 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key151 = null;
          var val152 = null;
          key151 = input.readString().value;
          val152 = input.readString().value;
          this.extraMap[key151] = val152;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimResponseBean.prototype.write = function(output) {
  output.writeStructBegin('TimResponseBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  if (this.extraList !== null && this.extraList !== undefined) {
    output.writeFieldBegin('extraList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.extraList.length);
    for (var iter153 in this.extraList) {
      if (this.extraList.hasOwnProperty(iter153)) {
        iter153 = this.extraList[iter153];
        iter153.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter154 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter154)) {
        var viter155 = this.extraMap[kiter154];
        output.writeString(kiter154);
        output.writeString(viter155);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimSock5Bean = function(args) {
  this.fromTid = null;
  this.toTid = null;
  this.addr = null;
  this.port = null;
  this.transport = null;
  this.pubId = null;
  this.extraMap = null;
  if (args) {
    if (args.fromTid !== undefined && args.fromTid !== null) {
      this.fromTid = new Tid(args.fromTid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fromTid is unset!');
    }
    if (args.toTid !== undefined && args.toTid !== null) {
      this.toTid = new Tid(args.toTid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field toTid is unset!');
    }
    if (args.addr !== undefined && args.addr !== null) {
      this.addr = args.addr;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field addr is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
    if (args.transport !== undefined && args.transport !== null) {
      this.transport = args.transport;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field transport is unset!');
    }
    if (args.pubId !== undefined && args.pubId !== null) {
      this.pubId = args.pubId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pubId is unset!');
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimSock5Bean.prototype = {};
TimSock5Bean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fromTid = new Tid();
        this.fromTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.toTid = new Tid();
        this.toTid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.addr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.transport = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.pubId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3157 = input.readMapBegin();
        var _size156 = _rtmp3157.size || 0;
        for (var _i158 = 0; _i158 < _size156; ++_i158) {
          if (_i158 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key159 = null;
          var val160 = null;
          key159 = input.readString().value;
          val160 = input.readString().value;
          this.extraMap[key159] = val160;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimSock5Bean.prototype.write = function(output) {
  output.writeStructBegin('TimSock5Bean');
  if (this.fromTid !== null && this.fromTid !== undefined) {
    output.writeFieldBegin('fromTid', Thrift.Type.STRUCT, 1);
    this.fromTid.write(output);
    output.writeFieldEnd();
  }
  if (this.toTid !== null && this.toTid !== undefined) {
    output.writeFieldBegin('toTid', Thrift.Type.STRUCT, 2);
    this.toTid.write(output);
    output.writeFieldEnd();
  }
  if (this.addr !== null && this.addr !== undefined) {
    output.writeFieldBegin('addr', Thrift.Type.STRING, 3);
    output.writeString(this.addr);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 4);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.transport !== null && this.transport !== undefined) {
    output.writeFieldBegin('transport', Thrift.Type.I16, 5);
    output.writeI16(this.transport);
    output.writeFieldEnd();
  }
  if (this.pubId !== null && this.pubId !== undefined) {
    output.writeFieldBegin('pubId', Thrift.Type.STRING, 6);
    output.writeString(this.pubId);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter161 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter161)) {
        var viter162 = this.extraMap[kiter161];
        output.writeString(kiter161);
        output.writeString(viter162);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimSock5Bytes = function(args) {
  this.pubId = null;
  this.index = null;
  this.bytes = null;
  this.extraMap = null;
  if (args) {
    if (args.pubId !== undefined && args.pubId !== null) {
      this.pubId = args.pubId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pubId is unset!');
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field index is unset!');
    }
    if (args.bytes !== undefined && args.bytes !== null) {
      this.bytes = Thrift.copyList(args.bytes, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bytes is unset!');
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimSock5Bytes.prototype = {};
TimSock5Bytes.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pubId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.bytes = [];
        var _rtmp3164 = input.readListBegin();
        var _size163 = _rtmp3164.size || 0;
        for (var _i165 = 0; _i165 < _size163; ++_i165) {
          var elem166 = null;
          elem166 = input.readBinary().value;
          this.bytes.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3168 = input.readMapBegin();
        var _size167 = _rtmp3168.size || 0;
        for (var _i169 = 0; _i169 < _size167; ++_i169) {
          if (_i169 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key170 = null;
          var val171 = null;
          key170 = input.readString().value;
          val171 = input.readString().value;
          this.extraMap[key170] = val171;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimSock5Bytes.prototype.write = function(output) {
  output.writeStructBegin('TimSock5Bytes');
  if (this.pubId !== null && this.pubId !== undefined) {
    output.writeFieldBegin('pubId', Thrift.Type.STRING, 1);
    output.writeString(this.pubId);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 2);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.bytes !== null && this.bytes !== undefined) {
    output.writeFieldBegin('bytes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.bytes.length);
    for (var iter172 in this.bytes) {
      if (this.bytes.hasOwnProperty(iter172)) {
        iter172 = this.bytes[iter172];
        output.writeBinary(iter172);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter173 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter173)) {
        var viter174 = this.extraMap[kiter173];
        output.writeString(kiter173);
        output.writeString(viter174);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPage = function(args) {
  this.fromTimeStamp = null;
  this.toTimeStamp = null;
  this.limitCount = null;
  this.extraMap = null;
  if (args) {
    if (args.fromTimeStamp !== undefined && args.fromTimeStamp !== null) {
      this.fromTimeStamp = args.fromTimeStamp;
    }
    if (args.toTimeStamp !== undefined && args.toTimeStamp !== null) {
      this.toTimeStamp = args.toTimeStamp;
    }
    if (args.limitCount !== undefined && args.limitCount !== null) {
      this.limitCount = args.limitCount;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimPage.prototype = {};
TimPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fromTimeStamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toTimeStamp = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limitCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3176 = input.readMapBegin();
        var _size175 = _rtmp3176.size || 0;
        for (var _i177 = 0; _i177 < _size175; ++_i177) {
          if (_i177 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key178 = null;
          var val179 = null;
          key178 = input.readString().value;
          val179 = input.readString().value;
          this.extraMap[key178] = val179;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPage.prototype.write = function(output) {
  output.writeStructBegin('TimPage');
  if (this.fromTimeStamp !== null && this.fromTimeStamp !== undefined) {
    output.writeFieldBegin('fromTimeStamp', Thrift.Type.STRING, 1);
    output.writeString(this.fromTimeStamp);
    output.writeFieldEnd();
  }
  if (this.toTimeStamp !== null && this.toTimeStamp !== undefined) {
    output.writeFieldBegin('toTimeStamp', Thrift.Type.STRING, 2);
    output.writeString(this.toTimeStamp);
    output.writeFieldEnd();
  }
  if (this.limitCount !== null && this.limitCount !== undefined) {
    output.writeFieldBegin('limitCount', Thrift.Type.I32, 3);
    output.writeI32(this.limitCount);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter180 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter180)) {
        var viter181 = this.extraMap[kiter180];
        output.writeString(kiter180);
        output.writeString(viter181);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMessageIq = function(args) {
  this.tidlist = null;
  this.timPage = null;
  this.midlist = null;
  this.extraMap = null;
  if (args) {
    if (args.tidlist !== undefined && args.tidlist !== null) {
      this.tidlist = Thrift.copyList(args.tidlist, [null]);
    }
    if (args.timPage !== undefined && args.timPage !== null) {
      this.timPage = new TimPage(args.timPage);
    }
    if (args.midlist !== undefined && args.midlist !== null) {
      this.midlist = Thrift.copyList(args.midlist, [null]);
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimMessageIq.prototype = {};
TimMessageIq.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.tidlist = [];
        var _rtmp3183 = input.readListBegin();
        var _size182 = _rtmp3183.size || 0;
        for (var _i184 = 0; _i184 < _size182; ++_i184) {
          var elem185 = null;
          elem185 = input.readString().value;
          this.tidlist.push(elem185);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.timPage = new TimPage();
        this.timPage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.midlist = [];
        var _rtmp3187 = input.readListBegin();
        var _size186 = _rtmp3187.size || 0;
        for (var _i188 = 0; _i188 < _size186; ++_i188) {
          var elem189 = null;
          elem189 = input.readString().value;
          this.midlist.push(elem189);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3191 = input.readMapBegin();
        var _size190 = _rtmp3191.size || 0;
        for (var _i192 = 0; _i192 < _size190; ++_i192) {
          if (_i192 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key193 = null;
          var val194 = null;
          key193 = input.readString().value;
          val194 = input.readString().value;
          this.extraMap[key193] = val194;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMessageIq.prototype.write = function(output) {
  output.writeStructBegin('TimMessageIq');
  if (this.tidlist !== null && this.tidlist !== undefined) {
    output.writeFieldBegin('tidlist', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.tidlist.length);
    for (var iter195 in this.tidlist) {
      if (this.tidlist.hasOwnProperty(iter195)) {
        iter195 = this.tidlist[iter195];
        output.writeString(iter195);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timPage !== null && this.timPage !== undefined) {
    output.writeFieldBegin('timPage', Thrift.Type.STRUCT, 2);
    this.timPage.write(output);
    output.writeFieldEnd();
  }
  if (this.midlist !== null && this.midlist !== undefined) {
    output.writeFieldBegin('midlist', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.midlist.length);
    for (var iter196 in this.midlist) {
      if (this.midlist.hasOwnProperty(iter196)) {
        iter196 = this.midlist[iter196];
        output.writeString(iter196);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter197 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter197)) {
        var viter198 = this.extraMap[kiter197];
        output.writeString(kiter197);
        output.writeString(viter198);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimAuth = function(args) {
  this.domain = null;
  this.username = null;
  this.pwd = null;
  if (args) {
    if (args.domain !== undefined && args.domain !== null) {
      this.domain = args.domain;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.pwd !== undefined && args.pwd !== null) {
      this.pwd = args.pwd;
    }
  }
};
TimAuth.prototype = {};
TimAuth.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pwd = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimAuth.prototype.write = function(output) {
  output.writeStructBegin('TimAuth');
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 1);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.pwd !== null && this.pwd !== undefined) {
    output.writeFieldBegin('pwd', Thrift.Type.STRING, 3);
    output.writeString(this.pwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimMBeanList = function(args) {
  this.threadId = null;
  this.timMBeanList = null;
  this.reqType = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.timMBeanList !== undefined && args.timMBeanList !== null) {
      this.timMBeanList = Thrift.copyList(args.timMBeanList, [TimMBean]);
    }
    if (args.reqType !== undefined && args.reqType !== null) {
      this.reqType = args.reqType;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimMBeanList.prototype = {};
TimMBeanList.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.timMBeanList = [];
        var _rtmp3200 = input.readListBegin();
        var _size199 = _rtmp3200.size || 0;
        for (var _i201 = 0; _i201 < _size199; ++_i201) {
          var elem202 = null;
          elem202 = new TimMBean();
          elem202.read(input);
          this.timMBeanList.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reqType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3204 = input.readMapBegin();
        var _size203 = _rtmp3204.size || 0;
        for (var _i205 = 0; _i205 < _size203; ++_i205) {
          if (_i205 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key206 = null;
          var val207 = null;
          key206 = input.readString().value;
          val207 = input.readString().value;
          this.extraMap[key206] = val207;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimMBeanList.prototype.write = function(output) {
  output.writeStructBegin('TimMBeanList');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.timMBeanList !== null && this.timMBeanList !== undefined) {
    output.writeFieldBegin('timMBeanList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.timMBeanList.length);
    for (var iter208 in this.timMBeanList) {
      if (this.timMBeanList.hasOwnProperty(iter208)) {
        iter208 = this.timMBeanList[iter208];
        iter208.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reqType !== null && this.reqType !== undefined) {
    output.writeFieldBegin('reqType', Thrift.Type.STRING, 3);
    output.writeString(this.reqType);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter209 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter209)) {
        var viter210 = this.extraMap[kiter209];
        output.writeString(kiter209);
        output.writeString(viter210);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPBeanList = function(args) {
  this.threadId = null;
  this.timPBeanList = null;
  this.reqType = null;
  this.extraMap = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field threadId is unset!');
    }
    if (args.timPBeanList !== undefined && args.timPBeanList !== null) {
      this.timPBeanList = Thrift.copyList(args.timPBeanList, [TimPBean]);
    }
    if (args.reqType !== undefined && args.reqType !== null) {
      this.reqType = args.reqType;
    }
    if (args.extraMap !== undefined && args.extraMap !== null) {
      this.extraMap = Thrift.copyMap(args.extraMap, [null]);
    }
  }
};
TimPBeanList.prototype = {};
TimPBeanList.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.timPBeanList = [];
        var _rtmp3212 = input.readListBegin();
        var _size211 = _rtmp3212.size || 0;
        for (var _i213 = 0; _i213 < _size211; ++_i213) {
          var elem214 = null;
          elem214 = new TimPBean();
          elem214.read(input);
          this.timPBeanList.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reqType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        this.extraMap = {};
        var _rtmp3216 = input.readMapBegin();
        var _size215 = _rtmp3216.size || 0;
        for (var _i217 = 0; _i217 < _size215; ++_i217) {
          if (_i217 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key218 = null;
          var val219 = null;
          key218 = input.readString().value;
          val219 = input.readString().value;
          this.extraMap[key218] = val219;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPBeanList.prototype.write = function(output) {
  output.writeStructBegin('TimPBeanList');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.timPBeanList !== null && this.timPBeanList !== undefined) {
    output.writeFieldBegin('timPBeanList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.timPBeanList.length);
    for (var iter220 in this.timPBeanList) {
      if (this.timPBeanList.hasOwnProperty(iter220)) {
        iter220 = this.timPBeanList[iter220];
        iter220.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reqType !== null && this.reqType !== undefined) {
    output.writeFieldBegin('reqType', Thrift.Type.STRING, 3);
    output.writeString(this.reqType);
    output.writeFieldEnd();
  }
  if (this.extraMap !== null && this.extraMap !== undefined) {
    output.writeFieldBegin('extraMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraMap));
    for (var kiter221 in this.extraMap) {
      if (this.extraMap.hasOwnProperty(kiter221)) {
        var viter222 = this.extraMap[kiter221];
        output.writeString(kiter221);
        output.writeString(viter222);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimPropertyBean = function(args) {
  this.threadId = null;
  this.interflow = null;
  this.tls = null;
  if (args) {
    if (args.threadId !== undefined && args.threadId !== null) {
      this.threadId = args.threadId;
    }
    if (args.interflow !== undefined && args.interflow !== null) {
      this.interflow = args.interflow;
    }
    if (args.tls !== undefined && args.tls !== null) {
      this.tls = args.tls;
    }
  }
};
TimPropertyBean.prototype = {};
TimPropertyBean.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.threadId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.interflow = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tls = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimPropertyBean.prototype.write = function(output) {
  output.writeStructBegin('TimPropertyBean');
  if (this.threadId !== null && this.threadId !== undefined) {
    output.writeFieldBegin('threadId', Thrift.Type.STRING, 1);
    output.writeString(this.threadId);
    output.writeFieldEnd();
  }
  if (this.interflow !== null && this.interflow !== undefined) {
    output.writeFieldBegin('interflow', Thrift.Type.STRING, 2);
    output.writeString(this.interflow);
    output.writeFieldEnd();
  }
  if (this.tls !== null && this.tls !== undefined) {
    output.writeFieldBegin('tls', Thrift.Type.STRING, 3);
    output.writeString(this.tls);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

protocolversion = 4;
protocolversionName = '1.1.0';
TIM_SC_SUCCESS = '200';
TIM_SC_FAILED = '400';
