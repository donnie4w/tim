<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimRoom
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'tid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        2 => array(
            'var' => 'founderTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        3 => array(
            'var' => 'HostsTid',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Tid',
                ),
        ),
        4 => array(
            'var' => 'membersTid',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Tid',
                ),
        ),
        5 => array(
            'var' => 'headurl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'roomName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'desc',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'createTime',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimTime',
        ),
        9 => array(
            'var' => 'extraList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimNode',
                ),
        ),
        10 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * 房间Tid
     * 
     * @var \Tid
     */
    public $tid = null;
    /**
     * 创建人Tid
     * 
     * @var \Tid
     */
    public $founderTid = null;
    /**
     * 主持人Tid
     * 
     * @var \Tid[]
     */
    public $HostsTid = null;
    /**
     * memberTid
     * 
     * @var \Tid[]
     */
    public $membersTid = null;
    /**
     * 头像地址 http://xxx.jpg
     * 
     * @var string
     */
    public $headurl = null;
    /**
     * 房间名称
     * 
     * @var string
     */
    public $roomName = null;
    /**
     * 房间说明
     * 
     * @var string
     */
    public $desc = null;
    /**
     * 房间创建时间
     * 
     * @var \TimTime
     */
    public $createTime = null;
    /**
     * 扩展字段
     * 
     * @var \TimNode[]
     */
    public $extraList = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['tid'])) {
                $this->tid = $vals['tid'];
            }
            if (isset($vals['founderTid'])) {
                $this->founderTid = $vals['founderTid'];
            }
            if (isset($vals['HostsTid'])) {
                $this->HostsTid = $vals['HostsTid'];
            }
            if (isset($vals['membersTid'])) {
                $this->membersTid = $vals['membersTid'];
            }
            if (isset($vals['headurl'])) {
                $this->headurl = $vals['headurl'];
            }
            if (isset($vals['roomName'])) {
                $this->roomName = $vals['roomName'];
            }
            if (isset($vals['desc'])) {
                $this->desc = $vals['desc'];
            }
            if (isset($vals['createTime'])) {
                $this->createTime = $vals['createTime'];
            }
            if (isset($vals['extraList'])) {
                $this->extraList = $vals['extraList'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimRoom';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->tid = new \Tid();
                        $xfer += $this->tid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->founderTid = new \Tid();
                        $xfer += $this->founderTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->HostsTid = array();
                        $_size87 = 0;
                        $_etype90 = 0;
                        $xfer += $input->readListBegin($_etype90, $_size87);
                        for ($_i91 = 0; $_i91 < $_size87; ++$_i91) {
                            $elem92 = null;
                            $elem92 = new \Tid();
                            $xfer += $elem92->read($input);
                            $this->HostsTid []= $elem92;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->membersTid = array();
                        $_size93 = 0;
                        $_etype96 = 0;
                        $xfer += $input->readListBegin($_etype96, $_size93);
                        for ($_i97 = 0; $_i97 < $_size93; ++$_i97) {
                            $elem98 = null;
                            $elem98 = new \Tid();
                            $xfer += $elem98->read($input);
                            $this->membersTid []= $elem98;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->headurl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->roomName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->desc);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->createTime = new \TimTime();
                        $xfer += $this->createTime->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->extraList = array();
                        $_size99 = 0;
                        $_etype102 = 0;
                        $xfer += $input->readListBegin($_etype102, $_size99);
                        for ($_i103 = 0; $_i103 < $_size99; ++$_i103) {
                            $elem104 = null;
                            $elem104 = new \TimNode();
                            $xfer += $elem104->read($input);
                            $this->extraList []= $elem104;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size105 = 0;
                        $_ktype106 = 0;
                        $_vtype107 = 0;
                        $xfer += $input->readMapBegin($_ktype106, $_vtype107, $_size105);
                        for ($_i109 = 0; $_i109 < $_size105; ++$_i109) {
                            $key110 = '';
                            $val111 = '';
                            $xfer += $input->readString($key110);
                            $xfer += $input->readString($val111);
                            $this->extraMap[$key110] = $val111;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimRoom');
        if ($this->tid !== null) {
            if (!is_object($this->tid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
            $xfer += $this->tid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->founderTid !== null) {
            if (!is_object($this->founderTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('founderTid', TType::STRUCT, 2);
            $xfer += $this->founderTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->HostsTid !== null) {
            if (!is_array($this->HostsTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('HostsTid', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->HostsTid));
            foreach ($this->HostsTid as $iter112) {
                $xfer += $iter112->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->membersTid !== null) {
            if (!is_array($this->membersTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('membersTid', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->membersTid));
            foreach ($this->membersTid as $iter113) {
                $xfer += $iter113->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headurl !== null) {
            $xfer += $output->writeFieldBegin('headurl', TType::STRING, 5);
            $xfer += $output->writeString($this->headurl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->roomName !== null) {
            $xfer += $output->writeFieldBegin('roomName', TType::STRING, 6);
            $xfer += $output->writeString($this->roomName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->desc !== null) {
            $xfer += $output->writeFieldBegin('desc', TType::STRING, 7);
            $xfer += $output->writeString($this->desc);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->createTime !== null) {
            if (!is_object($this->createTime)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('createTime', TType::STRUCT, 8);
            $xfer += $this->createTime->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraList !== null) {
            if (!is_array($this->extraList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraList', TType::LST, 9);
            $output->writeListBegin(TType::STRUCT, count($this->extraList));
            foreach ($this->extraList as $iter114) {
                $xfer += $iter114->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 10);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter115 => $viter116) {
                $xfer += $output->writeString($kiter115);
                $xfer += $output->writeString($viter116);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
