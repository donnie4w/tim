<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimMBean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'threadId',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'mid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'fromTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        4 => array(
            'var' => 'toTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        5 => array(
            'var' => 'body',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'msgType',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        8 => array(
            'var' => 'offline',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimTime',
        ),
        9 => array(
            'var' => 'leaguerTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        10 => array(
            'var' => 'extraList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimNode',
                ),
        ),
        11 => array(
            'var' => 'timestamp',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'error',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimError',
        ),
        13 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        14 => array(
            'var' => 'readstatus',
            'isRequired' => false,
            'type' => TType::I16,
        ),
    );

    /**
     * 线程id
     * 
     * @var string
     */
    public $threadId = null;
    /**
     * 消息id号
     * 
     * @var string
     */
    public $mid = null;
    /**
     * 来源Tid
     * 
     * @var \Tid
     */
    public $fromTid = null;
    /**
     * 目标Tid
     * 
     * @var \Tid
     */
    public $toTid = null;
    /**
     * 信息内容
     * 
     * @var string
     */
    public $body = null;
    /**
     * normal：类似于email，主要特点是不要求响应；
     * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
     * groupchat：类似于聊天室里的群聊；
     * headline：用于发送alert和notification；
     * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
     * 
     * @var string
     */
    public $type = null;
    /**
     * 消息类型  1 文字 2 图片 3 语音 4视频 5混合
     * 
     * @var int
     */
    public $msgType = null;
    /**
     * 是否离线信息
     * 
     * @var \TimTime
     */
    public $offline = null;
    /**
     * 成员Tid   群聊时信息发送者Tid
     * 
     * @var \Tid
     */
    public $leaguerTid = null;
    /**
     * 扩展字段
     * 
     * @var \TimNode[]
     */
    public $extraList = null;
    /**
     * 服务器发送信息时间戳(毫秒)
     * 
     * @var string
     */
    public $timestamp = null;
    /**
     * 错误码
     * 
     * @var \TimError
     */
    public $error = null;
    /**
     * @var array
     */
    public $extraMap = null;
    /**
     * 0未读  1已读
     * 
     * @var int
     */
    public $readstatus = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['threadId'])) {
                $this->threadId = $vals['threadId'];
            }
            if (isset($vals['mid'])) {
                $this->mid = $vals['mid'];
            }
            if (isset($vals['fromTid'])) {
                $this->fromTid = $vals['fromTid'];
            }
            if (isset($vals['toTid'])) {
                $this->toTid = $vals['toTid'];
            }
            if (isset($vals['body'])) {
                $this->body = $vals['body'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['msgType'])) {
                $this->msgType = $vals['msgType'];
            }
            if (isset($vals['offline'])) {
                $this->offline = $vals['offline'];
            }
            if (isset($vals['leaguerTid'])) {
                $this->leaguerTid = $vals['leaguerTid'];
            }
            if (isset($vals['extraList'])) {
                $this->extraList = $vals['extraList'];
            }
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['error'])) {
                $this->error = $vals['error'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
            if (isset($vals['readstatus'])) {
                $this->readstatus = $vals['readstatus'];
            }
        }
    }

    public function getName()
    {
        return 'TimMBean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->threadId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->fromTid = new \Tid();
                        $xfer += $this->fromTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->toTid = new \Tid();
                        $xfer += $this->toTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->body);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->msgType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->offline = new \TimTime();
                        $xfer += $this->offline->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->leaguerTid = new \Tid();
                        $xfer += $this->leaguerTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->extraList = array();
                        $_size133 = 0;
                        $_etype136 = 0;
                        $xfer += $input->readListBegin($_etype136, $_size133);
                        for ($_i137 = 0; $_i137 < $_size133; ++$_i137) {
                            $elem138 = null;
                            $elem138 = new \TimNode();
                            $xfer += $elem138->read($input);
                            $this->extraList []= $elem138;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->timestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->error = new \TimError();
                        $xfer += $this->error->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size139 = 0;
                        $_ktype140 = 0;
                        $_vtype141 = 0;
                        $xfer += $input->readMapBegin($_ktype140, $_vtype141, $_size139);
                        for ($_i143 = 0; $_i143 < $_size139; ++$_i143) {
                            $key144 = '';
                            $val145 = '';
                            $xfer += $input->readString($key144);
                            $xfer += $input->readString($val145);
                            $this->extraMap[$key144] = $val145;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->readstatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimMBean');
        if ($this->threadId !== null) {
            $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
            $xfer += $output->writeString($this->threadId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mid !== null) {
            $xfer += $output->writeFieldBegin('mid', TType::STRING, 2);
            $xfer += $output->writeString($this->mid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fromTid !== null) {
            if (!is_object($this->fromTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 3);
            $xfer += $this->fromTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toTid !== null) {
            if (!is_object($this->toTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 4);
            $xfer += $this->toTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->body !== null) {
            $xfer += $output->writeFieldBegin('body', TType::STRING, 5);
            $xfer += $output->writeString($this->body);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::STRING, 6);
            $xfer += $output->writeString($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->msgType !== null) {
            $xfer += $output->writeFieldBegin('msgType', TType::I16, 7);
            $xfer += $output->writeI16($this->msgType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->offline !== null) {
            if (!is_object($this->offline)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('offline', TType::STRUCT, 8);
            $xfer += $this->offline->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->leaguerTid !== null) {
            if (!is_object($this->leaguerTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('leaguerTid', TType::STRUCT, 9);
            $xfer += $this->leaguerTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraList !== null) {
            if (!is_array($this->extraList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraList', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->extraList));
            foreach ($this->extraList as $iter146) {
                $xfer += $iter146->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timestamp !== null) {
            $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 11);
            $xfer += $output->writeString($this->timestamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->error !== null) {
            if (!is_object($this->error)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('error', TType::STRUCT, 12);
            $xfer += $this->error->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 13);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter147 => $viter148) {
                $xfer += $output->writeString($kiter147);
                $xfer += $output->writeString($viter148);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->readstatus !== null) {
            $xfer += $output->writeFieldBegin('readstatus', TType::I16, 14);
            $xfer += $output->writeI16($this->readstatus);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
