<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimHBean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'chl',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'platform',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        3 => array(
            'var' => 'version',
            'isRequired' => true,
            'type' => TType::I16,
        ),
    );

    /**
     * 渠道
     * 
     * @var int
     */
    public $chl = null;
    /**
     * 平台
     * 
     * @var int
     */
    public $platform = null;
    /**
     * version 客户端协议版本
     * 
     * @var int
     */
    public $version = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['chl'])) {
                $this->chl = $vals['chl'];
            }
            if (isset($vals['platform'])) {
                $this->platform = $vals['platform'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
        }
    }

    public function getName()
    {
        return 'TimHBean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->chl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->platform);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimHBean');
        if ($this->chl !== null) {
            $xfer += $output->writeFieldBegin('chl', TType::I32, 1);
            $xfer += $output->writeI32($this->chl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->platform !== null) {
            $xfer += $output->writeFieldBegin('platform', TType::I32, 2);
            $xfer += $output->writeI32($this->platform);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I16, 3);
            $xfer += $output->writeI16($this->version);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
