<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimParam
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'timestamp',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'version',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        3 => array(
            'var' => 'lang',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'extraList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimNode',
                ),
        ),
        5 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'interflow',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'tls',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * 服务器时间
     * 
     * @var string
     */
    public $timestamp = null;
    /**
     * 版本
     * 
     * @var int
     */
    public $version = null;
    /**
     * 语言
     * 
     * @var string
     */
    public $lang = null;
    /**
     * 附加信息
     * 
     * @var \TimNode[]
     */
    public $extraList = null;
    /**
     * @var array
     */
    public $extraMap = null;
    /**
     * 消息合流
     * 
     * @var string
     */
    public $interflow = null;
    /**
     * tls
     * 
     * @var string
     */
    public $tls = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['timestamp'])) {
                $this->timestamp = $vals['timestamp'];
            }
            if (isset($vals['version'])) {
                $this->version = $vals['version'];
            }
            if (isset($vals['lang'])) {
                $this->lang = $vals['lang'];
            }
            if (isset($vals['extraList'])) {
                $this->extraList = $vals['extraList'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
            if (isset($vals['interflow'])) {
                $this->interflow = $vals['interflow'];
            }
            if (isset($vals['tls'])) {
                $this->tls = $vals['tls'];
            }
        }
    }

    public function getName()
    {
        return 'TimParam';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->timestamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->version);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->lang);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->extraList = array();
                        $_size16 = 0;
                        $_etype19 = 0;
                        $xfer += $input->readListBegin($_etype19, $_size16);
                        for ($_i20 = 0; $_i20 < $_size16; ++$_i20) {
                            $elem21 = null;
                            $elem21 = new \TimNode();
                            $xfer += $elem21->read($input);
                            $this->extraList []= $elem21;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size22 = 0;
                        $_ktype23 = 0;
                        $_vtype24 = 0;
                        $xfer += $input->readMapBegin($_ktype23, $_vtype24, $_size22);
                        for ($_i26 = 0; $_i26 < $_size22; ++$_i26) {
                            $key27 = '';
                            $val28 = '';
                            $xfer += $input->readString($key27);
                            $xfer += $input->readString($val28);
                            $this->extraMap[$key27] = $val28;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->interflow);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->tls);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimParam');
        if ($this->timestamp !== null) {
            $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 1);
            $xfer += $output->writeString($this->timestamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->version !== null) {
            $xfer += $output->writeFieldBegin('version', TType::I16, 2);
            $xfer += $output->writeI16($this->version);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->lang !== null) {
            $xfer += $output->writeFieldBegin('lang', TType::STRING, 3);
            $xfer += $output->writeString($this->lang);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraList !== null) {
            if (!is_array($this->extraList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraList', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->extraList));
            foreach ($this->extraList as $iter29) {
                $xfer += $iter29->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 5);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter30 => $viter31) {
                $xfer += $output->writeString($kiter30);
                $xfer += $output->writeString($viter31);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->interflow !== null) {
            $xfer += $output->writeFieldBegin('interflow', TType::STRING, 6);
            $xfer += $output->writeString($this->interflow);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tls !== null) {
            $xfer += $output->writeFieldBegin('tls', TType::STRING, 7);
            $xfer += $output->writeString($this->tls);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
