<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimPBeanList
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'threadId',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'timPBeanList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimPBean',
                ),
        ),
        3 => array(
            'var' => 'reqType',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $threadId = null;
    /**
     * 状态信息列表
     * 
     * @var \TimPBean[]
     */
    public $timPBeanList = null;
    /**
     * 类型
     * 
     * @var string
     */
    public $reqType = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['threadId'])) {
                $this->threadId = $vals['threadId'];
            }
            if (isset($vals['timPBeanList'])) {
                $this->timPBeanList = $vals['timPBeanList'];
            }
            if (isset($vals['reqType'])) {
                $this->reqType = $vals['reqType'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimPBeanList';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->threadId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->timPBeanList = array();
                        $_size281 = 0;
                        $_etype284 = 0;
                        $xfer += $input->readListBegin($_etype284, $_size281);
                        for ($_i285 = 0; $_i285 < $_size281; ++$_i285) {
                            $elem286 = null;
                            $elem286 = new \TimPBean();
                            $xfer += $elem286->read($input);
                            $this->timPBeanList []= $elem286;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->reqType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size287 = 0;
                        $_ktype288 = 0;
                        $_vtype289 = 0;
                        $xfer += $input->readMapBegin($_ktype288, $_vtype289, $_size287);
                        for ($_i291 = 0; $_i291 < $_size287; ++$_i291) {
                            $key292 = '';
                            $val293 = '';
                            $xfer += $input->readString($key292);
                            $xfer += $input->readString($val293);
                            $this->extraMap[$key292] = $val293;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimPBeanList');
        if ($this->threadId !== null) {
            $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
            $xfer += $output->writeString($this->threadId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timPBeanList !== null) {
            if (!is_array($this->timPBeanList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('timPBeanList', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->timPBeanList));
            foreach ($this->timPBeanList as $iter294) {
                $xfer += $iter294->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reqType !== null) {
            $xfer += $output->writeFieldBegin('reqType', TType::STRING, 3);
            $xfer += $output->writeString($this->reqType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter295 => $viter296) {
                $xfer += $output->writeString($kiter295);
                $xfer += $output->writeString($viter296);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
