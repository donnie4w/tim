<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimUserBean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'tid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        2 => array(
            'var' => 'nickname',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'remarkname',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'brithday',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'gender',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        6 => array(
            'var' => 'headurl',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'area',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimArea',
        ),
        8 => array(
            'var' => 'headbyte',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'photoBytes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        10 => array(
            'var' => 'extraList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimNode',
                ),
        ),
        11 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * 用户bean
     * 
     * @var \Tid
     */
    public $tid = null;
    /**
     * 昵称
     * 
     * @var string
     */
    public $nickname = null;
    /**
     * 备注名称
     * 
     * @var string
     */
    public $remarkname = null;
    /**
     * 生日     2000-01-01
     * 
     * @var string
     */
    public $brithday = null;
    /**
     * 性别  自行约定 如 ：  0不知，1男，2女
     * 
     * @var int
     */
    public $gender = null;
    /**
     * 头像地址 http://xxx.jpg
     * 
     * @var string
     */
    public $headurl = null;
    /**
     * 地区
     * 
     * @var \TimArea
     */
    public $area = null;
    /**
     * 头像
     * 
     * @var string
     */
    public $headbyte = null;
    /**
     * 其他图片
     * 
     * @var string[]
     */
    public $photoBytes = null;
    /**
     * 扩展字段
     * 
     * @var \TimNode[]
     */
    public $extraList = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['tid'])) {
                $this->tid = $vals['tid'];
            }
            if (isset($vals['nickname'])) {
                $this->nickname = $vals['nickname'];
            }
            if (isset($vals['remarkname'])) {
                $this->remarkname = $vals['remarkname'];
            }
            if (isset($vals['brithday'])) {
                $this->brithday = $vals['brithday'];
            }
            if (isset($vals['gender'])) {
                $this->gender = $vals['gender'];
            }
            if (isset($vals['headurl'])) {
                $this->headurl = $vals['headurl'];
            }
            if (isset($vals['area'])) {
                $this->area = $vals['area'];
            }
            if (isset($vals['headbyte'])) {
                $this->headbyte = $vals['headbyte'];
            }
            if (isset($vals['photoBytes'])) {
                $this->photoBytes = $vals['photoBytes'];
            }
            if (isset($vals['extraList'])) {
                $this->extraList = $vals['extraList'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimUserBean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->tid = new \Tid();
                        $xfer += $this->tid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->nickname);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->remarkname);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->brithday);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->gender);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->headurl);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->area = new \TimArea();
                        $xfer += $this->area->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->headbyte);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->photoBytes = array();
                        $_size64 = 0;
                        $_etype67 = 0;
                        $xfer += $input->readListBegin($_etype67, $_size64);
                        for ($_i68 = 0; $_i68 < $_size64; ++$_i68) {
                            $elem69 = null;
                            $xfer += $input->readString($elem69);
                            $this->photoBytes []= $elem69;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->extraList = array();
                        $_size70 = 0;
                        $_etype73 = 0;
                        $xfer += $input->readListBegin($_etype73, $_size70);
                        for ($_i74 = 0; $_i74 < $_size70; ++$_i74) {
                            $elem75 = null;
                            $elem75 = new \TimNode();
                            $xfer += $elem75->read($input);
                            $this->extraList []= $elem75;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size76 = 0;
                        $_ktype77 = 0;
                        $_vtype78 = 0;
                        $xfer += $input->readMapBegin($_ktype77, $_vtype78, $_size76);
                        for ($_i80 = 0; $_i80 < $_size76; ++$_i80) {
                            $key81 = '';
                            $val82 = '';
                            $xfer += $input->readString($key81);
                            $xfer += $input->readString($val82);
                            $this->extraMap[$key81] = $val82;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimUserBean');
        if ($this->tid !== null) {
            if (!is_object($this->tid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 1);
            $xfer += $this->tid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->nickname !== null) {
            $xfer += $output->writeFieldBegin('nickname', TType::STRING, 2);
            $xfer += $output->writeString($this->nickname);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->remarkname !== null) {
            $xfer += $output->writeFieldBegin('remarkname', TType::STRING, 3);
            $xfer += $output->writeString($this->remarkname);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->brithday !== null) {
            $xfer += $output->writeFieldBegin('brithday', TType::STRING, 4);
            $xfer += $output->writeString($this->brithday);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->gender !== null) {
            $xfer += $output->writeFieldBegin('gender', TType::I16, 5);
            $xfer += $output->writeI16($this->gender);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headurl !== null) {
            $xfer += $output->writeFieldBegin('headurl', TType::STRING, 6);
            $xfer += $output->writeString($this->headurl);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->area !== null) {
            if (!is_object($this->area)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('area', TType::STRUCT, 7);
            $xfer += $this->area->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->headbyte !== null) {
            $xfer += $output->writeFieldBegin('headbyte', TType::STRING, 8);
            $xfer += $output->writeString($this->headbyte);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->photoBytes !== null) {
            if (!is_array($this->photoBytes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('photoBytes', TType::LST, 9);
            $output->writeListBegin(TType::STRING, count($this->photoBytes));
            foreach ($this->photoBytes as $iter83) {
                $xfer += $output->writeString($iter83);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraList !== null) {
            if (!is_array($this->extraList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraList', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->extraList));
            foreach ($this->extraList as $iter84) {
                $xfer += $iter84->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 11);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter85 => $viter86) {
                $xfer += $output->writeString($kiter85);
                $xfer += $output->writeString($viter86);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
