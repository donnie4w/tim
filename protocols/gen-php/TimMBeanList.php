<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimMBeanList
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'threadId',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'timMBeanList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimMBean',
                ),
        ),
        3 => array(
            'var' => 'reqType',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $threadId = null;
    /**
     * 信息列表
     * 
     * @var \TimMBean[]
     */
    public $timMBeanList = null;
    /**
     * 类型
     * 
     * @var string
     */
    public $reqType = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['threadId'])) {
                $this->threadId = $vals['threadId'];
            }
            if (isset($vals['timMBeanList'])) {
                $this->timMBeanList = $vals['timMBeanList'];
            }
            if (isset($vals['reqType'])) {
                $this->reqType = $vals['reqType'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimMBeanList';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->threadId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->timMBeanList = array();
                        $_size265 = 0;
                        $_etype268 = 0;
                        $xfer += $input->readListBegin($_etype268, $_size265);
                        for ($_i269 = 0; $_i269 < $_size265; ++$_i269) {
                            $elem270 = null;
                            $elem270 = new \TimMBean();
                            $xfer += $elem270->read($input);
                            $this->timMBeanList []= $elem270;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->reqType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size271 = 0;
                        $_ktype272 = 0;
                        $_vtype273 = 0;
                        $xfer += $input->readMapBegin($_ktype272, $_vtype273, $_size271);
                        for ($_i275 = 0; $_i275 < $_size271; ++$_i275) {
                            $key276 = '';
                            $val277 = '';
                            $xfer += $input->readString($key276);
                            $xfer += $input->readString($val277);
                            $this->extraMap[$key276] = $val277;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimMBeanList');
        if ($this->threadId !== null) {
            $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
            $xfer += $output->writeString($this->threadId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timMBeanList !== null) {
            if (!is_array($this->timMBeanList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('timMBeanList', TType::LST, 2);
            $output->writeListBegin(TType::STRUCT, count($this->timMBeanList));
            foreach ($this->timMBeanList as $iter278) {
                $xfer += $iter278->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->reqType !== null) {
            $xfer += $output->writeFieldBegin('reqType', TType::STRING, 3);
            $xfer += $output->writeString($this->reqType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter279 => $viter280) {
                $xfer += $output->writeString($kiter279);
                $xfer += $output->writeString($viter280);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
