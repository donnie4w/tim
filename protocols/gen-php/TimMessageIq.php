<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimMessageIq
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'tidlist',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        2 => array(
            'var' => 'timPage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimPage',
        ),
        3 => array(
            'var' => 'midlist',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * tid集合
     * 
     * @var string[]
     */
    public $tidlist = null;
    /**
     * 分页
     * 
     * @var \TimPage
     */
    public $timPage = null;
    /**
     * mid集合
     * 
     * @var string[]
     */
    public $midlist = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['tidlist'])) {
                $this->tidlist = $vals['tidlist'];
            }
            if (isset($vals['timPage'])) {
                $this->timPage = $vals['timPage'];
            }
            if (isset($vals['midlist'])) {
                $this->midlist = $vals['midlist'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimMessageIq';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->tidlist = array();
                        $_size242 = 0;
                        $_etype245 = 0;
                        $xfer += $input->readListBegin($_etype245, $_size242);
                        for ($_i246 = 0; $_i246 < $_size242; ++$_i246) {
                            $elem247 = null;
                            $xfer += $input->readString($elem247);
                            $this->tidlist []= $elem247;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->timPage = new \TimPage();
                        $xfer += $this->timPage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->midlist = array();
                        $_size248 = 0;
                        $_etype251 = 0;
                        $xfer += $input->readListBegin($_etype251, $_size248);
                        for ($_i252 = 0; $_i252 < $_size248; ++$_i252) {
                            $elem253 = null;
                            $xfer += $input->readString($elem253);
                            $this->midlist []= $elem253;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size254 = 0;
                        $_ktype255 = 0;
                        $_vtype256 = 0;
                        $xfer += $input->readMapBegin($_ktype255, $_vtype256, $_size254);
                        for ($_i258 = 0; $_i258 < $_size254; ++$_i258) {
                            $key259 = '';
                            $val260 = '';
                            $xfer += $input->readString($key259);
                            $xfer += $input->readString($val260);
                            $this->extraMap[$key259] = $val260;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimMessageIq');
        if ($this->tidlist !== null) {
            if (!is_array($this->tidlist)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tidlist', TType::LST, 1);
            $output->writeListBegin(TType::STRING, count($this->tidlist));
            foreach ($this->tidlist as $iter261) {
                $xfer += $output->writeString($iter261);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timPage !== null) {
            if (!is_object($this->timPage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('timPage', TType::STRUCT, 2);
            $xfer += $this->timPage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->midlist !== null) {
            if (!is_array($this->midlist)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('midlist', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->midlist));
            foreach ($this->midlist as $iter262) {
                $xfer += $output->writeString($iter262);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter263 => $viter264) {
                $xfer += $output->writeString($kiter263);
                $xfer += $output->writeString($viter264);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
