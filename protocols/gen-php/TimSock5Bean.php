<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimSock5Bean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'fromTid',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        2 => array(
            'var' => 'toTid',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        3 => array(
            'var' => 'addr',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'port',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'transport',
            'isRequired' => true,
            'type' => TType::I16,
        ),
        6 => array(
            'var' => 'pubId',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var \Tid
     */
    public $fromTid = null;
    /**
     * @var \Tid
     */
    public $toTid = null;
    /**
     * ip地址
     * 
     * @var string
     */
    public $addr = null;
    /**
     * 端口
     * 
     * @var int
     */
    public $port = null;
    /**
     * 传输类型  1:tcp 2:udp
     * 
     * @var int
     */
    public $transport = null;
    /**
     * 发布id 通过发布id 可以连接两个发布id相同的用户
     * 
     * @var string
     */
    public $pubId = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['fromTid'])) {
                $this->fromTid = $vals['fromTid'];
            }
            if (isset($vals['toTid'])) {
                $this->toTid = $vals['toTid'];
            }
            if (isset($vals['addr'])) {
                $this->addr = $vals['addr'];
            }
            if (isset($vals['port'])) {
                $this->port = $vals['port'];
            }
            if (isset($vals['transport'])) {
                $this->transport = $vals['transport'];
            }
            if (isset($vals['pubId'])) {
                $this->pubId = $vals['pubId'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimSock5Bean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->fromTid = new \Tid();
                        $xfer += $this->fromTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->toTid = new \Tid();
                        $xfer += $this->toTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->addr);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->port);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->transport);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->pubId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size208 = 0;
                        $_ktype209 = 0;
                        $_vtype210 = 0;
                        $xfer += $input->readMapBegin($_ktype209, $_vtype210, $_size208);
                        for ($_i212 = 0; $_i212 < $_size208; ++$_i212) {
                            $key213 = '';
                            $val214 = '';
                            $xfer += $input->readString($key213);
                            $xfer += $input->readString($val214);
                            $this->extraMap[$key213] = $val214;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimSock5Bean');
        if ($this->fromTid !== null) {
            if (!is_object($this->fromTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 1);
            $xfer += $this->fromTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toTid !== null) {
            if (!is_object($this->toTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 2);
            $xfer += $this->toTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->addr !== null) {
            $xfer += $output->writeFieldBegin('addr', TType::STRING, 3);
            $xfer += $output->writeString($this->addr);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->port !== null) {
            $xfer += $output->writeFieldBegin('port', TType::I32, 4);
            $xfer += $output->writeI32($this->port);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->transport !== null) {
            $xfer += $output->writeFieldBegin('transport', TType::I16, 5);
            $xfer += $output->writeI16($this->transport);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->pubId !== null) {
            $xfer += $output->writeFieldBegin('pubId', TType::STRING, 6);
            $xfer += $output->writeString($this->pubId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 7);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter215 => $viter216) {
                $xfer += $output->writeString($kiter215);
                $xfer += $output->writeString($viter216);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
