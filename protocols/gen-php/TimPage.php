<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimPage
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'fromTimeStamp',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'toTimeStamp',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'limitCount',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * 时间上
     * 
     * @var string
     */
    public $fromTimeStamp = null;
    /**
     * 时间下
     * 
     * @var string
     */
    public $toTimeStamp = null;
    /**
     * 条数
     * 
     * @var int
     */
    public $limitCount = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['fromTimeStamp'])) {
                $this->fromTimeStamp = $vals['fromTimeStamp'];
            }
            if (isset($vals['toTimeStamp'])) {
                $this->toTimeStamp = $vals['toTimeStamp'];
            }
            if (isset($vals['limitCount'])) {
                $this->limitCount = $vals['limitCount'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimPage';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->fromTimeStamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->toTimeStamp);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->limitCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size233 = 0;
                        $_ktype234 = 0;
                        $_vtype235 = 0;
                        $xfer += $input->readMapBegin($_ktype234, $_vtype235, $_size233);
                        for ($_i237 = 0; $_i237 < $_size233; ++$_i237) {
                            $key238 = '';
                            $val239 = '';
                            $xfer += $input->readString($key238);
                            $xfer += $input->readString($val239);
                            $this->extraMap[$key238] = $val239;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimPage');
        if ($this->fromTimeStamp !== null) {
            $xfer += $output->writeFieldBegin('fromTimeStamp', TType::STRING, 1);
            $xfer += $output->writeString($this->fromTimeStamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toTimeStamp !== null) {
            $xfer += $output->writeFieldBegin('toTimeStamp', TType::STRING, 2);
            $xfer += $output->writeString($this->toTimeStamp);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->limitCount !== null) {
            $xfer += $output->writeFieldBegin('limitCount', TType::I32, 3);
            $xfer += $output->writeI32($this->limitCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter240 => $viter241) {
                $xfer += $output->writeString($kiter240);
                $xfer += $output->writeString($viter241);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
