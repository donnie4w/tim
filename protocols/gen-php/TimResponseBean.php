<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimResponseBean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'threadId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'error',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimError',
        ),
        3 => array(
            'var' => 'extraList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimNode',
                ),
        ),
        4 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var string
     */
    public $threadId = null;
    /**
     * 错误码
     * 
     * @var \TimError
     */
    public $error = null;
    /**
     * 附加信息
     * 
     * @var \TimNode[]
     */
    public $extraList = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['threadId'])) {
                $this->threadId = $vals['threadId'];
            }
            if (isset($vals['error'])) {
                $this->error = $vals['error'];
            }
            if (isset($vals['extraList'])) {
                $this->extraList = $vals['extraList'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimResponseBean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->threadId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->error = new \TimError();
                        $xfer += $this->error->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->extraList = array();
                        $_size192 = 0;
                        $_etype195 = 0;
                        $xfer += $input->readListBegin($_etype195, $_size192);
                        for ($_i196 = 0; $_i196 < $_size192; ++$_i196) {
                            $elem197 = null;
                            $elem197 = new \TimNode();
                            $xfer += $elem197->read($input);
                            $this->extraList []= $elem197;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size198 = 0;
                        $_ktype199 = 0;
                        $_vtype200 = 0;
                        $xfer += $input->readMapBegin($_ktype199, $_vtype200, $_size198);
                        for ($_i202 = 0; $_i202 < $_size198; ++$_i202) {
                            $key203 = '';
                            $val204 = '';
                            $xfer += $input->readString($key203);
                            $xfer += $input->readString($val204);
                            $this->extraMap[$key203] = $val204;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimResponseBean');
        if ($this->threadId !== null) {
            $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
            $xfer += $output->writeString($this->threadId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->error !== null) {
            if (!is_object($this->error)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('error', TType::STRUCT, 2);
            $xfer += $this->error->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraList !== null) {
            if (!is_array($this->extraList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraList', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->extraList));
            foreach ($this->extraList as $iter205) {
                $xfer += $iter205->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter206 => $viter207) {
                $xfer += $output->writeString($kiter206);
                $xfer += $output->writeString($viter207);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
