<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimIqBean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'threadId',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'fromTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        3 => array(
            'var' => 'toTid',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        4 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'extraList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimNode',
                ),
        ),
        6 => array(
            'var' => 'error',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimError',
        ),
        7 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * 线程id
     * 
     * @var string
     */
    public $threadId = null;
    /**
     * @var \Tid
     */
    public $fromTid = null;
    /**
     * @var \Tid
     */
    public $toTid = null;
    /**
     * Get :获取当前域值。类似于http get方法
     * Set :设置或替换get查询的值。类似于http put方法。
     * Result :说明成功的响应了先前的查询。类似于http状态码200。
     * Error: 查询和响应中出现的错误。
     * 
     * @var string
     */
    public $type = null;
    /**
     * 扩展字段
     * 
     * @var \TimNode[]
     */
    public $extraList = null;
    /**
     * 错误码
     * 
     * @var \TimError
     */
    public $error = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['threadId'])) {
                $this->threadId = $vals['threadId'];
            }
            if (isset($vals['fromTid'])) {
                $this->fromTid = $vals['fromTid'];
            }
            if (isset($vals['toTid'])) {
                $this->toTid = $vals['toTid'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['extraList'])) {
                $this->extraList = $vals['extraList'];
            }
            if (isset($vals['error'])) {
                $this->error = $vals['error'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimIqBean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->threadId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->fromTid = new \Tid();
                        $xfer += $this->fromTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->toTid = new \Tid();
                        $xfer += $this->toTid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->extraList = array();
                        $_size149 = 0;
                        $_etype152 = 0;
                        $xfer += $input->readListBegin($_etype152, $_size149);
                        for ($_i153 = 0; $_i153 < $_size149; ++$_i153) {
                            $elem154 = null;
                            $elem154 = new \TimNode();
                            $xfer += $elem154->read($input);
                            $this->extraList []= $elem154;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->error = new \TimError();
                        $xfer += $this->error->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size155 = 0;
                        $_ktype156 = 0;
                        $_vtype157 = 0;
                        $xfer += $input->readMapBegin($_ktype156, $_vtype157, $_size155);
                        for ($_i159 = 0; $_i159 < $_size155; ++$_i159) {
                            $key160 = '';
                            $val161 = '';
                            $xfer += $input->readString($key160);
                            $xfer += $input->readString($val161);
                            $this->extraMap[$key160] = $val161;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimIqBean');
        if ($this->threadId !== null) {
            $xfer += $output->writeFieldBegin('threadId', TType::STRING, 1);
            $xfer += $output->writeString($this->threadId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fromTid !== null) {
            if (!is_object($this->fromTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fromTid', TType::STRUCT, 2);
            $xfer += $this->fromTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->toTid !== null) {
            if (!is_object($this->toTid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('toTid', TType::STRUCT, 3);
            $xfer += $this->toTid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::STRING, 4);
            $xfer += $output->writeString($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraList !== null) {
            if (!is_array($this->extraList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraList', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->extraList));
            foreach ($this->extraList as $iter162) {
                $xfer += $iter162->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->error !== null) {
            if (!is_object($this->error)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('error', TType::STRUCT, 6);
            $xfer += $this->error->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 7);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter163 => $viter164) {
                $xfer += $output->writeString($kiter163);
                $xfer += $output->writeString($viter164);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
