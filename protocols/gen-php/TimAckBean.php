<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimAckBean
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'ackType',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ackStatus',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'extraList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\TimNode',
                ),
        ),
        5 => array(
            'var' => 'err',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\TimError',
        ),
        6 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * id，返回所要回执协议的线程id
     * 
     * @var string
     */
    public $id = null;
    /**
     * 类型，自定义 如：ping，message等
     * 
     * @var string
     */
    public $ackType = null;
    /**
     * 状态，如成功，失败等
     * 
     * @var string
     */
    public $ackStatus = null;
    /**
     * 附加信息
     * 
     * @var \TimNode[]
     */
    public $extraList = null;
    /**
     * 错误信息
     * 
     * @var \TimError
     */
    public $err = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['ackType'])) {
                $this->ackType = $vals['ackType'];
            }
            if (isset($vals['ackStatus'])) {
                $this->ackStatus = $vals['ackStatus'];
            }
            if (isset($vals['extraList'])) {
                $this->extraList = $vals['extraList'];
            }
            if (isset($vals['err'])) {
                $this->err = $vals['err'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimAckBean';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ackType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ackStatus);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->extraList = array();
                        $_size0 = 0;
                        $_etype3 = 0;
                        $xfer += $input->readListBegin($_etype3, $_size0);
                        for ($_i4 = 0; $_i4 < $_size0; ++$_i4) {
                            $elem5 = null;
                            $elem5 = new \TimNode();
                            $xfer += $elem5->read($input);
                            $this->extraList []= $elem5;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->err = new \TimError();
                        $xfer += $this->err->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size6 = 0;
                        $_ktype7 = 0;
                        $_vtype8 = 0;
                        $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
                        for ($_i10 = 0; $_i10 < $_size6; ++$_i10) {
                            $key11 = '';
                            $val12 = '';
                            $xfer += $input->readString($key11);
                            $xfer += $input->readString($val12);
                            $this->extraMap[$key11] = $val12;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimAckBean');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ackType !== null) {
            $xfer += $output->writeFieldBegin('ackType', TType::STRING, 2);
            $xfer += $output->writeString($this->ackType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ackStatus !== null) {
            $xfer += $output->writeFieldBegin('ackStatus', TType::STRING, 3);
            $xfer += $output->writeString($this->ackStatus);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraList !== null) {
            if (!is_array($this->extraList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraList', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->extraList));
            foreach ($this->extraList as $iter13) {
                $xfer += $iter13->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->err !== null) {
            if (!is_object($this->err)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('err', TType::STRUCT, 5);
            $xfer += $this->err->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 6);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter14 => $viter15) {
                $xfer += $output->writeString($kiter14);
                $xfer += $output->writeString($viter15);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
