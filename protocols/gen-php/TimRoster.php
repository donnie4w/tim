<?php
/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class TimRoster
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'subscription',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'tid',
            'isRequired' => true,
            'type' => TType::STRUCT,
            'class' => '\Tid',
        ),
        3 => array(
            'var' => 'name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'extraMap',
            'isRequired' => false,
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
                'type' => TType::STRING,
            ),
            'val' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * none表示用户和contact之前没有任何的关系（虽然在server的buddy list中存在）
     * to表示用户能看到contact的presence，但是contact看不到用户的Presence
     * from和to的含义相反，指用户看不到contact的presence，但是contact可以看到
     * both表示相关之间都能看到对方的presence
     * 
     * @var string
     */
    public $subscription = null;
    /**
     * @var \Tid
     */
    public $tid = null;
    /**
     * 用户名
     * 
     * @var string
     */
    public $name = null;
    /**
     * @var array
     */
    public $extraMap = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['subscription'])) {
                $this->subscription = $vals['subscription'];
            }
            if (isset($vals['tid'])) {
                $this->tid = $vals['tid'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['extraMap'])) {
                $this->extraMap = $vals['extraMap'];
            }
        }
    }

    public function getName()
    {
        return 'TimRoster';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->subscription);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->tid = new \Tid();
                        $xfer += $this->tid->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::MAP) {
                        $this->extraMap = array();
                        $_size165 = 0;
                        $_ktype166 = 0;
                        $_vtype167 = 0;
                        $xfer += $input->readMapBegin($_ktype166, $_vtype167, $_size165);
                        for ($_i169 = 0; $_i169 < $_size165; ++$_i169) {
                            $key170 = '';
                            $val171 = '';
                            $xfer += $input->readString($key170);
                            $xfer += $input->readString($val171);
                            $this->extraMap[$key170] = $val171;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('TimRoster');
        if ($this->subscription !== null) {
            $xfer += $output->writeFieldBegin('subscription', TType::STRING, 1);
            $xfer += $output->writeString($this->subscription);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->tid !== null) {
            if (!is_object($this->tid)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tid', TType::STRUCT, 2);
            $xfer += $this->tid->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->extraMap !== null) {
            if (!is_array($this->extraMap)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('extraMap', TType::MAP, 4);
            $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extraMap));
            foreach ($this->extraMap as $kiter172 => $viter173) {
                $xfer += $output->writeString($kiter172);
                $xfer += $output->writeString($viter173);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
