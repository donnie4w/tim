--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'tim_constants'

TimError = __TObject:new{
  errCode,
  errMsg
}

function TimError:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.errCode = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.errMsg = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimError:write(oprot)
  oprot:writeStructBegin('TimError')
  if self.errCode ~= nil then
    oprot:writeFieldBegin('errCode', TType.I32, 1)
    oprot:writeI32(self.errCode)
    oprot:writeFieldEnd()
  end
  if self.errMsg ~= nil then
    oprot:writeFieldBegin('errMsg', TType.STRING, 2)
    oprot:writeString(self.errMsg)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimNode = __TObject:new{
  key,
  value
}

function TimNode:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.key = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimNode:write(oprot)
  oprot:writeStructBegin('TimNode')
  if self.key ~= nil then
    oprot:writeFieldBegin('key', TType.STRING, 1)
    oprot:writeString(self.key)
    oprot:writeFieldEnd()
  end
  if self.value ~= nil then
    oprot:writeFieldBegin('value', TType.STRING, 2)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimAckBean = __TObject:new{
  id,
  ackType,
  ackStatus,
  extraList,
  err,
  extraMap
}

function TimAckBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.id = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.ackType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.ackStatus = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype3, _size0 = iprot:readListBegin()
        for _i=1,_size0 do
          local _elem4 = TimNode:new{}
          _elem4:read(iprot)
          table.insert(self.extraList, _elem4)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRUCT then
        self.err = TimError:new{}
        self.err:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype6, _vtype7, _size5 = iprot:readMapBegin() 
        for _i=1,_size5 do
          local _key9 = iprot:readString()
          local _val10 = iprot:readString()
          self.extraMap[_key9] = _val10
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimAckBean:write(oprot)
  oprot:writeStructBegin('TimAckBean')
  if self.id ~= nil then
    oprot:writeFieldBegin('id', TType.STRING, 1)
    oprot:writeString(self.id)
    oprot:writeFieldEnd()
  end
  if self.ackType ~= nil then
    oprot:writeFieldBegin('ackType', TType.STRING, 2)
    oprot:writeString(self.ackType)
    oprot:writeFieldEnd()
  end
  if self.ackStatus ~= nil then
    oprot:writeFieldBegin('ackStatus', TType.STRING, 3)
    oprot:writeString(self.ackStatus)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter11 in ipairs(self.extraList) do
      iter11:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.err ~= nil then
    oprot:writeFieldBegin('err', TType.STRUCT, 5)
    self.err:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 6)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter12,viter13 in pairs(self.extraMap) do
      oprot:writeString(kiter12)
      oprot:writeString(viter13)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimHBean = __TObject:new{
  chl,
  platform,
  version
}

function TimHBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.chl = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.platform = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I16 then
        self.version = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimHBean:write(oprot)
  oprot:writeStructBegin('TimHBean')
  if self.chl ~= nil then
    oprot:writeFieldBegin('chl', TType.I32, 1)
    oprot:writeI32(self.chl)
    oprot:writeFieldEnd()
  end
  if self.platform ~= nil then
    oprot:writeFieldBegin('platform', TType.I32, 2)
    oprot:writeI32(self.platform)
    oprot:writeFieldEnd()
  end
  if self.version ~= nil then
    oprot:writeFieldBegin('version', TType.I16, 3)
    oprot:writeI16(self.version)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimParam = __TObject:new{
  timestamp,
  version,
  lang,
  extraList,
  extraMap,
  interflow,
  tls
}

function TimParam:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.timestamp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I16 then
        self.version = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.lang = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype17, _size14 = iprot:readListBegin()
        for _i=1,_size14 do
          local _elem18 = TimNode:new{}
          _elem18:read(iprot)
          table.insert(self.extraList, _elem18)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype20, _vtype21, _size19 = iprot:readMapBegin() 
        for _i=1,_size19 do
          local _key23 = iprot:readString()
          local _val24 = iprot:readString()
          self.extraMap[_key23] = _val24
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.interflow = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.tls = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimParam:write(oprot)
  oprot:writeStructBegin('TimParam')
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.STRING, 1)
    oprot:writeString(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.version ~= nil then
    oprot:writeFieldBegin('version', TType.I16, 2)
    oprot:writeI16(self.version)
    oprot:writeFieldEnd()
  end
  if self.lang ~= nil then
    oprot:writeFieldBegin('lang', TType.STRING, 3)
    oprot:writeString(self.lang)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter25 in ipairs(self.extraList) do
      iter25:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 5)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter26,viter27 in pairs(self.extraMap) do
      oprot:writeString(kiter26)
      oprot:writeString(viter27)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.interflow ~= nil then
    oprot:writeFieldBegin('interflow', TType.STRING, 6)
    oprot:writeString(self.interflow)
    oprot:writeFieldEnd()
  end
  if self.tls ~= nil then
    oprot:writeFieldBegin('tls', TType.STRING, 7)
    oprot:writeString(self.tls)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimTime = __TObject:new{
  timestamp,
  formattime
}

function TimTime:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.timestamp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.formattime = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimTime:write(oprot)
  oprot:writeStructBegin('TimTime')
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.STRING, 1)
    oprot:writeString(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.formattime ~= nil then
    oprot:writeFieldBegin('formattime', TType.STRING, 2)
    oprot:writeString(self.formattime)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimArea = __TObject:new{
  country,
  province,
  city,
  extraList,
  extraMap
}

function TimArea:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.country = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.province = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.city = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype31, _size28 = iprot:readListBegin()
        for _i=1,_size28 do
          local _elem32 = TimNode:new{}
          _elem32:read(iprot)
          table.insert(self.extraList, _elem32)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype34, _vtype35, _size33 = iprot:readMapBegin() 
        for _i=1,_size33 do
          local _key37 = iprot:readString()
          local _val38 = iprot:readString()
          self.extraMap[_key37] = _val38
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimArea:write(oprot)
  oprot:writeStructBegin('TimArea')
  if self.country ~= nil then
    oprot:writeFieldBegin('country', TType.STRING, 1)
    oprot:writeString(self.country)
    oprot:writeFieldEnd()
  end
  if self.province ~= nil then
    oprot:writeFieldBegin('province', TType.STRING, 2)
    oprot:writeString(self.province)
    oprot:writeFieldEnd()
  end
  if self.city ~= nil then
    oprot:writeFieldBegin('city', TType.STRING, 3)
    oprot:writeString(self.city)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter39 in ipairs(self.extraList) do
      iter39:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 5)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter40,viter41 in pairs(self.extraMap) do
      oprot:writeString(kiter40)
      oprot:writeString(viter41)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Tid = __TObject:new{
  name,
  domain,
  resource,
  type,
  extraList,
  extraMap
}

function Tid:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.domain = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.resource = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.type = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype45, _size42 = iprot:readListBegin()
        for _i=1,_size42 do
          local _elem46 = TimNode:new{}
          _elem46:read(iprot)
          table.insert(self.extraList, _elem46)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype48, _vtype49, _size47 = iprot:readMapBegin() 
        for _i=1,_size47 do
          local _key51 = iprot:readString()
          local _val52 = iprot:readString()
          self.extraMap[_key51] = _val52
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Tid:write(oprot)
  oprot:writeStructBegin('Tid')
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 1)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.domain ~= nil then
    oprot:writeFieldBegin('domain', TType.STRING, 2)
    oprot:writeString(self.domain)
    oprot:writeFieldEnd()
  end
  if self.resource ~= nil then
    oprot:writeFieldBegin('resource', TType.STRING, 3)
    oprot:writeString(self.resource)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.STRING, 4)
    oprot:writeString(self.type)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 5)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter53 in ipairs(self.extraList) do
      iter53:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 6)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter54,viter55 in pairs(self.extraMap) do
      oprot:writeString(kiter54)
      oprot:writeString(viter55)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimUserBean = __TObject:new{
  tid,
  nickname,
  remarkname,
  brithday,
  gender,
  headurl,
  area,
  headbyte,
  photoBytes,
  extraList,
  extraMap
}

function TimUserBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.tid = Tid:new{}
        self.tid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.nickname = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.remarkname = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.brithday = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I16 then
        self.gender = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.headurl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRUCT then
        self.area = TimArea:new{}
        self.area:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRING then
        self.headbyte = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.photoBytes = {}
        local _etype59, _size56 = iprot:readListBegin()
        for _i=1,_size56 do
          local _elem60 = iprot:readString()
          table.insert(self.photoBytes, _elem60)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype64, _size61 = iprot:readListBegin()
        for _i=1,_size61 do
          local _elem65 = TimNode:new{}
          _elem65:read(iprot)
          table.insert(self.extraList, _elem65)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype67, _vtype68, _size66 = iprot:readMapBegin() 
        for _i=1,_size66 do
          local _key70 = iprot:readString()
          local _val71 = iprot:readString()
          self.extraMap[_key70] = _val71
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimUserBean:write(oprot)
  oprot:writeStructBegin('TimUserBean')
  if self.tid ~= nil then
    oprot:writeFieldBegin('tid', TType.STRUCT, 1)
    self.tid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.nickname ~= nil then
    oprot:writeFieldBegin('nickname', TType.STRING, 2)
    oprot:writeString(self.nickname)
    oprot:writeFieldEnd()
  end
  if self.remarkname ~= nil then
    oprot:writeFieldBegin('remarkname', TType.STRING, 3)
    oprot:writeString(self.remarkname)
    oprot:writeFieldEnd()
  end
  if self.brithday ~= nil then
    oprot:writeFieldBegin('brithday', TType.STRING, 4)
    oprot:writeString(self.brithday)
    oprot:writeFieldEnd()
  end
  if self.gender ~= nil then
    oprot:writeFieldBegin('gender', TType.I16, 5)
    oprot:writeI16(self.gender)
    oprot:writeFieldEnd()
  end
  if self.headurl ~= nil then
    oprot:writeFieldBegin('headurl', TType.STRING, 6)
    oprot:writeString(self.headurl)
    oprot:writeFieldEnd()
  end
  if self.area ~= nil then
    oprot:writeFieldBegin('area', TType.STRUCT, 7)
    self.area:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.headbyte ~= nil then
    oprot:writeFieldBegin('headbyte', TType.STRING, 8)
    oprot:writeString(self.headbyte)
    oprot:writeFieldEnd()
  end
  if self.photoBytes ~= nil then
    oprot:writeFieldBegin('photoBytes', TType.LIST, 9)
    oprot:writeListBegin(TType.STRING, #self.photoBytes)
    for _,iter72 in ipairs(self.photoBytes) do
      oprot:writeString(iter72)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter73 in ipairs(self.extraList) do
      iter73:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 11)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter74,viter75 in pairs(self.extraMap) do
      oprot:writeString(kiter74)
      oprot:writeString(viter75)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimRoom = __TObject:new{
  tid,
  founderTid,
  HostsTid,
  membersTid,
  headurl,
  roomName,
  desc,
  createTime,
  extraList,
  extraMap
}

function TimRoom:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.tid = Tid:new{}
        self.tid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.founderTid = Tid:new{}
        self.founderTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.HostsTid = {}
        local _etype79, _size76 = iprot:readListBegin()
        for _i=1,_size76 do
          local _elem80 = Tid:new{}
          _elem80:read(iprot)
          table.insert(self.HostsTid, _elem80)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.LIST then
        self.membersTid = {}
        local _etype84, _size81 = iprot:readListBegin()
        for _i=1,_size81 do
          local _elem85 = Tid:new{}
          _elem85:read(iprot)
          table.insert(self.membersTid, _elem85)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.headurl = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.roomName = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.desc = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.createTime = TimTime:new{}
        self.createTime:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype89, _size86 = iprot:readListBegin()
        for _i=1,_size86 do
          local _elem90 = TimNode:new{}
          _elem90:read(iprot)
          table.insert(self.extraList, _elem90)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype92, _vtype93, _size91 = iprot:readMapBegin() 
        for _i=1,_size91 do
          local _key95 = iprot:readString()
          local _val96 = iprot:readString()
          self.extraMap[_key95] = _val96
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimRoom:write(oprot)
  oprot:writeStructBegin('TimRoom')
  if self.tid ~= nil then
    oprot:writeFieldBegin('tid', TType.STRUCT, 1)
    self.tid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.founderTid ~= nil then
    oprot:writeFieldBegin('founderTid', TType.STRUCT, 2)
    self.founderTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.HostsTid ~= nil then
    oprot:writeFieldBegin('HostsTid', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.HostsTid)
    for _,iter97 in ipairs(self.HostsTid) do
      iter97:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.membersTid ~= nil then
    oprot:writeFieldBegin('membersTid', TType.LIST, 4)
    oprot:writeListBegin(TType.STRUCT, #self.membersTid)
    for _,iter98 in ipairs(self.membersTid) do
      iter98:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.headurl ~= nil then
    oprot:writeFieldBegin('headurl', TType.STRING, 5)
    oprot:writeString(self.headurl)
    oprot:writeFieldEnd()
  end
  if self.roomName ~= nil then
    oprot:writeFieldBegin('roomName', TType.STRING, 6)
    oprot:writeString(self.roomName)
    oprot:writeFieldEnd()
  end
  if self.desc ~= nil then
    oprot:writeFieldBegin('desc', TType.STRING, 7)
    oprot:writeString(self.desc)
    oprot:writeFieldEnd()
  end
  if self.createTime ~= nil then
    oprot:writeFieldBegin('createTime', TType.STRUCT, 8)
    self.createTime:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 9)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter99 in ipairs(self.extraList) do
      iter99:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 10)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter100,viter101 in pairs(self.extraMap) do
      oprot:writeString(kiter100)
      oprot:writeString(viter101)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimPBean = __TObject:new{
  threadId,
  fromTid,
  toTid,
  status,
  type,
  priority,
  show,
  leaguerTid,
  extraList,
  error,
  extraMap
}

function TimPBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.threadId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.fromTid = Tid:new{}
        self.fromTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.toTid = Tid:new{}
        self.toTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.status = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.type = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I32 then
        self.priority = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.STRING then
        self.show = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.leaguerTid = Tid:new{}
        self.leaguerTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype105, _size102 = iprot:readListBegin()
        for _i=1,_size102 do
          local _elem106 = TimNode:new{}
          _elem106:read(iprot)
          table.insert(self.extraList, _elem106)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.STRUCT then
        self.error = TimError:new{}
        self.error:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype108, _vtype109, _size107 = iprot:readMapBegin() 
        for _i=1,_size107 do
          local _key111 = iprot:readString()
          local _val112 = iprot:readString()
          self.extraMap[_key111] = _val112
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimPBean:write(oprot)
  oprot:writeStructBegin('TimPBean')
  if self.threadId ~= nil then
    oprot:writeFieldBegin('threadId', TType.STRING, 1)
    oprot:writeString(self.threadId)
    oprot:writeFieldEnd()
  end
  if self.fromTid ~= nil then
    oprot:writeFieldBegin('fromTid', TType.STRUCT, 2)
    self.fromTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.toTid ~= nil then
    oprot:writeFieldBegin('toTid', TType.STRUCT, 3)
    self.toTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.status ~= nil then
    oprot:writeFieldBegin('status', TType.STRING, 4)
    oprot:writeString(self.status)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.STRING, 5)
    oprot:writeString(self.type)
    oprot:writeFieldEnd()
  end
  if self.priority ~= nil then
    oprot:writeFieldBegin('priority', TType.I32, 6)
    oprot:writeI32(self.priority)
    oprot:writeFieldEnd()
  end
  if self.show ~= nil then
    oprot:writeFieldBegin('show', TType.STRING, 7)
    oprot:writeString(self.show)
    oprot:writeFieldEnd()
  end
  if self.leaguerTid ~= nil then
    oprot:writeFieldBegin('leaguerTid', TType.STRUCT, 8)
    self.leaguerTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 9)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter113 in ipairs(self.extraList) do
      iter113:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.error ~= nil then
    oprot:writeFieldBegin('error', TType.STRUCT, 10)
    self.error:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 11)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter114,viter115 in pairs(self.extraMap) do
      oprot:writeString(kiter114)
      oprot:writeString(viter115)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimMBean = __TObject:new{
  threadId,
  mid,
  fromTid,
  toTid,
  body,
  type,
  msgType,
  offline,
  leaguerTid,
  extraList,
  timestamp,
  error,
  extraMap,
  readstatus
}

function TimMBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.threadId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.mid = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.fromTid = Tid:new{}
        self.fromTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRUCT then
        self.toTid = Tid:new{}
        self.toTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.body = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.type = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I16 then
        self.msgType = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 8 then
      if ftype == TType.STRUCT then
        self.offline = TimTime:new{}
        self.offline:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 9 then
      if ftype == TType.STRUCT then
        self.leaguerTid = Tid:new{}
        self.leaguerTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 10 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype119, _size116 = iprot:readListBegin()
        for _i=1,_size116 do
          local _elem120 = TimNode:new{}
          _elem120:read(iprot)
          table.insert(self.extraList, _elem120)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 11 then
      if ftype == TType.STRING then
        self.timestamp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 12 then
      if ftype == TType.STRUCT then
        self.error = TimError:new{}
        self.error:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 13 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype122, _vtype123, _size121 = iprot:readMapBegin() 
        for _i=1,_size121 do
          local _key125 = iprot:readString()
          local _val126 = iprot:readString()
          self.extraMap[_key125] = _val126
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 14 then
      if ftype == TType.I16 then
        self.readstatus = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimMBean:write(oprot)
  oprot:writeStructBegin('TimMBean')
  if self.threadId ~= nil then
    oprot:writeFieldBegin('threadId', TType.STRING, 1)
    oprot:writeString(self.threadId)
    oprot:writeFieldEnd()
  end
  if self.mid ~= nil then
    oprot:writeFieldBegin('mid', TType.STRING, 2)
    oprot:writeString(self.mid)
    oprot:writeFieldEnd()
  end
  if self.fromTid ~= nil then
    oprot:writeFieldBegin('fromTid', TType.STRUCT, 3)
    self.fromTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.toTid ~= nil then
    oprot:writeFieldBegin('toTid', TType.STRUCT, 4)
    self.toTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.body ~= nil then
    oprot:writeFieldBegin('body', TType.STRING, 5)
    oprot:writeString(self.body)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.STRING, 6)
    oprot:writeString(self.type)
    oprot:writeFieldEnd()
  end
  if self.msgType ~= nil then
    oprot:writeFieldBegin('msgType', TType.I16, 7)
    oprot:writeI16(self.msgType)
    oprot:writeFieldEnd()
  end
  if self.offline ~= nil then
    oprot:writeFieldBegin('offline', TType.STRUCT, 8)
    self.offline:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.leaguerTid ~= nil then
    oprot:writeFieldBegin('leaguerTid', TType.STRUCT, 9)
    self.leaguerTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 10)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter127 in ipairs(self.extraList) do
      iter127:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.STRING, 11)
    oprot:writeString(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.error ~= nil then
    oprot:writeFieldBegin('error', TType.STRUCT, 12)
    self.error:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 13)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter128,viter129 in pairs(self.extraMap) do
      oprot:writeString(kiter128)
      oprot:writeString(viter129)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  if self.readstatus ~= nil then
    oprot:writeFieldBegin('readstatus', TType.I16, 14)
    oprot:writeI16(self.readstatus)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimIqBean = __TObject:new{
  threadId,
  fromTid,
  toTid,
  type,
  extraList,
  error,
  extraMap
}

function TimIqBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.threadId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.fromTid = Tid:new{}
        self.fromTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRUCT then
        self.toTid = Tid:new{}
        self.toTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.type = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype133, _size130 = iprot:readListBegin()
        for _i=1,_size130 do
          local _elem134 = TimNode:new{}
          _elem134:read(iprot)
          table.insert(self.extraList, _elem134)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.error = TimError:new{}
        self.error:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype136, _vtype137, _size135 = iprot:readMapBegin() 
        for _i=1,_size135 do
          local _key139 = iprot:readString()
          local _val140 = iprot:readString()
          self.extraMap[_key139] = _val140
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimIqBean:write(oprot)
  oprot:writeStructBegin('TimIqBean')
  if self.threadId ~= nil then
    oprot:writeFieldBegin('threadId', TType.STRING, 1)
    oprot:writeString(self.threadId)
    oprot:writeFieldEnd()
  end
  if self.fromTid ~= nil then
    oprot:writeFieldBegin('fromTid', TType.STRUCT, 2)
    self.fromTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.toTid ~= nil then
    oprot:writeFieldBegin('toTid', TType.STRUCT, 3)
    self.toTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.type ~= nil then
    oprot:writeFieldBegin('type', TType.STRING, 4)
    oprot:writeString(self.type)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 5)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter141 in ipairs(self.extraList) do
      iter141:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.error ~= nil then
    oprot:writeFieldBegin('error', TType.STRUCT, 6)
    self.error:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 7)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter142,viter143 in pairs(self.extraMap) do
      oprot:writeString(kiter142)
      oprot:writeString(viter143)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimRoster = __TObject:new{
  subscription,
  tid,
  name,
  extraMap
}

function TimRoster:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.subscription = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tid = Tid:new{}
        self.tid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype145, _vtype146, _size144 = iprot:readMapBegin() 
        for _i=1,_size144 do
          local _key148 = iprot:readString()
          local _val149 = iprot:readString()
          self.extraMap[_key148] = _val149
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimRoster:write(oprot)
  oprot:writeStructBegin('TimRoster')
  if self.subscription ~= nil then
    oprot:writeFieldBegin('subscription', TType.STRING, 1)
    oprot:writeString(self.subscription)
    oprot:writeFieldEnd()
  end
  if self.tid ~= nil then
    oprot:writeFieldBegin('tid', TType.STRUCT, 2)
    self.tid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.name ~= nil then
    oprot:writeFieldBegin('name', TType.STRING, 3)
    oprot:writeString(self.name)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter150,viter151 in pairs(self.extraMap) do
      oprot:writeString(kiter150)
      oprot:writeString(viter151)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimRemoteUserBean = __TObject:new{
  error,
  ub,
  extraMap
}

function TimRemoteUserBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.error = TimError:new{}
        self.error:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.ub = TimUserBean:new{}
        self.ub:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype153, _vtype154, _size152 = iprot:readMapBegin() 
        for _i=1,_size152 do
          local _key156 = iprot:readString()
          local _val157 = iprot:readString()
          self.extraMap[_key156] = _val157
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimRemoteUserBean:write(oprot)
  oprot:writeStructBegin('TimRemoteUserBean')
  if self.error ~= nil then
    oprot:writeFieldBegin('error', TType.STRUCT, 1)
    self.error:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.ub ~= nil then
    oprot:writeFieldBegin('ub', TType.STRUCT, 2)
    self.ub:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter158,viter159 in pairs(self.extraMap) do
      oprot:writeString(kiter158)
      oprot:writeString(viter159)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimRemoteRoom = __TObject:new{
  error,
  room,
  extraMap
}

function TimRemoteRoom:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.error = TimError:new{}
        self.error:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.room = TimRoom:new{}
        self.room:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype161, _vtype162, _size160 = iprot:readMapBegin() 
        for _i=1,_size160 do
          local _key164 = iprot:readString()
          local _val165 = iprot:readString()
          self.extraMap[_key164] = _val165
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimRemoteRoom:write(oprot)
  oprot:writeStructBegin('TimRemoteRoom')
  if self.error ~= nil then
    oprot:writeFieldBegin('error', TType.STRUCT, 1)
    self.error:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.room ~= nil then
    oprot:writeFieldBegin('room', TType.STRUCT, 2)
    self.room:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 3)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter166,viter167 in pairs(self.extraMap) do
      oprot:writeString(kiter166)
      oprot:writeString(viter167)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimResponseBean = __TObject:new{
  threadId,
  error,
  extraList,
  extraMap
}

function TimResponseBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.threadId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.error = TimError:new{}
        self.error:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.extraList = {}
        local _etype171, _size168 = iprot:readListBegin()
        for _i=1,_size168 do
          local _elem172 = TimNode:new{}
          _elem172:read(iprot)
          table.insert(self.extraList, _elem172)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype174, _vtype175, _size173 = iprot:readMapBegin() 
        for _i=1,_size173 do
          local _key177 = iprot:readString()
          local _val178 = iprot:readString()
          self.extraMap[_key177] = _val178
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimResponseBean:write(oprot)
  oprot:writeStructBegin('TimResponseBean')
  if self.threadId ~= nil then
    oprot:writeFieldBegin('threadId', TType.STRING, 1)
    oprot:writeString(self.threadId)
    oprot:writeFieldEnd()
  end
  if self.error ~= nil then
    oprot:writeFieldBegin('error', TType.STRUCT, 2)
    self.error:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.extraList ~= nil then
    oprot:writeFieldBegin('extraList', TType.LIST, 3)
    oprot:writeListBegin(TType.STRUCT, #self.extraList)
    for _,iter179 in ipairs(self.extraList) do
      iter179:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter180,viter181 in pairs(self.extraMap) do
      oprot:writeString(kiter180)
      oprot:writeString(viter181)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimSock5Bean = __TObject:new{
  fromTid,
  toTid,
  addr,
  port,
  transport,
  pubId,
  extraMap
}

function TimSock5Bean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.fromTid = Tid:new{}
        self.fromTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.toTid = Tid:new{}
        self.toTid:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.addr = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.port = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.I16 then
        self.transport = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRING then
        self.pubId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype183, _vtype184, _size182 = iprot:readMapBegin() 
        for _i=1,_size182 do
          local _key186 = iprot:readString()
          local _val187 = iprot:readString()
          self.extraMap[_key186] = _val187
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimSock5Bean:write(oprot)
  oprot:writeStructBegin('TimSock5Bean')
  if self.fromTid ~= nil then
    oprot:writeFieldBegin('fromTid', TType.STRUCT, 1)
    self.fromTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.toTid ~= nil then
    oprot:writeFieldBegin('toTid', TType.STRUCT, 2)
    self.toTid:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.addr ~= nil then
    oprot:writeFieldBegin('addr', TType.STRING, 3)
    oprot:writeString(self.addr)
    oprot:writeFieldEnd()
  end
  if self.port ~= nil then
    oprot:writeFieldBegin('port', TType.I32, 4)
    oprot:writeI32(self.port)
    oprot:writeFieldEnd()
  end
  if self.transport ~= nil then
    oprot:writeFieldBegin('transport', TType.I16, 5)
    oprot:writeI16(self.transport)
    oprot:writeFieldEnd()
  end
  if self.pubId ~= nil then
    oprot:writeFieldBegin('pubId', TType.STRING, 6)
    oprot:writeString(self.pubId)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 7)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter188,viter189 in pairs(self.extraMap) do
      oprot:writeString(kiter188)
      oprot:writeString(viter189)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimSock5Bytes = __TObject:new{
  pubId,
  index,
  bytes,
  extraMap
}

function TimSock5Bytes:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.pubId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.index = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.bytes = {}
        local _etype193, _size190 = iprot:readListBegin()
        for _i=1,_size190 do
          local _elem194 = iprot:readString()
          table.insert(self.bytes, _elem194)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype196, _vtype197, _size195 = iprot:readMapBegin() 
        for _i=1,_size195 do
          local _key199 = iprot:readString()
          local _val200 = iprot:readString()
          self.extraMap[_key199] = _val200
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimSock5Bytes:write(oprot)
  oprot:writeStructBegin('TimSock5Bytes')
  if self.pubId ~= nil then
    oprot:writeFieldBegin('pubId', TType.STRING, 1)
    oprot:writeString(self.pubId)
    oprot:writeFieldEnd()
  end
  if self.index ~= nil then
    oprot:writeFieldBegin('index', TType.I32, 2)
    oprot:writeI32(self.index)
    oprot:writeFieldEnd()
  end
  if self.bytes ~= nil then
    oprot:writeFieldBegin('bytes', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.bytes)
    for _,iter201 in ipairs(self.bytes) do
      oprot:writeString(iter201)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter202,viter203 in pairs(self.extraMap) do
      oprot:writeString(kiter202)
      oprot:writeString(viter203)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimPage = __TObject:new{
  fromTimeStamp,
  toTimeStamp,
  limitCount,
  extraMap
}

function TimPage:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.fromTimeStamp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.toTimeStamp = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.limitCount = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype205, _vtype206, _size204 = iprot:readMapBegin() 
        for _i=1,_size204 do
          local _key208 = iprot:readString()
          local _val209 = iprot:readString()
          self.extraMap[_key208] = _val209
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimPage:write(oprot)
  oprot:writeStructBegin('TimPage')
  if self.fromTimeStamp ~= nil then
    oprot:writeFieldBegin('fromTimeStamp', TType.STRING, 1)
    oprot:writeString(self.fromTimeStamp)
    oprot:writeFieldEnd()
  end
  if self.toTimeStamp ~= nil then
    oprot:writeFieldBegin('toTimeStamp', TType.STRING, 2)
    oprot:writeString(self.toTimeStamp)
    oprot:writeFieldEnd()
  end
  if self.limitCount ~= nil then
    oprot:writeFieldBegin('limitCount', TType.I32, 3)
    oprot:writeI32(self.limitCount)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter210,viter211 in pairs(self.extraMap) do
      oprot:writeString(kiter210)
      oprot:writeString(viter211)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimMessageIq = __TObject:new{
  tidlist,
  timPage,
  midlist,
  extraMap
}

function TimMessageIq:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.LIST then
        self.tidlist = {}
        local _etype215, _size212 = iprot:readListBegin()
        for _i=1,_size212 do
          local _elem216 = iprot:readString()
          table.insert(self.tidlist, _elem216)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.timPage = TimPage:new{}
        self.timPage:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.LIST then
        self.midlist = {}
        local _etype220, _size217 = iprot:readListBegin()
        for _i=1,_size217 do
          local _elem221 = iprot:readString()
          table.insert(self.midlist, _elem221)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype223, _vtype224, _size222 = iprot:readMapBegin() 
        for _i=1,_size222 do
          local _key226 = iprot:readString()
          local _val227 = iprot:readString()
          self.extraMap[_key226] = _val227
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimMessageIq:write(oprot)
  oprot:writeStructBegin('TimMessageIq')
  if self.tidlist ~= nil then
    oprot:writeFieldBegin('tidlist', TType.LIST, 1)
    oprot:writeListBegin(TType.STRING, #self.tidlist)
    for _,iter228 in ipairs(self.tidlist) do
      oprot:writeString(iter228)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.timPage ~= nil then
    oprot:writeFieldBegin('timPage', TType.STRUCT, 2)
    self.timPage:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.midlist ~= nil then
    oprot:writeFieldBegin('midlist', TType.LIST, 3)
    oprot:writeListBegin(TType.STRING, #self.midlist)
    for _,iter229 in ipairs(self.midlist) do
      oprot:writeString(iter229)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter230,viter231 in pairs(self.extraMap) do
      oprot:writeString(kiter230)
      oprot:writeString(viter231)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimAuth = __TObject:new{
  domain,
  username,
  pwd
}

function TimAuth:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.domain = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.pwd = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimAuth:write(oprot)
  oprot:writeStructBegin('TimAuth')
  if self.domain ~= nil then
    oprot:writeFieldBegin('domain', TType.STRING, 1)
    oprot:writeString(self.domain)
    oprot:writeFieldEnd()
  end
  if self.username ~= nil then
    oprot:writeFieldBegin('username', TType.STRING, 2)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.pwd ~= nil then
    oprot:writeFieldBegin('pwd', TType.STRING, 3)
    oprot:writeString(self.pwd)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimMBeanList = __TObject:new{
  threadId,
  timMBeanList,
  reqType,
  extraMap
}

function TimMBeanList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.threadId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.timMBeanList = {}
        local _etype235, _size232 = iprot:readListBegin()
        for _i=1,_size232 do
          local _elem236 = TimMBean:new{}
          _elem236:read(iprot)
          table.insert(self.timMBeanList, _elem236)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.reqType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype238, _vtype239, _size237 = iprot:readMapBegin() 
        for _i=1,_size237 do
          local _key241 = iprot:readString()
          local _val242 = iprot:readString()
          self.extraMap[_key241] = _val242
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimMBeanList:write(oprot)
  oprot:writeStructBegin('TimMBeanList')
  if self.threadId ~= nil then
    oprot:writeFieldBegin('threadId', TType.STRING, 1)
    oprot:writeString(self.threadId)
    oprot:writeFieldEnd()
  end
  if self.timMBeanList ~= nil then
    oprot:writeFieldBegin('timMBeanList', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.timMBeanList)
    for _,iter243 in ipairs(self.timMBeanList) do
      iter243:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.reqType ~= nil then
    oprot:writeFieldBegin('reqType', TType.STRING, 3)
    oprot:writeString(self.reqType)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter244,viter245 in pairs(self.extraMap) do
      oprot:writeString(kiter244)
      oprot:writeString(viter245)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimPBeanList = __TObject:new{
  threadId,
  timPBeanList,
  reqType,
  extraMap
}

function TimPBeanList:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.threadId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.timPBeanList = {}
        local _etype249, _size246 = iprot:readListBegin()
        for _i=1,_size246 do
          local _elem250 = TimPBean:new{}
          _elem250:read(iprot)
          table.insert(self.timPBeanList, _elem250)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.reqType = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.MAP then
        self.extraMap = {}
        local _ktype252, _vtype253, _size251 = iprot:readMapBegin() 
        for _i=1,_size251 do
          local _key255 = iprot:readString()
          local _val256 = iprot:readString()
          self.extraMap[_key255] = _val256
        end
        iprot:readMapEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimPBeanList:write(oprot)
  oprot:writeStructBegin('TimPBeanList')
  if self.threadId ~= nil then
    oprot:writeFieldBegin('threadId', TType.STRING, 1)
    oprot:writeString(self.threadId)
    oprot:writeFieldEnd()
  end
  if self.timPBeanList ~= nil then
    oprot:writeFieldBegin('timPBeanList', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, #self.timPBeanList)
    for _,iter257 in ipairs(self.timPBeanList) do
      iter257:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.reqType ~= nil then
    oprot:writeFieldBegin('reqType', TType.STRING, 3)
    oprot:writeString(self.reqType)
    oprot:writeFieldEnd()
  end
  if self.extraMap ~= nil then
    oprot:writeFieldBegin('extraMap', TType.MAP, 4)
    oprot:writeMapBegin(TType.STRING, TType.STRING, ttable_size(self.extraMap))
    for kiter258,viter259 in pairs(self.extraMap) do
      oprot:writeString(kiter258)
      oprot:writeString(viter259)
    end
    oprot:writeMapEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

TimPropertyBean = __TObject:new{
  threadId,
  interflow,
  tls
}

function TimPropertyBean:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.threadId = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.interflow = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.tls = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function TimPropertyBean:write(oprot)
  oprot:writeStructBegin('TimPropertyBean')
  if self.threadId ~= nil then
    oprot:writeFieldBegin('threadId', TType.STRING, 1)
    oprot:writeString(self.threadId)
    oprot:writeFieldEnd()
  end
  if self.interflow ~= nil then
    oprot:writeFieldBegin('interflow', TType.STRING, 2)
    oprot:writeString(self.interflow)
    oprot:writeFieldEnd()
  end
  if self.tls ~= nil then
    oprot:writeFieldBegin('tls', TType.STRING, 3)
    oprot:writeString(self.tls)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end