#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from tim import ITim
from tim.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void timStream(TimParam param)')
    print('  void timStarttls()')
    print('  void timLogin(Tid tid, string pwd)')
    print('  void timAck(TimAckBean ab)')
    print('  void timPresence(TimPBean pbean)')
    print('  void timMessage(TimMBean mbean)')
    print('  void timPing(string threadId)')
    print('  void timError(TimError e)')
    print('  void timLogout()')
    print('  void timRegist(Tid tid, string auth)')
    print('  void timRoser(TimRoster roster)')
    print('  void timMessageList(TimMBeanList mbeanList)')
    print('  void timPresenceList(TimPBeanList pbeanList)')
    print('  void timMessageIq(TimMessageIq timMsgIq, string iqType)')
    print('  void timMessageResult(TimMBean mbean)')
    print('  void timProperty(TimPropertyBean tpb)')
    print('  TimRemoteUserBean timRemoteUserAuth(Tid tid, string pwd, TimAuth auth)')
    print('  TimRemoteUserBean timRemoteUserGet(Tid tid, TimAuth auth)')
    print('  TimRemoteUserBean timRemoteUserEdit(Tid tid, TimUserBean ub, TimAuth auth)')
    print('  TimResponseBean timResponsePresence(TimPBean pbean, TimAuth auth)')
    print('  TimResponseBean timResponseMessage(TimMBean mbean, TimAuth auth)')
    print('  TimMBeanList timResponseMessageIq(TimMessageIq timMsgIq, string iqType, TimAuth auth)')
    print('  TimResponseBean timResponsePresenceList(TimPBeanList pbeanList, TimAuth auth)')
    print('  TimResponseBean timResponseMessageList(TimMBeanList mbeanList, TimAuth auth)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ITim.Client(protocol)
transport.open()

if cmd == 'timStream':
    if len(args) != 1:
        print('timStream requires 1 args')
        sys.exit(1)
    pp.pprint(client.timStream(eval(args[0]),))

elif cmd == 'timStarttls':
    if len(args) != 0:
        print('timStarttls requires 0 args')
        sys.exit(1)
    pp.pprint(client.timStarttls())

elif cmd == 'timLogin':
    if len(args) != 2:
        print('timLogin requires 2 args')
        sys.exit(1)
    pp.pprint(client.timLogin(eval(args[0]), args[1],))

elif cmd == 'timAck':
    if len(args) != 1:
        print('timAck requires 1 args')
        sys.exit(1)
    pp.pprint(client.timAck(eval(args[0]),))

elif cmd == 'timPresence':
    if len(args) != 1:
        print('timPresence requires 1 args')
        sys.exit(1)
    pp.pprint(client.timPresence(eval(args[0]),))

elif cmd == 'timMessage':
    if len(args) != 1:
        print('timMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.timMessage(eval(args[0]),))

elif cmd == 'timPing':
    if len(args) != 1:
        print('timPing requires 1 args')
        sys.exit(1)
    pp.pprint(client.timPing(args[0],))

elif cmd == 'timError':
    if len(args) != 1:
        print('timError requires 1 args')
        sys.exit(1)
    pp.pprint(client.timError(eval(args[0]),))

elif cmd == 'timLogout':
    if len(args) != 0:
        print('timLogout requires 0 args')
        sys.exit(1)
    pp.pprint(client.timLogout())

elif cmd == 'timRegist':
    if len(args) != 2:
        print('timRegist requires 2 args')
        sys.exit(1)
    pp.pprint(client.timRegist(eval(args[0]), args[1],))

elif cmd == 'timRoser':
    if len(args) != 1:
        print('timRoser requires 1 args')
        sys.exit(1)
    pp.pprint(client.timRoser(eval(args[0]),))

elif cmd == 'timMessageList':
    if len(args) != 1:
        print('timMessageList requires 1 args')
        sys.exit(1)
    pp.pprint(client.timMessageList(eval(args[0]),))

elif cmd == 'timPresenceList':
    if len(args) != 1:
        print('timPresenceList requires 1 args')
        sys.exit(1)
    pp.pprint(client.timPresenceList(eval(args[0]),))

elif cmd == 'timMessageIq':
    if len(args) != 2:
        print('timMessageIq requires 2 args')
        sys.exit(1)
    pp.pprint(client.timMessageIq(eval(args[0]), args[1],))

elif cmd == 'timMessageResult':
    if len(args) != 1:
        print('timMessageResult requires 1 args')
        sys.exit(1)
    pp.pprint(client.timMessageResult(eval(args[0]),))

elif cmd == 'timProperty':
    if len(args) != 1:
        print('timProperty requires 1 args')
        sys.exit(1)
    pp.pprint(client.timProperty(eval(args[0]),))

elif cmd == 'timRemoteUserAuth':
    if len(args) != 3:
        print('timRemoteUserAuth requires 3 args')
        sys.exit(1)
    pp.pprint(client.timRemoteUserAuth(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'timRemoteUserGet':
    if len(args) != 2:
        print('timRemoteUserGet requires 2 args')
        sys.exit(1)
    pp.pprint(client.timRemoteUserGet(eval(args[0]), eval(args[1]),))

elif cmd == 'timRemoteUserEdit':
    if len(args) != 3:
        print('timRemoteUserEdit requires 3 args')
        sys.exit(1)
    pp.pprint(client.timRemoteUserEdit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'timResponsePresence':
    if len(args) != 2:
        print('timResponsePresence requires 2 args')
        sys.exit(1)
    pp.pprint(client.timResponsePresence(eval(args[0]), eval(args[1]),))

elif cmd == 'timResponseMessage':
    if len(args) != 2:
        print('timResponseMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.timResponseMessage(eval(args[0]), eval(args[1]),))

elif cmd == 'timResponseMessageIq':
    if len(args) != 3:
        print('timResponseMessageIq requires 3 args')
        sys.exit(1)
    pp.pprint(client.timResponseMessageIq(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'timResponsePresenceList':
    if len(args) != 2:
        print('timResponsePresenceList requires 2 args')
        sys.exit(1)
    pp.pprint(client.timResponsePresenceList(eval(args[0]), eval(args[1]),))

elif cmd == 'timResponseMessageList':
    if len(args) != 2:
        print('timResponseMessageList requires 2 args')
        sys.exit(1)
    pp.pprint(client.timResponseMessageList(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
