#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
use 5.10.0;
use strict;
use warnings;
use Thrift::Exception;
use Thrift::MessageType;
use Thrift::Type;


package TimError;
use base qw(Class::Accessor);
TimError->mk_accessors( qw( errCode errMsg ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{errCode} = undef;
  $self->{errMsg} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{errCode}) {
      $self->{errCode} = $vals->{errCode};
    }
    if (defined $vals->{errMsg}) {
      $self->{errMsg} = $vals->{errMsg};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimError';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{errCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{errMsg});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimError');
  if (defined $self->{errCode}) {
    $xfer += $output->writeFieldBegin('errCode', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{errCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{errMsg}) {
    $xfer += $output->writeFieldBegin('errMsg', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{errMsg});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimNode;
use base qw(Class::Accessor);
TimNode->mk_accessors( qw( key value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{key} = undef;
  $self->{value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimNode';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimNode');
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimAckBean;
use base qw(Class::Accessor);
TimAckBean->mk_accessors( qw( id ackType ackStatus extraList err extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{id} = undef;
  $self->{ackType} = undef;
  $self->{ackStatus} = undef;
  $self->{extraList} = undef;
  $self->{err} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{ackType}) {
      $self->{ackType} = $vals->{ackType};
    }
    if (defined $vals->{ackStatus}) {
      $self->{ackStatus} = $vals->{ackStatus};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{err}) {
      $self->{err} = $vals->{err};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimAckBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{ackType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{ackStatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size0 = 0;
          $self->{extraList} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $elem5 = TimNode->new();
            $xfer += $elem5->read($input);
            push(@{$self->{extraList}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{err} = TimError->new();
        $xfer += $self->{err}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size6 = 0;
          $self->{extraMap} = {};
          my $_ktype7 = 0;
          my $_vtype8 = 0;
          $xfer += $input->readMapBegin(\$_ktype7, \$_vtype8, \$_size6);
          for (my $_i10 = 0; $_i10 < $_size6; ++$_i10)
          {
            my $key11 = '';
            my $val12 = '';
            $xfer += $input->readString(\$key11);
            $xfer += $input->readString(\$val12);
            $self->{extraMap}->{$key11} = $val12;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimAckBean');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ackType}) {
    $xfer += $output->writeFieldBegin('ackType', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{ackType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ackStatus}) {
    $xfer += $output->writeFieldBegin('ackStatus', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{ackStatus});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter13 (@{$self->{extraList}}) 
        {
          $xfer += ${iter13}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{err}) {
    $xfer += $output->writeFieldBegin('err', Thrift::TType::STRUCT, 5);
    $xfer += $self->{err}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 6);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter14,$viter15) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter14);
          $xfer += $output->writeString($viter15);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimHBean;
use base qw(Class::Accessor);
TimHBean->mk_accessors( qw( chl platform version ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{chl} = undef;
  $self->{platform} = undef;
  $self->{version} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{chl}) {
      $self->{chl} = $vals->{chl};
    }
    if (defined $vals->{platform}) {
      $self->{platform} = $vals->{platform};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimHBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{chl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{platform});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I16) {
        $xfer += $input->readI16(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimHBean');
  if (defined $self->{chl}) {
    $xfer += $output->writeFieldBegin('chl', Thrift::TType::I32, 1);
    $xfer += $output->writeI32($self->{chl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{platform}) {
    $xfer += $output->writeFieldBegin('platform', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{platform});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', Thrift::TType::I16, 3);
    $xfer += $output->writeI16($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimParam;
use base qw(Class::Accessor);
TimParam->mk_accessors( qw( timestamp version lang extraList extraMap interflow tls ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{timestamp} = undef;
  $self->{version} = undef;
  $self->{lang} = undef;
  $self->{extraList} = undef;
  $self->{extraMap} = undef;
  $self->{interflow} = undef;
  $self->{tls} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{lang}) {
      $self->{lang} = $vals->{lang};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
    if (defined $vals->{interflow}) {
      $self->{interflow} = $vals->{interflow};
    }
    if (defined $vals->{tls}) {
      $self->{tls} = $vals->{tls};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimParam';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I16) {
        $xfer += $input->readI16(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{lang});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size16 = 0;
          $self->{extraList} = [];
          my $_etype19 = 0;
          $xfer += $input->readListBegin(\$_etype19, \$_size16);
          for (my $_i20 = 0; $_i20 < $_size16; ++$_i20)
          {
            my $elem21 = undef;
            $elem21 = TimNode->new();
            $xfer += $elem21->read($input);
            push(@{$self->{extraList}},$elem21);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size22 = 0;
          $self->{extraMap} = {};
          my $_ktype23 = 0;
          my $_vtype24 = 0;
          $xfer += $input->readMapBegin(\$_ktype23, \$_vtype24, \$_size22);
          for (my $_i26 = 0; $_i26 < $_size22; ++$_i26)
          {
            my $key27 = '';
            my $val28 = '';
            $xfer += $input->readString(\$key27);
            $xfer += $input->readString(\$val28);
            $self->{extraMap}->{$key27} = $val28;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{interflow});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{tls});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimParam');
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', Thrift::TType::I16, 2);
    $xfer += $output->writeI16($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{lang}) {
    $xfer += $output->writeFieldBegin('lang', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{lang});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter29 (@{$self->{extraList}}) 
        {
          $xfer += ${iter29}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 5);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter30,$viter31) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter30);
          $xfer += $output->writeString($viter31);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{interflow}) {
    $xfer += $output->writeFieldBegin('interflow', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{interflow});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tls}) {
    $xfer += $output->writeFieldBegin('tls', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{tls});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimTime;
use base qw(Class::Accessor);
TimTime->mk_accessors( qw( timestamp formattime ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{timestamp} = undef;
  $self->{formattime} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{formattime}) {
      $self->{formattime} = $vals->{formattime};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimTime';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{formattime});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimTime');
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{formattime}) {
    $xfer += $output->writeFieldBegin('formattime', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{formattime});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimArea;
use base qw(Class::Accessor);
TimArea->mk_accessors( qw( country province city extraList extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{country} = undef;
  $self->{province} = undef;
  $self->{city} = undef;
  $self->{extraList} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{country}) {
      $self->{country} = $vals->{country};
    }
    if (defined $vals->{province}) {
      $self->{province} = $vals->{province};
    }
    if (defined $vals->{city}) {
      $self->{city} = $vals->{city};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimArea';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{country});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{province});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{city});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size32 = 0;
          $self->{extraList} = [];
          my $_etype35 = 0;
          $xfer += $input->readListBegin(\$_etype35, \$_size32);
          for (my $_i36 = 0; $_i36 < $_size32; ++$_i36)
          {
            my $elem37 = undef;
            $elem37 = TimNode->new();
            $xfer += $elem37->read($input);
            push(@{$self->{extraList}},$elem37);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size38 = 0;
          $self->{extraMap} = {};
          my $_ktype39 = 0;
          my $_vtype40 = 0;
          $xfer += $input->readMapBegin(\$_ktype39, \$_vtype40, \$_size38);
          for (my $_i42 = 0; $_i42 < $_size38; ++$_i42)
          {
            my $key43 = '';
            my $val44 = '';
            $xfer += $input->readString(\$key43);
            $xfer += $input->readString(\$val44);
            $self->{extraMap}->{$key43} = $val44;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimArea');
  if (defined $self->{country}) {
    $xfer += $output->writeFieldBegin('country', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{country});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{province}) {
    $xfer += $output->writeFieldBegin('province', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{province});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{city}) {
    $xfer += $output->writeFieldBegin('city', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{city});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter45 (@{$self->{extraList}}) 
        {
          $xfer += ${iter45}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 5);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter46,$viter47) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter46);
          $xfer += $output->writeString($viter47);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Tid;
use base qw(Class::Accessor);
Tid->mk_accessors( qw( name domain resource type extraList extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{name} = undef;
  $self->{domain} = undef;
  $self->{resource} = undef;
  $self->{type} = undef;
  $self->{extraList} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{domain}) {
      $self->{domain} = $vals->{domain};
    }
    if (defined $vals->{resource}) {
      $self->{resource} = $vals->{resource};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'Tid';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{domain});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{resource});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size48 = 0;
          $self->{extraList} = [];
          my $_etype51 = 0;
          $xfer += $input->readListBegin(\$_etype51, \$_size48);
          for (my $_i52 = 0; $_i52 < $_size48; ++$_i52)
          {
            my $elem53 = undef;
            $elem53 = TimNode->new();
            $xfer += $elem53->read($input);
            push(@{$self->{extraList}},$elem53);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size54 = 0;
          $self->{extraMap} = {};
          my $_ktype55 = 0;
          my $_vtype56 = 0;
          $xfer += $input->readMapBegin(\$_ktype55, \$_vtype56, \$_size54);
          for (my $_i58 = 0; $_i58 < $_size54; ++$_i58)
          {
            my $key59 = '';
            my $val60 = '';
            $xfer += $input->readString(\$key59);
            $xfer += $input->readString(\$val60);
            $self->{extraMap}->{$key59} = $val60;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Tid');
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{domain}) {
    $xfer += $output->writeFieldBegin('domain', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{domain});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{resource}) {
    $xfer += $output->writeFieldBegin('resource', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{resource});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 5);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter61 (@{$self->{extraList}}) 
        {
          $xfer += ${iter61}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 6);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter62,$viter63) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter62);
          $xfer += $output->writeString($viter63);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimUserBean;
use base qw(Class::Accessor);
TimUserBean->mk_accessors( qw( tid nickname remarkname brithday gender headurl area headbyte photoBytes extraList extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{tid} = undef;
  $self->{nickname} = undef;
  $self->{remarkname} = undef;
  $self->{brithday} = undef;
  $self->{gender} = undef;
  $self->{headurl} = undef;
  $self->{area} = undef;
  $self->{headbyte} = undef;
  $self->{photoBytes} = undef;
  $self->{extraList} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tid}) {
      $self->{tid} = $vals->{tid};
    }
    if (defined $vals->{nickname}) {
      $self->{nickname} = $vals->{nickname};
    }
    if (defined $vals->{remarkname}) {
      $self->{remarkname} = $vals->{remarkname};
    }
    if (defined $vals->{brithday}) {
      $self->{brithday} = $vals->{brithday};
    }
    if (defined $vals->{gender}) {
      $self->{gender} = $vals->{gender};
    }
    if (defined $vals->{headurl}) {
      $self->{headurl} = $vals->{headurl};
    }
    if (defined $vals->{area}) {
      $self->{area} = $vals->{area};
    }
    if (defined $vals->{headbyte}) {
      $self->{headbyte} = $vals->{headbyte};
    }
    if (defined $vals->{photoBytes}) {
      $self->{photoBytes} = $vals->{photoBytes};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimUserBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{tid} = Tid->new();
        $xfer += $self->{tid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{nickname});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{remarkname});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{brithday});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I16) {
        $xfer += $input->readI16(\$self->{gender});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{headurl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{area} = TimArea->new();
        $xfer += $self->{area}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{headbyte});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size64 = 0;
          $self->{photoBytes} = [];
          my $_etype67 = 0;
          $xfer += $input->readListBegin(\$_etype67, \$_size64);
          for (my $_i68 = 0; $_i68 < $_size64; ++$_i68)
          {
            my $elem69 = undef;
            $xfer += $input->readString(\$elem69);
            push(@{$self->{photoBytes}},$elem69);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size70 = 0;
          $self->{extraList} = [];
          my $_etype73 = 0;
          $xfer += $input->readListBegin(\$_etype73, \$_size70);
          for (my $_i74 = 0; $_i74 < $_size70; ++$_i74)
          {
            my $elem75 = undef;
            $elem75 = TimNode->new();
            $xfer += $elem75->read($input);
            push(@{$self->{extraList}},$elem75);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size76 = 0;
          $self->{extraMap} = {};
          my $_ktype77 = 0;
          my $_vtype78 = 0;
          $xfer += $input->readMapBegin(\$_ktype77, \$_vtype78, \$_size76);
          for (my $_i80 = 0; $_i80 < $_size76; ++$_i80)
          {
            my $key81 = '';
            my $val82 = '';
            $xfer += $input->readString(\$key81);
            $xfer += $input->readString(\$val82);
            $self->{extraMap}->{$key81} = $val82;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimUserBean');
  if (defined $self->{tid}) {
    $xfer += $output->writeFieldBegin('tid', Thrift::TType::STRUCT, 1);
    $xfer += $self->{tid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nickname}) {
    $xfer += $output->writeFieldBegin('nickname', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{nickname});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{remarkname}) {
    $xfer += $output->writeFieldBegin('remarkname', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{remarkname});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{brithday}) {
    $xfer += $output->writeFieldBegin('brithday', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{brithday});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gender}) {
    $xfer += $output->writeFieldBegin('gender', Thrift::TType::I16, 5);
    $xfer += $output->writeI16($self->{gender});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{headurl}) {
    $xfer += $output->writeFieldBegin('headurl', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{headurl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{area}) {
    $xfer += $output->writeFieldBegin('area', Thrift::TType::STRUCT, 7);
    $xfer += $self->{area}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{headbyte}) {
    $xfer += $output->writeFieldBegin('headbyte', Thrift::TType::STRING, 8);
    $xfer += $output->writeString($self->{headbyte});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{photoBytes}) {
    $xfer += $output->writeFieldBegin('photoBytes', Thrift::TType::LIST, 9);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{photoBytes}}));
      {
        foreach my $iter83 (@{$self->{photoBytes}}) 
        {
          $xfer += $output->writeString($iter83);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter84 (@{$self->{extraList}}) 
        {
          $xfer += ${iter84}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 11);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter85,$viter86) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter85);
          $xfer += $output->writeString($viter86);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimRoom;
use base qw(Class::Accessor);
TimRoom->mk_accessors( qw( tid founderTid HostsTid membersTid headurl roomName desc createTime extraList extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{tid} = undef;
  $self->{founderTid} = undef;
  $self->{HostsTid} = undef;
  $self->{membersTid} = undef;
  $self->{headurl} = undef;
  $self->{roomName} = undef;
  $self->{desc} = undef;
  $self->{createTime} = undef;
  $self->{extraList} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tid}) {
      $self->{tid} = $vals->{tid};
    }
    if (defined $vals->{founderTid}) {
      $self->{founderTid} = $vals->{founderTid};
    }
    if (defined $vals->{HostsTid}) {
      $self->{HostsTid} = $vals->{HostsTid};
    }
    if (defined $vals->{membersTid}) {
      $self->{membersTid} = $vals->{membersTid};
    }
    if (defined $vals->{headurl}) {
      $self->{headurl} = $vals->{headurl};
    }
    if (defined $vals->{roomName}) {
      $self->{roomName} = $vals->{roomName};
    }
    if (defined $vals->{desc}) {
      $self->{desc} = $vals->{desc};
    }
    if (defined $vals->{createTime}) {
      $self->{createTime} = $vals->{createTime};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimRoom';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{tid} = Tid->new();
        $xfer += $self->{tid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{founderTid} = Tid->new();
        $xfer += $self->{founderTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size87 = 0;
          $self->{HostsTid} = [];
          my $_etype90 = 0;
          $xfer += $input->readListBegin(\$_etype90, \$_size87);
          for (my $_i91 = 0; $_i91 < $_size87; ++$_i91)
          {
            my $elem92 = undef;
            $elem92 = Tid->new();
            $xfer += $elem92->read($input);
            push(@{$self->{HostsTid}},$elem92);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size93 = 0;
          $self->{membersTid} = [];
          my $_etype96 = 0;
          $xfer += $input->readListBegin(\$_etype96, \$_size93);
          for (my $_i97 = 0; $_i97 < $_size93; ++$_i97)
          {
            my $elem98 = undef;
            $elem98 = Tid->new();
            $xfer += $elem98->read($input);
            push(@{$self->{membersTid}},$elem98);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{headurl});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{roomName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{desc});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{createTime} = TimTime->new();
        $xfer += $self->{createTime}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size99 = 0;
          $self->{extraList} = [];
          my $_etype102 = 0;
          $xfer += $input->readListBegin(\$_etype102, \$_size99);
          for (my $_i103 = 0; $_i103 < $_size99; ++$_i103)
          {
            my $elem104 = undef;
            $elem104 = TimNode->new();
            $xfer += $elem104->read($input);
            push(@{$self->{extraList}},$elem104);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size105 = 0;
          $self->{extraMap} = {};
          my $_ktype106 = 0;
          my $_vtype107 = 0;
          $xfer += $input->readMapBegin(\$_ktype106, \$_vtype107, \$_size105);
          for (my $_i109 = 0; $_i109 < $_size105; ++$_i109)
          {
            my $key110 = '';
            my $val111 = '';
            $xfer += $input->readString(\$key110);
            $xfer += $input->readString(\$val111);
            $self->{extraMap}->{$key110} = $val111;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimRoom');
  if (defined $self->{tid}) {
    $xfer += $output->writeFieldBegin('tid', Thrift::TType::STRUCT, 1);
    $xfer += $self->{tid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{founderTid}) {
    $xfer += $output->writeFieldBegin('founderTid', Thrift::TType::STRUCT, 2);
    $xfer += $self->{founderTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{HostsTid}) {
    $xfer += $output->writeFieldBegin('HostsTid', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{HostsTid}}));
      {
        foreach my $iter112 (@{$self->{HostsTid}}) 
        {
          $xfer += ${iter112}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{membersTid}) {
    $xfer += $output->writeFieldBegin('membersTid', Thrift::TType::LIST, 4);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{membersTid}}));
      {
        foreach my $iter113 (@{$self->{membersTid}}) 
        {
          $xfer += ${iter113}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{headurl}) {
    $xfer += $output->writeFieldBegin('headurl', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{headurl});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{roomName}) {
    $xfer += $output->writeFieldBegin('roomName', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{roomName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{desc}) {
    $xfer += $output->writeFieldBegin('desc', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{desc});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{createTime}) {
    $xfer += $output->writeFieldBegin('createTime', Thrift::TType::STRUCT, 8);
    $xfer += $self->{createTime}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 9);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter114 (@{$self->{extraList}}) 
        {
          $xfer += ${iter114}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 10);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter115,$viter116) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter115);
          $xfer += $output->writeString($viter116);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimPBean;
use base qw(Class::Accessor);
TimPBean->mk_accessors( qw( threadId fromTid toTid status type priority show leaguerTid extraList error extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{threadId} = undef;
  $self->{fromTid} = undef;
  $self->{toTid} = undef;
  $self->{status} = undef;
  $self->{type} = undef;
  $self->{priority} = undef;
  $self->{show} = undef;
  $self->{leaguerTid} = undef;
  $self->{extraList} = undef;
  $self->{error} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{threadId}) {
      $self->{threadId} = $vals->{threadId};
    }
    if (defined $vals->{fromTid}) {
      $self->{fromTid} = $vals->{fromTid};
    }
    if (defined $vals->{toTid}) {
      $self->{toTid} = $vals->{toTid};
    }
    if (defined $vals->{status}) {
      $self->{status} = $vals->{status};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{priority}) {
      $self->{priority} = $vals->{priority};
    }
    if (defined $vals->{show}) {
      $self->{show} = $vals->{show};
    }
    if (defined $vals->{leaguerTid}) {
      $self->{leaguerTid} = $vals->{leaguerTid};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimPBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{threadId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{fromTid} = Tid->new();
        $xfer += $self->{fromTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{toTid} = Tid->new();
        $xfer += $self->{toTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{status});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{priority});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{show});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{leaguerTid} = Tid->new();
        $xfer += $self->{leaguerTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size117 = 0;
          $self->{extraList} = [];
          my $_etype120 = 0;
          $xfer += $input->readListBegin(\$_etype120, \$_size117);
          for (my $_i121 = 0; $_i121 < $_size117; ++$_i121)
          {
            my $elem122 = undef;
            $elem122 = TimNode->new();
            $xfer += $elem122->read($input);
            push(@{$self->{extraList}},$elem122);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{error} = TimError->new();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size123 = 0;
          $self->{extraMap} = {};
          my $_ktype124 = 0;
          my $_vtype125 = 0;
          $xfer += $input->readMapBegin(\$_ktype124, \$_vtype125, \$_size123);
          for (my $_i127 = 0; $_i127 < $_size123; ++$_i127)
          {
            my $key128 = '';
            my $val129 = '';
            $xfer += $input->readString(\$key128);
            $xfer += $input->readString(\$val129);
            $self->{extraMap}->{$key128} = $val129;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimPBean');
  if (defined $self->{threadId}) {
    $xfer += $output->writeFieldBegin('threadId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{threadId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromTid}) {
    $xfer += $output->writeFieldBegin('fromTid', Thrift::TType::STRUCT, 2);
    $xfer += $self->{fromTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toTid}) {
    $xfer += $output->writeFieldBegin('toTid', Thrift::TType::STRUCT, 3);
    $xfer += $self->{toTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{status}) {
    $xfer += $output->writeFieldBegin('status', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{status});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{priority}) {
    $xfer += $output->writeFieldBegin('priority', Thrift::TType::I32, 6);
    $xfer += $output->writeI32($self->{priority});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{show}) {
    $xfer += $output->writeFieldBegin('show', Thrift::TType::STRING, 7);
    $xfer += $output->writeString($self->{show});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{leaguerTid}) {
    $xfer += $output->writeFieldBegin('leaguerTid', Thrift::TType::STRUCT, 8);
    $xfer += $self->{leaguerTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 9);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter130 (@{$self->{extraList}}) 
        {
          $xfer += ${iter130}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', Thrift::TType::STRUCT, 10);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 11);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter131,$viter132) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter131);
          $xfer += $output->writeString($viter132);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimMBean;
use base qw(Class::Accessor);
TimMBean->mk_accessors( qw( threadId mid fromTid toTid body type msgType offline leaguerTid extraList timestamp error extraMap readstatus ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{threadId} = undef;
  $self->{mid} = undef;
  $self->{fromTid} = undef;
  $self->{toTid} = undef;
  $self->{body} = undef;
  $self->{type} = undef;
  $self->{msgType} = undef;
  $self->{offline} = undef;
  $self->{leaguerTid} = undef;
  $self->{extraList} = undef;
  $self->{timestamp} = undef;
  $self->{error} = undef;
  $self->{extraMap} = undef;
  $self->{readstatus} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{threadId}) {
      $self->{threadId} = $vals->{threadId};
    }
    if (defined $vals->{mid}) {
      $self->{mid} = $vals->{mid};
    }
    if (defined $vals->{fromTid}) {
      $self->{fromTid} = $vals->{fromTid};
    }
    if (defined $vals->{toTid}) {
      $self->{toTid} = $vals->{toTid};
    }
    if (defined $vals->{body}) {
      $self->{body} = $vals->{body};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{msgType}) {
      $self->{msgType} = $vals->{msgType};
    }
    if (defined $vals->{offline}) {
      $self->{offline} = $vals->{offline};
    }
    if (defined $vals->{leaguerTid}) {
      $self->{leaguerTid} = $vals->{leaguerTid};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
    if (defined $vals->{readstatus}) {
      $self->{readstatus} = $vals->{readstatus};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimMBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{threadId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{mid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{fromTid} = Tid->new();
        $xfer += $self->{fromTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{toTid} = Tid->new();
        $xfer += $self->{toTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{body});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::I16) {
        $xfer += $input->readI16(\$self->{msgType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{offline} = TimTime->new();
        $xfer += $self->{offline}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{leaguerTid} = Tid->new();
        $xfer += $self->{leaguerTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size133 = 0;
          $self->{extraList} = [];
          my $_etype136 = 0;
          $xfer += $input->readListBegin(\$_etype136, \$_size133);
          for (my $_i137 = 0; $_i137 < $_size133; ++$_i137)
          {
            my $elem138 = undef;
            $elem138 = TimNode->new();
            $xfer += $elem138->read($input);
            push(@{$self->{extraList}},$elem138);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{error} = TimError->new();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size139 = 0;
          $self->{extraMap} = {};
          my $_ktype140 = 0;
          my $_vtype141 = 0;
          $xfer += $input->readMapBegin(\$_ktype140, \$_vtype141, \$_size139);
          for (my $_i143 = 0; $_i143 < $_size139; ++$_i143)
          {
            my $key144 = '';
            my $val145 = '';
            $xfer += $input->readString(\$key144);
            $xfer += $input->readString(\$val145);
            $self->{extraMap}->{$key144} = $val145;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == Thrift::TType::I16) {
        $xfer += $input->readI16(\$self->{readstatus});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimMBean');
  if (defined $self->{threadId}) {
    $xfer += $output->writeFieldBegin('threadId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{threadId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mid}) {
    $xfer += $output->writeFieldBegin('mid', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{mid});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromTid}) {
    $xfer += $output->writeFieldBegin('fromTid', Thrift::TType::STRUCT, 3);
    $xfer += $self->{fromTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toTid}) {
    $xfer += $output->writeFieldBegin('toTid', Thrift::TType::STRUCT, 4);
    $xfer += $self->{toTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{body}) {
    $xfer += $output->writeFieldBegin('body', Thrift::TType::STRING, 5);
    $xfer += $output->writeString($self->{body});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{msgType}) {
    $xfer += $output->writeFieldBegin('msgType', Thrift::TType::I16, 7);
    $xfer += $output->writeI16($self->{msgType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{offline}) {
    $xfer += $output->writeFieldBegin('offline', Thrift::TType::STRUCT, 8);
    $xfer += $self->{offline}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{leaguerTid}) {
    $xfer += $output->writeFieldBegin('leaguerTid', Thrift::TType::STRUCT, 9);
    $xfer += $self->{leaguerTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 10);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter146 (@{$self->{extraList}}) 
        {
          $xfer += ${iter146}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', Thrift::TType::STRING, 11);
    $xfer += $output->writeString($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', Thrift::TType::STRUCT, 12);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 13);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter147,$viter148) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter147);
          $xfer += $output->writeString($viter148);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{readstatus}) {
    $xfer += $output->writeFieldBegin('readstatus', Thrift::TType::I16, 14);
    $xfer += $output->writeI16($self->{readstatus});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimIqBean;
use base qw(Class::Accessor);
TimIqBean->mk_accessors( qw( threadId fromTid toTid type extraList error extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{threadId} = undef;
  $self->{fromTid} = undef;
  $self->{toTid} = undef;
  $self->{type} = undef;
  $self->{extraList} = undef;
  $self->{error} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{threadId}) {
      $self->{threadId} = $vals->{threadId};
    }
    if (defined $vals->{fromTid}) {
      $self->{fromTid} = $vals->{fromTid};
    }
    if (defined $vals->{toTid}) {
      $self->{toTid} = $vals->{toTid};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimIqBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{threadId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{fromTid} = Tid->new();
        $xfer += $self->{fromTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{toTid} = Tid->new();
        $xfer += $self->{toTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size149 = 0;
          $self->{extraList} = [];
          my $_etype152 = 0;
          $xfer += $input->readListBegin(\$_etype152, \$_size149);
          for (my $_i153 = 0; $_i153 < $_size149; ++$_i153)
          {
            my $elem154 = undef;
            $elem154 = TimNode->new();
            $xfer += $elem154->read($input);
            push(@{$self->{extraList}},$elem154);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{error} = TimError->new();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size155 = 0;
          $self->{extraMap} = {};
          my $_ktype156 = 0;
          my $_vtype157 = 0;
          $xfer += $input->readMapBegin(\$_ktype156, \$_vtype157, \$_size155);
          for (my $_i159 = 0; $_i159 < $_size155; ++$_i159)
          {
            my $key160 = '';
            my $val161 = '';
            $xfer += $input->readString(\$key160);
            $xfer += $input->readString(\$val161);
            $self->{extraMap}->{$key160} = $val161;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimIqBean');
  if (defined $self->{threadId}) {
    $xfer += $output->writeFieldBegin('threadId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{threadId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{fromTid}) {
    $xfer += $output->writeFieldBegin('fromTid', Thrift::TType::STRUCT, 2);
    $xfer += $self->{fromTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toTid}) {
    $xfer += $output->writeFieldBegin('toTid', Thrift::TType::STRUCT, 3);
    $xfer += $self->{toTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', Thrift::TType::STRING, 4);
    $xfer += $output->writeString($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 5);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter162 (@{$self->{extraList}}) 
        {
          $xfer += ${iter162}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', Thrift::TType::STRUCT, 6);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 7);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter163,$viter164) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter163);
          $xfer += $output->writeString($viter164);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimRoster;
use base qw(Class::Accessor);
TimRoster->mk_accessors( qw( subscription tid name extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{subscription} = undef;
  $self->{tid} = undef;
  $self->{name} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{subscription}) {
      $self->{subscription} = $vals->{subscription};
    }
    if (defined $vals->{tid}) {
      $self->{tid} = $vals->{tid};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimRoster';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{subscription});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{tid} = Tid->new();
        $xfer += $self->{tid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size165 = 0;
          $self->{extraMap} = {};
          my $_ktype166 = 0;
          my $_vtype167 = 0;
          $xfer += $input->readMapBegin(\$_ktype166, \$_vtype167, \$_size165);
          for (my $_i169 = 0; $_i169 < $_size165; ++$_i169)
          {
            my $key170 = '';
            my $val171 = '';
            $xfer += $input->readString(\$key170);
            $xfer += $input->readString(\$val171);
            $self->{extraMap}->{$key170} = $val171;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimRoster');
  if (defined $self->{subscription}) {
    $xfer += $output->writeFieldBegin('subscription', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{subscription});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tid}) {
    $xfer += $output->writeFieldBegin('tid', Thrift::TType::STRUCT, 2);
    $xfer += $self->{tid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter172,$viter173) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter172);
          $xfer += $output->writeString($viter173);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimRemoteUserBean;
use base qw(Class::Accessor);
TimRemoteUserBean->mk_accessors( qw( error ub extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{error} = undef;
  $self->{ub} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{ub}) {
      $self->{ub} = $vals->{ub};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimRemoteUserBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{error} = TimError->new();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{ub} = TimUserBean->new();
        $xfer += $self->{ub}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size174 = 0;
          $self->{extraMap} = {};
          my $_ktype175 = 0;
          my $_vtype176 = 0;
          $xfer += $input->readMapBegin(\$_ktype175, \$_vtype176, \$_size174);
          for (my $_i178 = 0; $_i178 < $_size174; ++$_i178)
          {
            my $key179 = '';
            my $val180 = '';
            $xfer += $input->readString(\$key179);
            $xfer += $input->readString(\$val180);
            $self->{extraMap}->{$key179} = $val180;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimRemoteUserBean');
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', Thrift::TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ub}) {
    $xfer += $output->writeFieldBegin('ub', Thrift::TType::STRUCT, 2);
    $xfer += $self->{ub}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter181,$viter182) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter181);
          $xfer += $output->writeString($viter182);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimRemoteRoom;
use base qw(Class::Accessor);
TimRemoteRoom->mk_accessors( qw( error room extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{error} = undef;
  $self->{room} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{room}) {
      $self->{room} = $vals->{room};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimRemoteRoom';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{error} = TimError->new();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{room} = TimRoom->new();
        $xfer += $self->{room}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size183 = 0;
          $self->{extraMap} = {};
          my $_ktype184 = 0;
          my $_vtype185 = 0;
          $xfer += $input->readMapBegin(\$_ktype184, \$_vtype185, \$_size183);
          for (my $_i187 = 0; $_i187 < $_size183; ++$_i187)
          {
            my $key188 = '';
            my $val189 = '';
            $xfer += $input->readString(\$key188);
            $xfer += $input->readString(\$val189);
            $self->{extraMap}->{$key188} = $val189;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimRemoteRoom');
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', Thrift::TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{room}) {
    $xfer += $output->writeFieldBegin('room', Thrift::TType::STRUCT, 2);
    $xfer += $self->{room}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 3);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter190,$viter191) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter190);
          $xfer += $output->writeString($viter191);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimResponseBean;
use base qw(Class::Accessor);
TimResponseBean->mk_accessors( qw( threadId error extraList extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{threadId} = undef;
  $self->{error} = undef;
  $self->{extraList} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{threadId}) {
      $self->{threadId} = $vals->{threadId};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{extraList}) {
      $self->{extraList} = $vals->{extraList};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimResponseBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{threadId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{error} = TimError->new();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size192 = 0;
          $self->{extraList} = [];
          my $_etype195 = 0;
          $xfer += $input->readListBegin(\$_etype195, \$_size192);
          for (my $_i196 = 0; $_i196 < $_size192; ++$_i196)
          {
            my $elem197 = undef;
            $elem197 = TimNode->new();
            $xfer += $elem197->read($input);
            push(@{$self->{extraList}},$elem197);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size198 = 0;
          $self->{extraMap} = {};
          my $_ktype199 = 0;
          my $_vtype200 = 0;
          $xfer += $input->readMapBegin(\$_ktype199, \$_vtype200, \$_size198);
          for (my $_i202 = 0; $_i202 < $_size198; ++$_i202)
          {
            my $key203 = '';
            my $val204 = '';
            $xfer += $input->readString(\$key203);
            $xfer += $input->readString(\$val204);
            $self->{extraMap}->{$key203} = $val204;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimResponseBean');
  if (defined $self->{threadId}) {
    $xfer += $output->writeFieldBegin('threadId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{threadId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', Thrift::TType::STRUCT, 2);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraList}) {
    $xfer += $output->writeFieldBegin('extraList', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{extraList}}));
      {
        foreach my $iter205 (@{$self->{extraList}}) 
        {
          $xfer += ${iter205}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter206,$viter207) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter206);
          $xfer += $output->writeString($viter207);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimSock5Bean;
use base qw(Class::Accessor);
TimSock5Bean->mk_accessors( qw( fromTid toTid addr port transport pubId extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{fromTid} = undef;
  $self->{toTid} = undef;
  $self->{addr} = undef;
  $self->{port} = undef;
  $self->{transport} = undef;
  $self->{pubId} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{fromTid}) {
      $self->{fromTid} = $vals->{fromTid};
    }
    if (defined $vals->{toTid}) {
      $self->{toTid} = $vals->{toTid};
    }
    if (defined $vals->{addr}) {
      $self->{addr} = $vals->{addr};
    }
    if (defined $vals->{port}) {
      $self->{port} = $vals->{port};
    }
    if (defined $vals->{transport}) {
      $self->{transport} = $vals->{transport};
    }
    if (defined $vals->{pubId}) {
      $self->{pubId} = $vals->{pubId};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimSock5Bean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{fromTid} = Tid->new();
        $xfer += $self->{fromTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{toTid} = Tid->new();
        $xfer += $self->{toTid}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{addr});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{port});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == Thrift::TType::I16) {
        $xfer += $input->readI16(\$self->{transport});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pubId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size208 = 0;
          $self->{extraMap} = {};
          my $_ktype209 = 0;
          my $_vtype210 = 0;
          $xfer += $input->readMapBegin(\$_ktype209, \$_vtype210, \$_size208);
          for (my $_i212 = 0; $_i212 < $_size208; ++$_i212)
          {
            my $key213 = '';
            my $val214 = '';
            $xfer += $input->readString(\$key213);
            $xfer += $input->readString(\$val214);
            $self->{extraMap}->{$key213} = $val214;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimSock5Bean');
  if (defined $self->{fromTid}) {
    $xfer += $output->writeFieldBegin('fromTid', Thrift::TType::STRUCT, 1);
    $xfer += $self->{fromTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toTid}) {
    $xfer += $output->writeFieldBegin('toTid', Thrift::TType::STRUCT, 2);
    $xfer += $self->{toTid}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{addr}) {
    $xfer += $output->writeFieldBegin('addr', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{addr});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{port}) {
    $xfer += $output->writeFieldBegin('port', Thrift::TType::I32, 4);
    $xfer += $output->writeI32($self->{port});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{transport}) {
    $xfer += $output->writeFieldBegin('transport', Thrift::TType::I16, 5);
    $xfer += $output->writeI16($self->{transport});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pubId}) {
    $xfer += $output->writeFieldBegin('pubId', Thrift::TType::STRING, 6);
    $xfer += $output->writeString($self->{pubId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 7);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter215,$viter216) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter215);
          $xfer += $output->writeString($viter216);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimSock5Bytes;
use base qw(Class::Accessor);
TimSock5Bytes->mk_accessors( qw( pubId index bytes extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{pubId} = undef;
  $self->{index} = undef;
  $self->{bytes} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{pubId}) {
      $self->{pubId} = $vals->{pubId};
    }
    if (defined $vals->{index}) {
      $self->{index} = $vals->{index};
    }
    if (defined $vals->{bytes}) {
      $self->{bytes} = $vals->{bytes};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimSock5Bytes';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pubId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{index});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size217 = 0;
          $self->{bytes} = [];
          my $_etype220 = 0;
          $xfer += $input->readListBegin(\$_etype220, \$_size217);
          for (my $_i221 = 0; $_i221 < $_size217; ++$_i221)
          {
            my $elem222 = undef;
            $xfer += $input->readString(\$elem222);
            push(@{$self->{bytes}},$elem222);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size223 = 0;
          $self->{extraMap} = {};
          my $_ktype224 = 0;
          my $_vtype225 = 0;
          $xfer += $input->readMapBegin(\$_ktype224, \$_vtype225, \$_size223);
          for (my $_i227 = 0; $_i227 < $_size223; ++$_i227)
          {
            my $key228 = '';
            my $val229 = '';
            $xfer += $input->readString(\$key228);
            $xfer += $input->readString(\$val229);
            $self->{extraMap}->{$key228} = $val229;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimSock5Bytes');
  if (defined $self->{pubId}) {
    $xfer += $output->writeFieldBegin('pubId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{pubId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{index}) {
    $xfer += $output->writeFieldBegin('index', Thrift::TType::I32, 2);
    $xfer += $output->writeI32($self->{index});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{bytes}) {
    $xfer += $output->writeFieldBegin('bytes', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{bytes}}));
      {
        foreach my $iter230 (@{$self->{bytes}}) 
        {
          $xfer += $output->writeString($iter230);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter231,$viter232) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter231);
          $xfer += $output->writeString($viter232);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimPage;
use base qw(Class::Accessor);
TimPage->mk_accessors( qw( fromTimeStamp toTimeStamp limitCount extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{fromTimeStamp} = undef;
  $self->{toTimeStamp} = undef;
  $self->{limitCount} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{fromTimeStamp}) {
      $self->{fromTimeStamp} = $vals->{fromTimeStamp};
    }
    if (defined $vals->{toTimeStamp}) {
      $self->{toTimeStamp} = $vals->{toTimeStamp};
    }
    if (defined $vals->{limitCount}) {
      $self->{limitCount} = $vals->{limitCount};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimPage';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{fromTimeStamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{toTimeStamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::I32) {
        $xfer += $input->readI32(\$self->{limitCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size233 = 0;
          $self->{extraMap} = {};
          my $_ktype234 = 0;
          my $_vtype235 = 0;
          $xfer += $input->readMapBegin(\$_ktype234, \$_vtype235, \$_size233);
          for (my $_i237 = 0; $_i237 < $_size233; ++$_i237)
          {
            my $key238 = '';
            my $val239 = '';
            $xfer += $input->readString(\$key238);
            $xfer += $input->readString(\$val239);
            $self->{extraMap}->{$key238} = $val239;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimPage');
  if (defined $self->{fromTimeStamp}) {
    $xfer += $output->writeFieldBegin('fromTimeStamp', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{fromTimeStamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{toTimeStamp}) {
    $xfer += $output->writeFieldBegin('toTimeStamp', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{toTimeStamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{limitCount}) {
    $xfer += $output->writeFieldBegin('limitCount', Thrift::TType::I32, 3);
    $xfer += $output->writeI32($self->{limitCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter240,$viter241) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter240);
          $xfer += $output->writeString($viter241);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimMessageIq;
use base qw(Class::Accessor);
TimMessageIq->mk_accessors( qw( tidlist timPage midlist extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{tidlist} = undef;
  $self->{timPage} = undef;
  $self->{midlist} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tidlist}) {
      $self->{tidlist} = $vals->{tidlist};
    }
    if (defined $vals->{timPage}) {
      $self->{timPage} = $vals->{timPage};
    }
    if (defined $vals->{midlist}) {
      $self->{midlist} = $vals->{midlist};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimMessageIq';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size242 = 0;
          $self->{tidlist} = [];
          my $_etype245 = 0;
          $xfer += $input->readListBegin(\$_etype245, \$_size242);
          for (my $_i246 = 0; $_i246 < $_size242; ++$_i246)
          {
            my $elem247 = undef;
            $xfer += $input->readString(\$elem247);
            push(@{$self->{tidlist}},$elem247);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRUCT) {
        $self->{timPage} = TimPage->new();
        $xfer += $self->{timPage}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size248 = 0;
          $self->{midlist} = [];
          my $_etype251 = 0;
          $xfer += $input->readListBegin(\$_etype251, \$_size248);
          for (my $_i252 = 0; $_i252 < $_size248; ++$_i252)
          {
            my $elem253 = undef;
            $xfer += $input->readString(\$elem253);
            push(@{$self->{midlist}},$elem253);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size254 = 0;
          $self->{extraMap} = {};
          my $_ktype255 = 0;
          my $_vtype256 = 0;
          $xfer += $input->readMapBegin(\$_ktype255, \$_vtype256, \$_size254);
          for (my $_i258 = 0; $_i258 < $_size254; ++$_i258)
          {
            my $key259 = '';
            my $val260 = '';
            $xfer += $input->readString(\$key259);
            $xfer += $input->readString(\$val260);
            $self->{extraMap}->{$key259} = $val260;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimMessageIq');
  if (defined $self->{tidlist}) {
    $xfer += $output->writeFieldBegin('tidlist', Thrift::TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{tidlist}}));
      {
        foreach my $iter261 (@{$self->{tidlist}}) 
        {
          $xfer += $output->writeString($iter261);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timPage}) {
    $xfer += $output->writeFieldBegin('timPage', Thrift::TType::STRUCT, 2);
    $xfer += $self->{timPage}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{midlist}) {
    $xfer += $output->writeFieldBegin('midlist', Thrift::TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRING, scalar(@{$self->{midlist}}));
      {
        foreach my $iter262 (@{$self->{midlist}}) 
        {
          $xfer += $output->writeString($iter262);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter263,$viter264) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter263);
          $xfer += $output->writeString($viter264);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimAuth;
use base qw(Class::Accessor);
TimAuth->mk_accessors( qw( domain username pwd ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{domain} = undef;
  $self->{username} = undef;
  $self->{pwd} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{domain}) {
      $self->{domain} = $vals->{domain};
    }
    if (defined $vals->{username}) {
      $self->{username} = $vals->{username};
    }
    if (defined $vals->{pwd}) {
      $self->{pwd} = $vals->{pwd};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimAuth';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{domain});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{username});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{pwd});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimAuth');
  if (defined $self->{domain}) {
    $xfer += $output->writeFieldBegin('domain', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{domain});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{username}) {
    $xfer += $output->writeFieldBegin('username', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{username});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pwd}) {
    $xfer += $output->writeFieldBegin('pwd', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{pwd});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimMBeanList;
use base qw(Class::Accessor);
TimMBeanList->mk_accessors( qw( threadId timMBeanList reqType extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{threadId} = undef;
  $self->{timMBeanList} = undef;
  $self->{reqType} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{threadId}) {
      $self->{threadId} = $vals->{threadId};
    }
    if (defined $vals->{timMBeanList}) {
      $self->{timMBeanList} = $vals->{timMBeanList};
    }
    if (defined $vals->{reqType}) {
      $self->{reqType} = $vals->{reqType};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimMBeanList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{threadId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size265 = 0;
          $self->{timMBeanList} = [];
          my $_etype268 = 0;
          $xfer += $input->readListBegin(\$_etype268, \$_size265);
          for (my $_i269 = 0; $_i269 < $_size265; ++$_i269)
          {
            my $elem270 = undef;
            $elem270 = TimMBean->new();
            $xfer += $elem270->read($input);
            push(@{$self->{timMBeanList}},$elem270);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reqType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size271 = 0;
          $self->{extraMap} = {};
          my $_ktype272 = 0;
          my $_vtype273 = 0;
          $xfer += $input->readMapBegin(\$_ktype272, \$_vtype273, \$_size271);
          for (my $_i275 = 0; $_i275 < $_size271; ++$_i275)
          {
            my $key276 = '';
            my $val277 = '';
            $xfer += $input->readString(\$key276);
            $xfer += $input->readString(\$val277);
            $self->{extraMap}->{$key276} = $val277;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimMBeanList');
  if (defined $self->{threadId}) {
    $xfer += $output->writeFieldBegin('threadId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{threadId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timMBeanList}) {
    $xfer += $output->writeFieldBegin('timMBeanList', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{timMBeanList}}));
      {
        foreach my $iter278 (@{$self->{timMBeanList}}) 
        {
          $xfer += ${iter278}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reqType}) {
    $xfer += $output->writeFieldBegin('reqType', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{reqType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter279,$viter280) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter279);
          $xfer += $output->writeString($viter280);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimPBeanList;
use base qw(Class::Accessor);
TimPBeanList->mk_accessors( qw( threadId timPBeanList reqType extraMap ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{threadId} = undef;
  $self->{timPBeanList} = undef;
  $self->{reqType} = undef;
  $self->{extraMap} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{threadId}) {
      $self->{threadId} = $vals->{threadId};
    }
    if (defined $vals->{timPBeanList}) {
      $self->{timPBeanList} = $vals->{timPBeanList};
    }
    if (defined $vals->{reqType}) {
      $self->{reqType} = $vals->{reqType};
    }
    if (defined $vals->{extraMap}) {
      $self->{extraMap} = $vals->{extraMap};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimPBeanList';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{threadId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::LIST) {
        {
          my $_size281 = 0;
          $self->{timPBeanList} = [];
          my $_etype284 = 0;
          $xfer += $input->readListBegin(\$_etype284, \$_size281);
          for (my $_i285 = 0; $_i285 < $_size281; ++$_i285)
          {
            my $elem286 = undef;
            $elem286 = TimPBean->new();
            $xfer += $elem286->read($input);
            push(@{$self->{timPBeanList}},$elem286);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{reqType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == Thrift::TType::MAP) {
        {
          my $_size287 = 0;
          $self->{extraMap} = {};
          my $_ktype288 = 0;
          my $_vtype289 = 0;
          $xfer += $input->readMapBegin(\$_ktype288, \$_vtype289, \$_size287);
          for (my $_i291 = 0; $_i291 < $_size287; ++$_i291)
          {
            my $key292 = '';
            my $val293 = '';
            $xfer += $input->readString(\$key292);
            $xfer += $input->readString(\$val293);
            $self->{extraMap}->{$key292} = $val293;
          }
          $xfer += $input->readMapEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimPBeanList');
  if (defined $self->{threadId}) {
    $xfer += $output->writeFieldBegin('threadId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{threadId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timPBeanList}) {
    $xfer += $output->writeFieldBegin('timPBeanList', Thrift::TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(Thrift::TType::STRUCT, scalar(@{$self->{timPBeanList}}));
      {
        foreach my $iter294 (@{$self->{timPBeanList}}) 
        {
          $xfer += ${iter294}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{reqType}) {
    $xfer += $output->writeFieldBegin('reqType', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{reqType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{extraMap}) {
    $xfer += $output->writeFieldBegin('extraMap', Thrift::TType::MAP, 4);
    {
      $xfer += $output->writeMapBegin(Thrift::TType::STRING, Thrift::TType::STRING, scalar(keys %{$self->{extraMap}}));
      {
        while( my ($kiter295,$viter296) = each %{$self->{extraMap}}) 
        {
          $xfer += $output->writeString($kiter295);
          $xfer += $output->writeString($viter296);
        }
      }
      $xfer += $output->writeMapEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package TimPropertyBean;
use base qw(Class::Accessor);
TimPropertyBean->mk_accessors( qw( threadId interflow tls ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{threadId} = undef;
  $self->{interflow} = undef;
  $self->{tls} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{threadId}) {
      $self->{threadId} = $vals->{threadId};
    }
    if (defined $vals->{interflow}) {
      $self->{interflow} = $vals->{interflow};
    }
    if (defined $vals->{tls}) {
      $self->{tls} = $vals->{tls};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'TimPropertyBean';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1)
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == Thrift::TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{threadId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{interflow});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == Thrift::TType::STRING) {
        $xfer += $input->readString(\$self->{tls});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('TimPropertyBean');
  if (defined $self->{threadId}) {
    $xfer += $output->writeFieldBegin('threadId', Thrift::TType::STRING, 1);
    $xfer += $output->writeString($self->{threadId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{interflow}) {
    $xfer += $output->writeFieldBegin('interflow', Thrift::TType::STRING, 2);
    $xfer += $output->writeString($self->{interflow});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tls}) {
    $xfer += $output->writeFieldBegin('tls', Thrift::TType::STRING, 3);
    $xfer += $output->writeString($self->{tls});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
