/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-11")
public class TimPage implements org.apache.thrift.TBase<TimPage, TimPage._Fields>, java.io.Serializable, Cloneable, Comparable<TimPage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimPage");

  private static final org.apache.thrift.protocol.TField FROM_TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTimeStamp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TO_TIME_STAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("toTimeStamp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LIMIT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("limitCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimPageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimPageTupleSchemeFactory();

  /**
   * 时间上
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String fromTimeStamp; // optional
  /**
   * 时间下
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String toTimeStamp; // optional
  /**
   * 条数
   */
  public int limitCount; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 时间上
     */
    FROM_TIME_STAMP((short)1, "fromTimeStamp"),
    /**
     * 时间下
     */
    TO_TIME_STAMP((short)2, "toTimeStamp"),
    /**
     * 条数
     */
    LIMIT_COUNT((short)3, "limitCount"),
    EXTRA_MAP((short)4, "extraMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FROM_TIME_STAMP
          return FROM_TIME_STAMP;
        case 2: // TO_TIME_STAMP
          return TO_TIME_STAMP;
        case 3: // LIMIT_COUNT
          return LIMIT_COUNT;
        case 4: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FROM_TIME_STAMP,_Fields.TO_TIME_STAMP,_Fields.LIMIT_COUNT,_Fields.EXTRA_MAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FROM_TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("fromTimeStamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_TIME_STAMP, new org.apache.thrift.meta_data.FieldMetaData("toTimeStamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("limitCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimPage.class, metaDataMap);
  }

  public TimPage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimPage(TimPage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFromTimeStamp()) {
      this.fromTimeStamp = other.fromTimeStamp;
    }
    if (other.isSetToTimeStamp()) {
      this.toTimeStamp = other.toTimeStamp;
    }
    this.limitCount = other.limitCount;
    if (other.isSetExtraMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.extraMap);
      this.extraMap = __this__extraMap;
    }
  }

  @Override
  public TimPage deepCopy() {
    return new TimPage(this);
  }

  @Override
  public void clear() {
    this.fromTimeStamp = null;
    this.toTimeStamp = null;
    setLimitCountIsSet(false);
    this.limitCount = 0;
    this.extraMap = null;
  }

  /**
   * 时间上
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFromTimeStamp() {
    return this.fromTimeStamp;
  }

  /**
   * 时间上
   */
  public TimPage setFromTimeStamp(@org.apache.thrift.annotation.Nullable java.lang.String fromTimeStamp) {
    this.fromTimeStamp = fromTimeStamp;
    return this;
  }

  public void unsetFromTimeStamp() {
    this.fromTimeStamp = null;
  }

  /** Returns true if field fromTimeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTimeStamp() {
    return this.fromTimeStamp != null;
  }

  public void setFromTimeStampIsSet(boolean value) {
    if (!value) {
      this.fromTimeStamp = null;
    }
  }

  /**
   * 时间下
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToTimeStamp() {
    return this.toTimeStamp;
  }

  /**
   * 时间下
   */
  public TimPage setToTimeStamp(@org.apache.thrift.annotation.Nullable java.lang.String toTimeStamp) {
    this.toTimeStamp = toTimeStamp;
    return this;
  }

  public void unsetToTimeStamp() {
    this.toTimeStamp = null;
  }

  /** Returns true if field toTimeStamp is set (has been assigned a value) and false otherwise */
  public boolean isSetToTimeStamp() {
    return this.toTimeStamp != null;
  }

  public void setToTimeStampIsSet(boolean value) {
    if (!value) {
      this.toTimeStamp = null;
    }
  }

  /**
   * 条数
   */
  public int getLimitCount() {
    return this.limitCount;
  }

  /**
   * 条数
   */
  public TimPage setLimitCount(int limitCount) {
    this.limitCount = limitCount;
    setLimitCountIsSet(true);
    return this;
  }

  public void unsetLimitCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITCOUNT_ISSET_ID);
  }

  /** Returns true if field limitCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITCOUNT_ISSET_ID);
  }

  public void setLimitCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITCOUNT_ISSET_ID, value);
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(java.lang.String key, java.lang.String val) {
    if (this.extraMap == null) {
      this.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extraMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtraMap() {
    return this.extraMap;
  }

  public TimPage setExtraMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FROM_TIME_STAMP:
      if (value == null) {
        unsetFromTimeStamp();
      } else {
        setFromTimeStamp((java.lang.String)value);
      }
      break;

    case TO_TIME_STAMP:
      if (value == null) {
        unsetToTimeStamp();
      } else {
        setToTimeStamp((java.lang.String)value);
      }
      break;

    case LIMIT_COUNT:
      if (value == null) {
        unsetLimitCount();
      } else {
        setLimitCount((java.lang.Integer)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FROM_TIME_STAMP:
      return getFromTimeStamp();

    case TO_TIME_STAMP:
      return getToTimeStamp();

    case LIMIT_COUNT:
      return getLimitCount();

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FROM_TIME_STAMP:
      return isSetFromTimeStamp();
    case TO_TIME_STAMP:
      return isSetToTimeStamp();
    case LIMIT_COUNT:
      return isSetLimitCount();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimPage)
      return this.equals((TimPage)that);
    return false;
  }

  public boolean equals(TimPage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fromTimeStamp = true && this.isSetFromTimeStamp();
    boolean that_present_fromTimeStamp = true && that.isSetFromTimeStamp();
    if (this_present_fromTimeStamp || that_present_fromTimeStamp) {
      if (!(this_present_fromTimeStamp && that_present_fromTimeStamp))
        return false;
      if (!this.fromTimeStamp.equals(that.fromTimeStamp))
        return false;
    }

    boolean this_present_toTimeStamp = true && this.isSetToTimeStamp();
    boolean that_present_toTimeStamp = true && that.isSetToTimeStamp();
    if (this_present_toTimeStamp || that_present_toTimeStamp) {
      if (!(this_present_toTimeStamp && that_present_toTimeStamp))
        return false;
      if (!this.toTimeStamp.equals(that.toTimeStamp))
        return false;
    }

    boolean this_present_limitCount = true && this.isSetLimitCount();
    boolean that_present_limitCount = true && that.isSetLimitCount();
    if (this_present_limitCount || that_present_limitCount) {
      if (!(this_present_limitCount && that_present_limitCount))
        return false;
      if (this.limitCount != that.limitCount)
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFromTimeStamp()) ? 131071 : 524287);
    if (isSetFromTimeStamp())
      hashCode = hashCode * 8191 + fromTimeStamp.hashCode();

    hashCode = hashCode * 8191 + ((isSetToTimeStamp()) ? 131071 : 524287);
    if (isSetToTimeStamp())
      hashCode = hashCode * 8191 + toTimeStamp.hashCode();

    hashCode = hashCode * 8191 + ((isSetLimitCount()) ? 131071 : 524287);
    if (isSetLimitCount())
      hashCode = hashCode * 8191 + limitCount;

    hashCode = hashCode * 8191 + ((isSetExtraMap()) ? 131071 : 524287);
    if (isSetExtraMap())
      hashCode = hashCode * 8191 + extraMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimPage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFromTimeStamp(), other.isSetFromTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTimeStamp, other.fromTimeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToTimeStamp(), other.isSetToTimeStamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTimeStamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTimeStamp, other.toTimeStamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLimitCount(), other.isSetLimitCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitCount, other.limitCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtraMap(), other.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, other.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimPage(");
    boolean first = true;

    if (isSetFromTimeStamp()) {
      sb.append("fromTimeStamp:");
      if (this.fromTimeStamp == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTimeStamp);
      }
      first = false;
    }
    if (isSetToTimeStamp()) {
      if (!first) sb.append(", ");
      sb.append("toTimeStamp:");
      if (this.toTimeStamp == null) {
        sb.append("null");
      } else {
        sb.append(this.toTimeStamp);
      }
      first = false;
    }
    if (isSetLimitCount()) {
      if (!first) sb.append(", ");
      sb.append("limitCount:");
      sb.append(this.limitCount);
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimPageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimPageStandardScheme getScheme() {
      return new TimPageStandardScheme();
    }
  }

  private static class TimPageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimPage> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FROM_TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromTimeStamp = iprot.readString();
              struct.setFromTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_TIME_STAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toTimeStamp = iprot.readString();
              struct.setToTimeStampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIMIT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitCount = iprot.readI32();
              struct.setLimitCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map262 = iprot.readMapBegin();
                struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map262.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key263;
                @org.apache.thrift.annotation.Nullable java.lang.String _val264;
                for (int _i265 = 0; _i265 < _map262.size; ++_i265)
                {
                  _key263 = iprot.readString();
                  _val264 = iprot.readString();
                  struct.extraMap.put(_key263, _val264);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimPage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fromTimeStamp != null) {
        if (struct.isSetFromTimeStamp()) {
          oprot.writeFieldBegin(FROM_TIME_STAMP_FIELD_DESC);
          oprot.writeString(struct.fromTimeStamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTimeStamp != null) {
        if (struct.isSetToTimeStamp()) {
          oprot.writeFieldBegin(TO_TIME_STAMP_FIELD_DESC);
          oprot.writeString(struct.toTimeStamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitCount()) {
        oprot.writeFieldBegin(LIMIT_COUNT_FIELD_DESC);
        oprot.writeI32(struct.limitCount);
        oprot.writeFieldEnd();
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter266 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter266.getKey());
              oprot.writeString(_iter266.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimPageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimPageTupleScheme getScheme() {
      return new TimPageTupleScheme();
    }
  }

  private static class TimPageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimPage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFromTimeStamp()) {
        optionals.set(0);
      }
      if (struct.isSetToTimeStamp()) {
        optionals.set(1);
      }
      if (struct.isSetLimitCount()) {
        optionals.set(2);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFromTimeStamp()) {
        oprot.writeString(struct.fromTimeStamp);
      }
      if (struct.isSetToTimeStamp()) {
        oprot.writeString(struct.toTimeStamp);
      }
      if (struct.isSetLimitCount()) {
        oprot.writeI32(struct.limitCount);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter267 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter267.getKey());
            oprot.writeString(_iter267.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimPage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fromTimeStamp = iprot.readString();
        struct.setFromTimeStampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toTimeStamp = iprot.readString();
        struct.setToTimeStampIsSet(true);
      }
      if (incoming.get(2)) {
        struct.limitCount = iprot.readI32();
        struct.setLimitCountIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map268 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map268.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key269;
          @org.apache.thrift.annotation.Nullable java.lang.String _val270;
          for (int _i271 = 0; _i271 < _map268.size; ++_i271)
          {
            _key269 = iprot.readString();
            _val270 = iprot.readString();
            struct.extraMap.put(_key269, _val270);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

