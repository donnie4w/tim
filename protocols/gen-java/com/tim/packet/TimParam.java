/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-11")
public class TimParam implements org.apache.thrift.TBase<TimParam, TimParam._Fields>, java.io.Serializable, Cloneable, Comparable<TimParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimParam");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXTRA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("extraList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField INTERFLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("interflow", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TLS_FIELD_DESC = new org.apache.thrift.protocol.TField("tls", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimParamTupleSchemeFactory();

  /**
   * 服务器时间
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String timestamp; // optional
  /**
   * 版本
   */
  public short version; // optional
  /**
   * 语言
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String lang; // optional
  /**
   * 附加信息
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<TimNode> extraList; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap; // optional
  /**
   * 消息合流
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String interflow; // optional
  /**
   * tls
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String tls; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 服务器时间
     */
    TIMESTAMP((short)1, "timestamp"),
    /**
     * 版本
     */
    VERSION((short)2, "version"),
    /**
     * 语言
     */
    LANG((short)3, "lang"),
    /**
     * 附加信息
     */
    EXTRA_LIST((short)4, "extraList"),
    EXTRA_MAP((short)5, "extraMap"),
    /**
     * 消息合流
     */
    INTERFLOW((short)6, "interflow"),
    /**
     * tls
     */
    TLS((short)7, "tls");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // VERSION
          return VERSION;
        case 3: // LANG
          return LANG;
        case 4: // EXTRA_LIST
          return EXTRA_LIST;
        case 5: // EXTRA_MAP
          return EXTRA_MAP;
        case 6: // INTERFLOW
          return INTERFLOW;
        case 7: // TLS
          return TLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.VERSION,_Fields.LANG,_Fields.EXTRA_LIST,_Fields.EXTRA_MAP,_Fields.INTERFLOW,_Fields.TLS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_LIST, new org.apache.thrift.meta_data.FieldMetaData("extraList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimNode.class))));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INTERFLOW, new org.apache.thrift.meta_data.FieldMetaData("interflow", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TLS, new org.apache.thrift.meta_data.FieldMetaData("tls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimParam.class, metaDataMap);
  }

  public TimParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimParam(TimParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
    this.version = other.version;
    if (other.isSetLang()) {
      this.lang = other.lang;
    }
    if (other.isSetExtraList()) {
      java.util.List<TimNode> __this__extraList = new java.util.ArrayList<TimNode>(other.extraList.size());
      for (TimNode other_element : other.extraList) {
        __this__extraList.add(new TimNode(other_element));
      }
      this.extraList = __this__extraList;
    }
    if (other.isSetExtraMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.extraMap);
      this.extraMap = __this__extraMap;
    }
    if (other.isSetInterflow()) {
      this.interflow = other.interflow;
    }
    if (other.isSetTls()) {
      this.tls = other.tls;
    }
  }

  @Override
  public TimParam deepCopy() {
    return new TimParam(this);
  }

  @Override
  public void clear() {
    this.timestamp = null;
    setVersionIsSet(false);
    this.version = 0;
    this.lang = null;
    this.extraList = null;
    this.extraMap = null;
    this.interflow = null;
    this.tls = null;
  }

  /**
   * 服务器时间
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimestamp() {
    return this.timestamp;
  }

  /**
   * 服务器时间
   */
  public TimParam setTimestamp(@org.apache.thrift.annotation.Nullable java.lang.String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  /**
   * 版本
   */
  public short getVersion() {
    return this.version;
  }

  /**
   * 版本
   */
  public TimParam setVersion(short version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  /**
   * 语言
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLang() {
    return this.lang;
  }

  /**
   * 语言
   */
  public TimParam setLang(@org.apache.thrift.annotation.Nullable java.lang.String lang) {
    this.lang = lang;
    return this;
  }

  public void unsetLang() {
    this.lang = null;
  }

  /** Returns true if field lang is set (has been assigned a value) and false otherwise */
  public boolean isSetLang() {
    return this.lang != null;
  }

  public void setLangIsSet(boolean value) {
    if (!value) {
      this.lang = null;
    }
  }

  public int getExtraListSize() {
    return (this.extraList == null) ? 0 : this.extraList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TimNode> getExtraListIterator() {
    return (this.extraList == null) ? null : this.extraList.iterator();
  }

  public void addToExtraList(TimNode elem) {
    if (this.extraList == null) {
      this.extraList = new java.util.ArrayList<TimNode>();
    }
    this.extraList.add(elem);
  }

  /**
   * 附加信息
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<TimNode> getExtraList() {
    return this.extraList;
  }

  /**
   * 附加信息
   */
  public TimParam setExtraList(@org.apache.thrift.annotation.Nullable java.util.List<TimNode> extraList) {
    this.extraList = extraList;
    return this;
  }

  public void unsetExtraList() {
    this.extraList = null;
  }

  /** Returns true if field extraList is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraList() {
    return this.extraList != null;
  }

  public void setExtraListIsSet(boolean value) {
    if (!value) {
      this.extraList = null;
    }
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(java.lang.String key, java.lang.String val) {
    if (this.extraMap == null) {
      this.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extraMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtraMap() {
    return this.extraMap;
  }

  public TimParam setExtraMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  /**
   * 消息合流
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInterflow() {
    return this.interflow;
  }

  /**
   * 消息合流
   */
  public TimParam setInterflow(@org.apache.thrift.annotation.Nullable java.lang.String interflow) {
    this.interflow = interflow;
    return this;
  }

  public void unsetInterflow() {
    this.interflow = null;
  }

  /** Returns true if field interflow is set (has been assigned a value) and false otherwise */
  public boolean isSetInterflow() {
    return this.interflow != null;
  }

  public void setInterflowIsSet(boolean value) {
    if (!value) {
      this.interflow = null;
    }
  }

  /**
   * tls
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTls() {
    return this.tls;
  }

  /**
   * tls
   */
  public TimParam setTls(@org.apache.thrift.annotation.Nullable java.lang.String tls) {
    this.tls = tls;
    return this;
  }

  public void unsetTls() {
    this.tls = null;
  }

  /** Returns true if field tls is set (has been assigned a value) and false otherwise */
  public boolean isSetTls() {
    return this.tls != null;
  }

  public void setTlsIsSet(boolean value) {
    if (!value) {
      this.tls = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Short)value);
      }
      break;

    case LANG:
      if (value == null) {
        unsetLang();
      } else {
        setLang((java.lang.String)value);
      }
      break;

    case EXTRA_LIST:
      if (value == null) {
        unsetExtraList();
      } else {
        setExtraList((java.util.List<TimNode>)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case INTERFLOW:
      if (value == null) {
        unsetInterflow();
      } else {
        setInterflow((java.lang.String)value);
      }
      break;

    case TLS:
      if (value == null) {
        unsetTls();
      } else {
        setTls((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case VERSION:
      return getVersion();

    case LANG:
      return getLang();

    case EXTRA_LIST:
      return getExtraList();

    case EXTRA_MAP:
      return getExtraMap();

    case INTERFLOW:
      return getInterflow();

    case TLS:
      return getTls();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case VERSION:
      return isSetVersion();
    case LANG:
      return isSetLang();
    case EXTRA_LIST:
      return isSetExtraList();
    case EXTRA_MAP:
      return isSetExtraMap();
    case INTERFLOW:
      return isSetInterflow();
    case TLS:
      return isSetTls();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimParam)
      return this.equals((TimParam)that);
    return false;
  }

  public boolean equals(TimParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_lang = true && this.isSetLang();
    boolean that_present_lang = true && that.isSetLang();
    if (this_present_lang || that_present_lang) {
      if (!(this_present_lang && that_present_lang))
        return false;
      if (!this.lang.equals(that.lang))
        return false;
    }

    boolean this_present_extraList = true && this.isSetExtraList();
    boolean that_present_extraList = true && that.isSetExtraList();
    if (this_present_extraList || that_present_extraList) {
      if (!(this_present_extraList && that_present_extraList))
        return false;
      if (!this.extraList.equals(that.extraList))
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    boolean this_present_interflow = true && this.isSetInterflow();
    boolean that_present_interflow = true && that.isSetInterflow();
    if (this_present_interflow || that_present_interflow) {
      if (!(this_present_interflow && that_present_interflow))
        return false;
      if (!this.interflow.equals(that.interflow))
        return false;
    }

    boolean this_present_tls = true && this.isSetTls();
    boolean that_present_tls = true && that.isSetTls();
    if (this_present_tls || that_present_tls) {
      if (!(this_present_tls && that_present_tls))
        return false;
      if (!this.tls.equals(that.tls))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTimestamp()) ? 131071 : 524287);
    if (isSetTimestamp())
      hashCode = hashCode * 8191 + timestamp.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version;

    hashCode = hashCode * 8191 + ((isSetLang()) ? 131071 : 524287);
    if (isSetLang())
      hashCode = hashCode * 8191 + lang.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraList()) ? 131071 : 524287);
    if (isSetExtraList())
      hashCode = hashCode * 8191 + extraList.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraMap()) ? 131071 : 524287);
    if (isSetExtraMap())
      hashCode = hashCode * 8191 + extraMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterflow()) ? 131071 : 524287);
    if (isSetInterflow())
      hashCode = hashCode * 8191 + interflow.hashCode();

    hashCode = hashCode * 8191 + ((isSetTls()) ? 131071 : 524287);
    if (isSetTls())
      hashCode = hashCode * 8191 + tls.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLang(), other.isSetLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtraList(), other.isSetExtraList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraList, other.extraList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtraMap(), other.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, other.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterflow(), other.isSetInterflow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterflow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interflow, other.interflow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTls(), other.isSetTls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tls, other.tls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimParam(");
    boolean first = true;

    if (isSetTimestamp()) {
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetLang()) {
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
    }
    if (isSetExtraList()) {
      if (!first) sb.append(", ");
      sb.append("extraList:");
      if (this.extraList == null) {
        sb.append("null");
      } else {
        sb.append(this.extraList);
      }
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    if (isSetInterflow()) {
      if (!first) sb.append(", ");
      sb.append("interflow:");
      if (this.interflow == null) {
        sb.append("null");
      } else {
        sb.append(this.interflow);
      }
      first = false;
    }
    if (isSetTls()) {
      if (!first) sb.append(", ");
      sb.append("tls:");
      if (this.tls == null) {
        sb.append("null");
      } else {
        sb.append(this.tls);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimParamStandardScheme getScheme() {
      return new TimParamStandardScheme();
    }
  }

  private static class TimParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.version = iprot.readI16();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lang = iprot.readString();
              struct.setLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXTRA_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.extraList = new java.util.ArrayList<TimNode>(_list18.size);
                @org.apache.thrift.annotation.Nullable TimNode _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new TimNode();
                  _elem19.read(iprot);
                  struct.extraList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setExtraListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map21.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key22;
                @org.apache.thrift.annotation.Nullable java.lang.String _val23;
                for (int _i24 = 0; _i24 < _map21.size; ++_i24)
                {
                  _key22 = iprot.readString();
                  _val23 = iprot.readString();
                  struct.extraMap.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INTERFLOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interflow = iprot.readString();
              struct.setInterflowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tls = iprot.readString();
              struct.setTlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.timestamp != null) {
        if (struct.isSetTimestamp()) {
          oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.timestamp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI16(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.lang != null) {
        if (struct.isSetLang()) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeString(struct.lang);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraList != null) {
        if (struct.isSetExtraList()) {
          oprot.writeFieldBegin(EXTRA_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extraList.size()));
            for (TimNode _iter25 : struct.extraList)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter26 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter26.getKey());
              oprot.writeString(_iter26.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.interflow != null) {
        if (struct.isSetInterflow()) {
          oprot.writeFieldBegin(INTERFLOW_FIELD_DESC);
          oprot.writeString(struct.interflow);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tls != null) {
        if (struct.isSetTls()) {
          oprot.writeFieldBegin(TLS_FIELD_DESC);
          oprot.writeString(struct.tls);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimParamTupleScheme getScheme() {
      return new TimParamTupleScheme();
    }
  }

  private static class TimParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetVersion()) {
        optionals.set(1);
      }
      if (struct.isSetLang()) {
        optionals.set(2);
      }
      if (struct.isSetExtraList()) {
        optionals.set(3);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(4);
      }
      if (struct.isSetInterflow()) {
        optionals.set(5);
      }
      if (struct.isSetTls()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
      if (struct.isSetVersion()) {
        oprot.writeI16(struct.version);
      }
      if (struct.isSetLang()) {
        oprot.writeString(struct.lang);
      }
      if (struct.isSetExtraList()) {
        {
          oprot.writeI32(struct.extraList.size());
          for (TimNode _iter27 : struct.extraList)
          {
            _iter27.write(oprot);
          }
        }
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter28 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeString(_iter28.getValue());
          }
        }
      }
      if (struct.isSetInterflow()) {
        oprot.writeString(struct.interflow);
      }
      if (struct.isSetTls()) {
        oprot.writeString(struct.tls);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version = iprot.readI16();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lang = iprot.readString();
        struct.setLangIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.extraList = new java.util.ArrayList<TimNode>(_list29.size);
          @org.apache.thrift.annotation.Nullable TimNode _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new TimNode();
            _elem30.read(iprot);
            struct.extraList.add(_elem30);
          }
        }
        struct.setExtraListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map32.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key33;
          @org.apache.thrift.annotation.Nullable java.lang.String _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = iprot.readString();
            _val34 = iprot.readString();
            struct.extraMap.put(_key33, _val34);
          }
        }
        struct.setExtraMapIsSet(true);
      }
      if (incoming.get(5)) {
        struct.interflow = iprot.readString();
        struct.setInterflowIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tls = iprot.readString();
        struct.setTlsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

