/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-11")
public class TimPBean implements org.apache.thrift.TBase<TimPBean, TimPBean._Fields>, java.io.Serializable, Cloneable, Comparable<TimPBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimPBean");

  private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("threadId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TO_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SHOW_FIELD_DESC = new org.apache.thrift.protocol.TField("show", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LEAGUER_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaguerTid", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField EXTRA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("extraList", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimPBeanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimPBeanTupleSchemeFactory();

  /**
   * 标识
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String threadId; // required
  public @org.apache.thrift.annotation.Nullable Tid fromTid; // optional
  public @org.apache.thrift.annotation.Nullable Tid toTid; // optional
  /**
   * subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String status; // optional
  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional
  /**
   * 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
   */
  public int priority; // optional
  /**
   * chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String show; // optional
  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  public @org.apache.thrift.annotation.Nullable Tid leaguerTid; // optional
  /**
   * 扩展字段
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<TimNode> extraList; // optional
  /**
   * 错误码
   */
  public @org.apache.thrift.annotation.Nullable TimError error; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 标识
     */
    THREAD_ID((short)1, "threadId"),
    FROM_TID((short)2, "fromTid"),
    TO_TID((short)3, "toTid"),
    /**
     * subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
     */
    STATUS((short)4, "status"),
    /**
     * normal：类似于email，主要特点是不要求响应；
     * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
     * groupchat：类似于聊天室里的群聊；
     * headline：用于发送alert和notification；
     * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
     */
    TYPE((short)5, "type"),
    /**
     * 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
     */
    PRIORITY((short)6, "priority"),
    /**
     * chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
     */
    SHOW((short)7, "show"),
    /**
     * 成员Tid   群聊时信息发送者Tid
     */
    LEAGUER_TID((short)8, "leaguerTid"),
    /**
     * 扩展字段
     */
    EXTRA_LIST((short)9, "extraList"),
    /**
     * 错误码
     */
    ERROR((short)10, "error"),
    EXTRA_MAP((short)11, "extraMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THREAD_ID
          return THREAD_ID;
        case 2: // FROM_TID
          return FROM_TID;
        case 3: // TO_TID
          return TO_TID;
        case 4: // STATUS
          return STATUS;
        case 5: // TYPE
          return TYPE;
        case 6: // PRIORITY
          return PRIORITY;
        case 7: // SHOW
          return SHOW;
        case 8: // LEAGUER_TID
          return LEAGUER_TID;
        case 9: // EXTRA_LIST
          return EXTRA_LIST;
        case 10: // ERROR
          return ERROR;
        case 11: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIORITY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FROM_TID,_Fields.TO_TID,_Fields.STATUS,_Fields.TYPE,_Fields.PRIORITY,_Fields.SHOW,_Fields.LEAGUER_TID,_Fields.EXTRA_LIST,_Fields.ERROR,_Fields.EXTRA_MAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("threadId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_TID, new org.apache.thrift.meta_data.FieldMetaData("fromTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TO_TID, new org.apache.thrift.meta_data.FieldMetaData("toTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOW, new org.apache.thrift.meta_data.FieldMetaData("show", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEAGUER_TID, new org.apache.thrift.meta_data.FieldMetaData("leaguerTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.EXTRA_LIST, new org.apache.thrift.meta_data.FieldMetaData("extraList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimNode.class))));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimError.class)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimPBean.class, metaDataMap);
  }

  public TimPBean() {
  }

  public TimPBean(
    java.lang.String threadId)
  {
    this();
    this.threadId = threadId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimPBean(TimPBean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetThreadId()) {
      this.threadId = other.threadId;
    }
    if (other.isSetFromTid()) {
      this.fromTid = new Tid(other.fromTid);
    }
    if (other.isSetToTid()) {
      this.toTid = new Tid(other.toTid);
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.priority = other.priority;
    if (other.isSetShow()) {
      this.show = other.show;
    }
    if (other.isSetLeaguerTid()) {
      this.leaguerTid = new Tid(other.leaguerTid);
    }
    if (other.isSetExtraList()) {
      java.util.List<TimNode> __this__extraList = new java.util.ArrayList<TimNode>(other.extraList.size());
      for (TimNode other_element : other.extraList) {
        __this__extraList.add(new TimNode(other_element));
      }
      this.extraList = __this__extraList;
    }
    if (other.isSetError()) {
      this.error = new TimError(other.error);
    }
    if (other.isSetExtraMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.extraMap);
      this.extraMap = __this__extraMap;
    }
  }

  @Override
  public TimPBean deepCopy() {
    return new TimPBean(this);
  }

  @Override
  public void clear() {
    this.threadId = null;
    this.fromTid = null;
    this.toTid = null;
    this.status = null;
    this.type = null;
    setPriorityIsSet(false);
    this.priority = 0;
    this.show = null;
    this.leaguerTid = null;
    this.extraList = null;
    this.error = null;
    this.extraMap = null;
  }

  /**
   * 标识
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getThreadId() {
    return this.threadId;
  }

  /**
   * 标识
   */
  public TimPBean setThreadId(@org.apache.thrift.annotation.Nullable java.lang.String threadId) {
    this.threadId = threadId;
    return this;
  }

  public void unsetThreadId() {
    this.threadId = null;
  }

  /** Returns true if field threadId is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadId() {
    return this.threadId != null;
  }

  public void setThreadIdIsSet(boolean value) {
    if (!value) {
      this.threadId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getFromTid() {
    return this.fromTid;
  }

  public TimPBean setFromTid(@org.apache.thrift.annotation.Nullable Tid fromTid) {
    this.fromTid = fromTid;
    return this;
  }

  public void unsetFromTid() {
    this.fromTid = null;
  }

  /** Returns true if field fromTid is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTid() {
    return this.fromTid != null;
  }

  public void setFromTidIsSet(boolean value) {
    if (!value) {
      this.fromTid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getToTid() {
    return this.toTid;
  }

  public TimPBean setToTid(@org.apache.thrift.annotation.Nullable Tid toTid) {
    this.toTid = toTid;
    return this;
  }

  public void unsetToTid() {
    this.toTid = null;
  }

  /** Returns true if field toTid is set (has been assigned a value) and false otherwise */
  public boolean isSetToTid() {
    return this.toTid != null;
  }

  public void setToTidIsSet(boolean value) {
    if (!value) {
      this.toTid = null;
    }
  }

  /**
   * subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatus() {
    return this.status;
  }

  /**
   * subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
   */
  public TimPBean setStatus(@org.apache.thrift.annotation.Nullable java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  public TimPBean setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
   */
  public int getPriority() {
    return this.priority;
  }

  /**
   * 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
   */
  public TimPBean setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  /**
   * chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getShow() {
    return this.show;
  }

  /**
   * chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
   */
  public TimPBean setShow(@org.apache.thrift.annotation.Nullable java.lang.String show) {
    this.show = show;
    return this;
  }

  public void unsetShow() {
    this.show = null;
  }

  /** Returns true if field show is set (has been assigned a value) and false otherwise */
  public boolean isSetShow() {
    return this.show != null;
  }

  public void setShowIsSet(boolean value) {
    if (!value) {
      this.show = null;
    }
  }

  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  @org.apache.thrift.annotation.Nullable
  public Tid getLeaguerTid() {
    return this.leaguerTid;
  }

  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  public TimPBean setLeaguerTid(@org.apache.thrift.annotation.Nullable Tid leaguerTid) {
    this.leaguerTid = leaguerTid;
    return this;
  }

  public void unsetLeaguerTid() {
    this.leaguerTid = null;
  }

  /** Returns true if field leaguerTid is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaguerTid() {
    return this.leaguerTid != null;
  }

  public void setLeaguerTidIsSet(boolean value) {
    if (!value) {
      this.leaguerTid = null;
    }
  }

  public int getExtraListSize() {
    return (this.extraList == null) ? 0 : this.extraList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TimNode> getExtraListIterator() {
    return (this.extraList == null) ? null : this.extraList.iterator();
  }

  public void addToExtraList(TimNode elem) {
    if (this.extraList == null) {
      this.extraList = new java.util.ArrayList<TimNode>();
    }
    this.extraList.add(elem);
  }

  /**
   * 扩展字段
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<TimNode> getExtraList() {
    return this.extraList;
  }

  /**
   * 扩展字段
   */
  public TimPBean setExtraList(@org.apache.thrift.annotation.Nullable java.util.List<TimNode> extraList) {
    this.extraList = extraList;
    return this;
  }

  public void unsetExtraList() {
    this.extraList = null;
  }

  /** Returns true if field extraList is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraList() {
    return this.extraList != null;
  }

  public void setExtraListIsSet(boolean value) {
    if (!value) {
      this.extraList = null;
    }
  }

  /**
   * 错误码
   */
  @org.apache.thrift.annotation.Nullable
  public TimError getError() {
    return this.error;
  }

  /**
   * 错误码
   */
  public TimPBean setError(@org.apache.thrift.annotation.Nullable TimError error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(java.lang.String key, java.lang.String val) {
    if (this.extraMap == null) {
      this.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extraMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtraMap() {
    return this.extraMap;
  }

  public TimPBean setExtraMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case THREAD_ID:
      if (value == null) {
        unsetThreadId();
      } else {
        setThreadId((java.lang.String)value);
      }
      break;

    case FROM_TID:
      if (value == null) {
        unsetFromTid();
      } else {
        setFromTid((Tid)value);
      }
      break;

    case TO_TID:
      if (value == null) {
        unsetToTid();
      } else {
        setToTid((Tid)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.Integer)value);
      }
      break;

    case SHOW:
      if (value == null) {
        unsetShow();
      } else {
        setShow((java.lang.String)value);
      }
      break;

    case LEAGUER_TID:
      if (value == null) {
        unsetLeaguerTid();
      } else {
        setLeaguerTid((Tid)value);
      }
      break;

    case EXTRA_LIST:
      if (value == null) {
        unsetExtraList();
      } else {
        setExtraList((java.util.List<TimNode>)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((TimError)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case THREAD_ID:
      return getThreadId();

    case FROM_TID:
      return getFromTid();

    case TO_TID:
      return getToTid();

    case STATUS:
      return getStatus();

    case TYPE:
      return getType();

    case PRIORITY:
      return getPriority();

    case SHOW:
      return getShow();

    case LEAGUER_TID:
      return getLeaguerTid();

    case EXTRA_LIST:
      return getExtraList();

    case ERROR:
      return getError();

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case THREAD_ID:
      return isSetThreadId();
    case FROM_TID:
      return isSetFromTid();
    case TO_TID:
      return isSetToTid();
    case STATUS:
      return isSetStatus();
    case TYPE:
      return isSetType();
    case PRIORITY:
      return isSetPriority();
    case SHOW:
      return isSetShow();
    case LEAGUER_TID:
      return isSetLeaguerTid();
    case EXTRA_LIST:
      return isSetExtraList();
    case ERROR:
      return isSetError();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimPBean)
      return this.equals((TimPBean)that);
    return false;
  }

  public boolean equals(TimPBean that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_threadId = true && this.isSetThreadId();
    boolean that_present_threadId = true && that.isSetThreadId();
    if (this_present_threadId || that_present_threadId) {
      if (!(this_present_threadId && that_present_threadId))
        return false;
      if (!this.threadId.equals(that.threadId))
        return false;
    }

    boolean this_present_fromTid = true && this.isSetFromTid();
    boolean that_present_fromTid = true && that.isSetFromTid();
    if (this_present_fromTid || that_present_fromTid) {
      if (!(this_present_fromTid && that_present_fromTid))
        return false;
      if (!this.fromTid.equals(that.fromTid))
        return false;
    }

    boolean this_present_toTid = true && this.isSetToTid();
    boolean that_present_toTid = true && that.isSetToTid();
    if (this_present_toTid || that_present_toTid) {
      if (!(this_present_toTid && that_present_toTid))
        return false;
      if (!this.toTid.equals(that.toTid))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_show = true && this.isSetShow();
    boolean that_present_show = true && that.isSetShow();
    if (this_present_show || that_present_show) {
      if (!(this_present_show && that_present_show))
        return false;
      if (!this.show.equals(that.show))
        return false;
    }

    boolean this_present_leaguerTid = true && this.isSetLeaguerTid();
    boolean that_present_leaguerTid = true && that.isSetLeaguerTid();
    if (this_present_leaguerTid || that_present_leaguerTid) {
      if (!(this_present_leaguerTid && that_present_leaguerTid))
        return false;
      if (!this.leaguerTid.equals(that.leaguerTid))
        return false;
    }

    boolean this_present_extraList = true && this.isSetExtraList();
    boolean that_present_extraList = true && that.isSetExtraList();
    if (this_present_extraList || that_present_extraList) {
      if (!(this_present_extraList && that_present_extraList))
        return false;
      if (!this.extraList.equals(that.extraList))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetThreadId()) ? 131071 : 524287);
    if (isSetThreadId())
      hashCode = hashCode * 8191 + threadId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromTid()) ? 131071 : 524287);
    if (isSetFromTid())
      hashCode = hashCode * 8191 + fromTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetToTid()) ? 131071 : 524287);
    if (isSetToTid())
      hashCode = hashCode * 8191 + toTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + ((isSetShow()) ? 131071 : 524287);
    if (isSetShow())
      hashCode = hashCode * 8191 + show.hashCode();

    hashCode = hashCode * 8191 + ((isSetLeaguerTid()) ? 131071 : 524287);
    if (isSetLeaguerTid())
      hashCode = hashCode * 8191 + leaguerTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraList()) ? 131071 : 524287);
    if (isSetExtraList())
      hashCode = hashCode * 8191 + extraList.hashCode();

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + error.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraMap()) ? 131071 : 524287);
    if (isSetExtraMap())
      hashCode = hashCode * 8191 + extraMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimPBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetThreadId(), other.isSetThreadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadId, other.threadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFromTid(), other.isSetFromTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTid, other.fromTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToTid(), other.isSetToTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTid, other.toTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPriority(), other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShow(), other.isSetShow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show, other.show);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLeaguerTid(), other.isSetLeaguerTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaguerTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaguerTid, other.leaguerTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtraList(), other.isSetExtraList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraList, other.extraList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError(), other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtraMap(), other.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, other.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimPBean(");
    boolean first = true;

    sb.append("threadId:");
    if (this.threadId == null) {
      sb.append("null");
    } else {
      sb.append(this.threadId);
    }
    first = false;
    if (isSetFromTid()) {
      if (!first) sb.append(", ");
      sb.append("fromTid:");
      if (this.fromTid == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTid);
      }
      first = false;
    }
    if (isSetToTid()) {
      if (!first) sb.append(", ");
      sb.append("toTid:");
      if (this.toTid == null) {
        sb.append("null");
      } else {
        sb.append(this.toTid);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      sb.append(this.priority);
      first = false;
    }
    if (isSetShow()) {
      if (!first) sb.append(", ");
      sb.append("show:");
      if (this.show == null) {
        sb.append("null");
      } else {
        sb.append(this.show);
      }
      first = false;
    }
    if (isSetLeaguerTid()) {
      if (!first) sb.append(", ");
      sb.append("leaguerTid:");
      if (this.leaguerTid == null) {
        sb.append("null");
      } else {
        sb.append(this.leaguerTid);
      }
      first = false;
    }
    if (isSetExtraList()) {
      if (!first) sb.append(", ");
      sb.append("extraList:");
      if (this.extraList == null) {
        sb.append("null");
      } else {
        sb.append(this.extraList);
      }
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (threadId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'threadId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fromTid != null) {
      fromTid.validate();
    }
    if (toTid != null) {
      toTid.validate();
    }
    if (leaguerTid != null) {
      leaguerTid.validate();
    }
    if (error != null) {
      error.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimPBeanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimPBeanStandardScheme getScheme() {
      return new TimPBeanStandardScheme();
    }
  }

  private static class TimPBeanStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimPBean> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimPBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.threadId = iprot.readString();
              struct.setThreadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromTid = new Tid();
              struct.fromTid.read(iprot);
              struct.setFromTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toTid = new Tid();
              struct.toTid.read(iprot);
              struct.setToTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHOW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.show = iprot.readString();
              struct.setShowIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LEAGUER_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.leaguerTid = new Tid();
              struct.leaguerTid.read(iprot);
              struct.setLeaguerTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTRA_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list132 = iprot.readListBegin();
                struct.extraList = new java.util.ArrayList<TimNode>(_list132.size);
                @org.apache.thrift.annotation.Nullable TimNode _elem133;
                for (int _i134 = 0; _i134 < _list132.size; ++_i134)
                {
                  _elem133 = new TimNode();
                  _elem133.read(iprot);
                  struct.extraList.add(_elem133);
                }
                iprot.readListEnd();
              }
              struct.setExtraListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.error = new TimError();
              struct.error.read(iprot);
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map135 = iprot.readMapBegin();
                struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map135.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key136;
                @org.apache.thrift.annotation.Nullable java.lang.String _val137;
                for (int _i138 = 0; _i138 < _map135.size; ++_i138)
                {
                  _key136 = iprot.readString();
                  _val137 = iprot.readString();
                  struct.extraMap.put(_key136, _val137);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimPBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.threadId != null) {
        oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
        oprot.writeString(struct.threadId);
        oprot.writeFieldEnd();
      }
      if (struct.fromTid != null) {
        if (struct.isSetFromTid()) {
          oprot.writeFieldBegin(FROM_TID_FIELD_DESC);
          struct.fromTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTid != null) {
        if (struct.isSetToTid()) {
          oprot.writeFieldBegin(TO_TID_FIELD_DESC);
          struct.toTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPriority()) {
        oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.priority);
        oprot.writeFieldEnd();
      }
      if (struct.show != null) {
        if (struct.isSetShow()) {
          oprot.writeFieldBegin(SHOW_FIELD_DESC);
          oprot.writeString(struct.show);
          oprot.writeFieldEnd();
        }
      }
      if (struct.leaguerTid != null) {
        if (struct.isSetLeaguerTid()) {
          oprot.writeFieldBegin(LEAGUER_TID_FIELD_DESC);
          struct.leaguerTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraList != null) {
        if (struct.isSetExtraList()) {
          oprot.writeFieldBegin(EXTRA_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extraList.size()));
            for (TimNode _iter139 : struct.extraList)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter140 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter140.getKey());
              oprot.writeString(_iter140.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimPBeanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimPBeanTupleScheme getScheme() {
      return new TimPBeanTupleScheme();
    }
  }

  private static class TimPBeanTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimPBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimPBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.threadId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFromTid()) {
        optionals.set(0);
      }
      if (struct.isSetToTid()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetPriority()) {
        optionals.set(4);
      }
      if (struct.isSetShow()) {
        optionals.set(5);
      }
      if (struct.isSetLeaguerTid()) {
        optionals.set(6);
      }
      if (struct.isSetExtraList()) {
        optionals.set(7);
      }
      if (struct.isSetError()) {
        optionals.set(8);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetFromTid()) {
        struct.fromTid.write(oprot);
      }
      if (struct.isSetToTid()) {
        struct.toTid.write(oprot);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetShow()) {
        oprot.writeString(struct.show);
      }
      if (struct.isSetLeaguerTid()) {
        struct.leaguerTid.write(oprot);
      }
      if (struct.isSetExtraList()) {
        {
          oprot.writeI32(struct.extraList.size());
          for (TimNode _iter141 : struct.extraList)
          {
            _iter141.write(oprot);
          }
        }
      }
      if (struct.isSetError()) {
        struct.error.write(oprot);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter142 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter142.getKey());
            oprot.writeString(_iter142.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimPBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.threadId = iprot.readString();
      struct.setThreadIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.fromTid = new Tid();
        struct.fromTid.read(iprot);
        struct.setFromTidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toTid = new Tid();
        struct.toTid.read(iprot);
        struct.setToTidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.show = iprot.readString();
        struct.setShowIsSet(true);
      }
      if (incoming.get(6)) {
        struct.leaguerTid = new Tid();
        struct.leaguerTid.read(iprot);
        struct.setLeaguerTidIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list143 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.extraList = new java.util.ArrayList<TimNode>(_list143.size);
          @org.apache.thrift.annotation.Nullable TimNode _elem144;
          for (int _i145 = 0; _i145 < _list143.size; ++_i145)
          {
            _elem144 = new TimNode();
            _elem144.read(iprot);
            struct.extraList.add(_elem144);
          }
        }
        struct.setExtraListIsSet(true);
      }
      if (incoming.get(8)) {
        struct.error = new TimError();
        struct.error.read(iprot);
        struct.setErrorIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map146.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key147;
          @org.apache.thrift.annotation.Nullable java.lang.String _val148;
          for (int _i149 = 0; _i149 < _map146.size; ++_i149)
          {
            _key147 = iprot.readString();
            _val148 = iprot.readString();
            struct.extraMap.put(_key147, _val148);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

