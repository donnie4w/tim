/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tim.packet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-11")
public class TimIqBean implements org.apache.thrift.TBase<TimIqBean, TimIqBean._Fields>, java.io.Serializable, Cloneable, Comparable<TimIqBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimIqBean");

  private static final org.apache.thrift.protocol.TField THREAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("threadId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromTid", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TO_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXTRA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("extraList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField EXTRA_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extraMap", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimIqBeanStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimIqBeanTupleSchemeFactory();

  /**
   * 线程id
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String threadId; // required
  public @org.apache.thrift.annotation.Nullable Tid fromTid; // optional
  public @org.apache.thrift.annotation.Nullable Tid toTid; // optional
  /**
   * Get :获取当前域值。类似于http get方法
   * Set :设置或替换get查询的值。类似于http put方法。
   * Result :说明成功的响应了先前的查询。类似于http状态码200。
   * Error: 查询和响应中出现的错误。
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String type; // optional
  /**
   * 扩展字段
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<TimNode> extraList; // optional
  /**
   * 错误码
   */
  public @org.apache.thrift.annotation.Nullable TimError error; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 线程id
     */
    THREAD_ID((short)1, "threadId"),
    FROM_TID((short)2, "fromTid"),
    TO_TID((short)3, "toTid"),
    /**
     * Get :获取当前域值。类似于http get方法
     * Set :设置或替换get查询的值。类似于http put方法。
     * Result :说明成功的响应了先前的查询。类似于http状态码200。
     * Error: 查询和响应中出现的错误。
     */
    TYPE((short)4, "type"),
    /**
     * 扩展字段
     */
    EXTRA_LIST((short)5, "extraList"),
    /**
     * 错误码
     */
    ERROR((short)6, "error"),
    EXTRA_MAP((short)7, "extraMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // THREAD_ID
          return THREAD_ID;
        case 2: // FROM_TID
          return FROM_TID;
        case 3: // TO_TID
          return TO_TID;
        case 4: // TYPE
          return TYPE;
        case 5: // EXTRA_LIST
          return EXTRA_LIST;
        case 6: // ERROR
          return ERROR;
        case 7: // EXTRA_MAP
          return EXTRA_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FROM_TID,_Fields.TO_TID,_Fields.TYPE,_Fields.EXTRA_LIST,_Fields.ERROR,_Fields.EXTRA_MAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.THREAD_ID, new org.apache.thrift.meta_data.FieldMetaData("threadId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_TID, new org.apache.thrift.meta_data.FieldMetaData("fromTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TO_TID, new org.apache.thrift.meta_data.FieldMetaData("toTid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tid.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_LIST, new org.apache.thrift.meta_data.FieldMetaData("extraList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimNode.class))));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TimError.class)));
    tmpMap.put(_Fields.EXTRA_MAP, new org.apache.thrift.meta_data.FieldMetaData("extraMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimIqBean.class, metaDataMap);
  }

  public TimIqBean() {
  }

  public TimIqBean(
    java.lang.String threadId)
  {
    this();
    this.threadId = threadId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimIqBean(TimIqBean other) {
    if (other.isSetThreadId()) {
      this.threadId = other.threadId;
    }
    if (other.isSetFromTid()) {
      this.fromTid = new Tid(other.fromTid);
    }
    if (other.isSetToTid()) {
      this.toTid = new Tid(other.toTid);
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetExtraList()) {
      java.util.List<TimNode> __this__extraList = new java.util.ArrayList<TimNode>(other.extraList.size());
      for (TimNode other_element : other.extraList) {
        __this__extraList.add(new TimNode(other_element));
      }
      this.extraList = __this__extraList;
    }
    if (other.isSetError()) {
      this.error = new TimError(other.error);
    }
    if (other.isSetExtraMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.extraMap);
      this.extraMap = __this__extraMap;
    }
  }

  @Override
  public TimIqBean deepCopy() {
    return new TimIqBean(this);
  }

  @Override
  public void clear() {
    this.threadId = null;
    this.fromTid = null;
    this.toTid = null;
    this.type = null;
    this.extraList = null;
    this.error = null;
    this.extraMap = null;
  }

  /**
   * 线程id
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getThreadId() {
    return this.threadId;
  }

  /**
   * 线程id
   */
  public TimIqBean setThreadId(@org.apache.thrift.annotation.Nullable java.lang.String threadId) {
    this.threadId = threadId;
    return this;
  }

  public void unsetThreadId() {
    this.threadId = null;
  }

  /** Returns true if field threadId is set (has been assigned a value) and false otherwise */
  public boolean isSetThreadId() {
    return this.threadId != null;
  }

  public void setThreadIdIsSet(boolean value) {
    if (!value) {
      this.threadId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getFromTid() {
    return this.fromTid;
  }

  public TimIqBean setFromTid(@org.apache.thrift.annotation.Nullable Tid fromTid) {
    this.fromTid = fromTid;
    return this;
  }

  public void unsetFromTid() {
    this.fromTid = null;
  }

  /** Returns true if field fromTid is set (has been assigned a value) and false otherwise */
  public boolean isSetFromTid() {
    return this.fromTid != null;
  }

  public void setFromTidIsSet(boolean value) {
    if (!value) {
      this.fromTid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Tid getToTid() {
    return this.toTid;
  }

  public TimIqBean setToTid(@org.apache.thrift.annotation.Nullable Tid toTid) {
    this.toTid = toTid;
    return this;
  }

  public void unsetToTid() {
    this.toTid = null;
  }

  /** Returns true if field toTid is set (has been assigned a value) and false otherwise */
  public boolean isSetToTid() {
    return this.toTid != null;
  }

  public void setToTidIsSet(boolean value) {
    if (!value) {
      this.toTid = null;
    }
  }

  /**
   * Get :获取当前域值。类似于http get方法
   * Set :设置或替换get查询的值。类似于http put方法。
   * Result :说明成功的响应了先前的查询。类似于http状态码200。
   * Error: 查询和响应中出现的错误。
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getType() {
    return this.type;
  }

  /**
   * Get :获取当前域值。类似于http get方法
   * Set :设置或替换get查询的值。类似于http put方法。
   * Result :说明成功的响应了先前的查询。类似于http状态码200。
   * Error: 查询和响应中出现的错误。
   */
  public TimIqBean setType(@org.apache.thrift.annotation.Nullable java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getExtraListSize() {
    return (this.extraList == null) ? 0 : this.extraList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TimNode> getExtraListIterator() {
    return (this.extraList == null) ? null : this.extraList.iterator();
  }

  public void addToExtraList(TimNode elem) {
    if (this.extraList == null) {
      this.extraList = new java.util.ArrayList<TimNode>();
    }
    this.extraList.add(elem);
  }

  /**
   * 扩展字段
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<TimNode> getExtraList() {
    return this.extraList;
  }

  /**
   * 扩展字段
   */
  public TimIqBean setExtraList(@org.apache.thrift.annotation.Nullable java.util.List<TimNode> extraList) {
    this.extraList = extraList;
    return this;
  }

  public void unsetExtraList() {
    this.extraList = null;
  }

  /** Returns true if field extraList is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraList() {
    return this.extraList != null;
  }

  public void setExtraListIsSet(boolean value) {
    if (!value) {
      this.extraList = null;
    }
  }

  /**
   * 错误码
   */
  @org.apache.thrift.annotation.Nullable
  public TimError getError() {
    return this.error;
  }

  /**
   * 错误码
   */
  public TimIqBean setError(@org.apache.thrift.annotation.Nullable TimError error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public int getExtraMapSize() {
    return (this.extraMap == null) ? 0 : this.extraMap.size();
  }

  public void putToExtraMap(java.lang.String key, java.lang.String val) {
    if (this.extraMap == null) {
      this.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extraMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtraMap() {
    return this.extraMap;
  }

  public TimIqBean setExtraMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extraMap) {
    this.extraMap = extraMap;
    return this;
  }

  public void unsetExtraMap() {
    this.extraMap = null;
  }

  /** Returns true if field extraMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraMap() {
    return this.extraMap != null;
  }

  public void setExtraMapIsSet(boolean value) {
    if (!value) {
      this.extraMap = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case THREAD_ID:
      if (value == null) {
        unsetThreadId();
      } else {
        setThreadId((java.lang.String)value);
      }
      break;

    case FROM_TID:
      if (value == null) {
        unsetFromTid();
      } else {
        setFromTid((Tid)value);
      }
      break;

    case TO_TID:
      if (value == null) {
        unsetToTid();
      } else {
        setToTid((Tid)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case EXTRA_LIST:
      if (value == null) {
        unsetExtraList();
      } else {
        setExtraList((java.util.List<TimNode>)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((TimError)value);
      }
      break;

    case EXTRA_MAP:
      if (value == null) {
        unsetExtraMap();
      } else {
        setExtraMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case THREAD_ID:
      return getThreadId();

    case FROM_TID:
      return getFromTid();

    case TO_TID:
      return getToTid();

    case TYPE:
      return getType();

    case EXTRA_LIST:
      return getExtraList();

    case ERROR:
      return getError();

    case EXTRA_MAP:
      return getExtraMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case THREAD_ID:
      return isSetThreadId();
    case FROM_TID:
      return isSetFromTid();
    case TO_TID:
      return isSetToTid();
    case TYPE:
      return isSetType();
    case EXTRA_LIST:
      return isSetExtraList();
    case ERROR:
      return isSetError();
    case EXTRA_MAP:
      return isSetExtraMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TimIqBean)
      return this.equals((TimIqBean)that);
    return false;
  }

  public boolean equals(TimIqBean that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_threadId = true && this.isSetThreadId();
    boolean that_present_threadId = true && that.isSetThreadId();
    if (this_present_threadId || that_present_threadId) {
      if (!(this_present_threadId && that_present_threadId))
        return false;
      if (!this.threadId.equals(that.threadId))
        return false;
    }

    boolean this_present_fromTid = true && this.isSetFromTid();
    boolean that_present_fromTid = true && that.isSetFromTid();
    if (this_present_fromTid || that_present_fromTid) {
      if (!(this_present_fromTid && that_present_fromTid))
        return false;
      if (!this.fromTid.equals(that.fromTid))
        return false;
    }

    boolean this_present_toTid = true && this.isSetToTid();
    boolean that_present_toTid = true && that.isSetToTid();
    if (this_present_toTid || that_present_toTid) {
      if (!(this_present_toTid && that_present_toTid))
        return false;
      if (!this.toTid.equals(that.toTid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_extraList = true && this.isSetExtraList();
    boolean that_present_extraList = true && that.isSetExtraList();
    if (this_present_extraList || that_present_extraList) {
      if (!(this_present_extraList && that_present_extraList))
        return false;
      if (!this.extraList.equals(that.extraList))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_extraMap = true && this.isSetExtraMap();
    boolean that_present_extraMap = true && that.isSetExtraMap();
    if (this_present_extraMap || that_present_extraMap) {
      if (!(this_present_extraMap && that_present_extraMap))
        return false;
      if (!this.extraMap.equals(that.extraMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetThreadId()) ? 131071 : 524287);
    if (isSetThreadId())
      hashCode = hashCode * 8191 + threadId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromTid()) ? 131071 : 524287);
    if (isSetFromTid())
      hashCode = hashCode * 8191 + fromTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetToTid()) ? 131071 : 524287);
    if (isSetToTid())
      hashCode = hashCode * 8191 + toTid.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraList()) ? 131071 : 524287);
    if (isSetExtraList())
      hashCode = hashCode * 8191 + extraList.hashCode();

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + error.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtraMap()) ? 131071 : 524287);
    if (isSetExtraMap())
      hashCode = hashCode * 8191 + extraMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TimIqBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetThreadId(), other.isSetThreadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threadId, other.threadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFromTid(), other.isSetFromTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromTid, other.fromTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToTid(), other.isSetToTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTid, other.toTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtraList(), other.isSetExtraList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraList, other.extraList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetError(), other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtraMap(), other.isSetExtraMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraMap, other.extraMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TimIqBean(");
    boolean first = true;

    sb.append("threadId:");
    if (this.threadId == null) {
      sb.append("null");
    } else {
      sb.append(this.threadId);
    }
    first = false;
    if (isSetFromTid()) {
      if (!first) sb.append(", ");
      sb.append("fromTid:");
      if (this.fromTid == null) {
        sb.append("null");
      } else {
        sb.append(this.fromTid);
      }
      first = false;
    }
    if (isSetToTid()) {
      if (!first) sb.append(", ");
      sb.append("toTid:");
      if (this.toTid == null) {
        sb.append("null");
      } else {
        sb.append(this.toTid);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetExtraList()) {
      if (!first) sb.append(", ");
      sb.append("extraList:");
      if (this.extraList == null) {
        sb.append("null");
      } else {
        sb.append(this.extraList);
      }
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    if (isSetExtraMap()) {
      if (!first) sb.append(", ");
      sb.append("extraMap:");
      if (this.extraMap == null) {
        sb.append("null");
      } else {
        sb.append(this.extraMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (threadId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'threadId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fromTid != null) {
      fromTid.validate();
    }
    if (toTid != null) {
      toTid.validate();
    }
    if (error != null) {
      error.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimIqBeanStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimIqBeanStandardScheme getScheme() {
      return new TimIqBeanStandardScheme();
    }
  }

  private static class TimIqBeanStandardScheme extends org.apache.thrift.scheme.StandardScheme<TimIqBean> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TimIqBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // THREAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.threadId = iprot.readString();
              struct.setThreadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FROM_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromTid = new Tid();
              struct.fromTid.read(iprot);
              struct.setFromTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toTid = new Tid();
              struct.toTid.read(iprot);
              struct.setToTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTRA_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                struct.extraList = new java.util.ArrayList<TimNode>(_list168.size);
                @org.apache.thrift.annotation.Nullable TimNode _elem169;
                for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                {
                  _elem169 = new TimNode();
                  _elem169.read(iprot);
                  struct.extraList.add(_elem169);
                }
                iprot.readListEnd();
              }
              struct.setExtraListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.error = new TimError();
              struct.error.read(iprot);
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXTRA_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map171 = iprot.readMapBegin();
                struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map171.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key172;
                @org.apache.thrift.annotation.Nullable java.lang.String _val173;
                for (int _i174 = 0; _i174 < _map171.size; ++_i174)
                {
                  _key172 = iprot.readString();
                  _val173 = iprot.readString();
                  struct.extraMap.put(_key172, _val173);
                }
                iprot.readMapEnd();
              }
              struct.setExtraMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TimIqBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.threadId != null) {
        oprot.writeFieldBegin(THREAD_ID_FIELD_DESC);
        oprot.writeString(struct.threadId);
        oprot.writeFieldEnd();
      }
      if (struct.fromTid != null) {
        if (struct.isSetFromTid()) {
          oprot.writeFieldBegin(FROM_TID_FIELD_DESC);
          struct.fromTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toTid != null) {
        if (struct.isSetToTid()) {
          oprot.writeFieldBegin(TO_TID_FIELD_DESC);
          struct.toTid.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraList != null) {
        if (struct.isSetExtraList()) {
          oprot.writeFieldBegin(EXTRA_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.extraList.size()));
            for (TimNode _iter175 : struct.extraList)
            {
              _iter175.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraMap != null) {
        if (struct.isSetExtraMap()) {
          oprot.writeFieldBegin(EXTRA_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter176 : struct.extraMap.entrySet())
            {
              oprot.writeString(_iter176.getKey());
              oprot.writeString(_iter176.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimIqBeanTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TimIqBeanTupleScheme getScheme() {
      return new TimIqBeanTupleScheme();
    }
  }

  private static class TimIqBeanTupleScheme extends org.apache.thrift.scheme.TupleScheme<TimIqBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimIqBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.threadId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFromTid()) {
        optionals.set(0);
      }
      if (struct.isSetToTid()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetExtraList()) {
        optionals.set(3);
      }
      if (struct.isSetError()) {
        optionals.set(4);
      }
      if (struct.isSetExtraMap()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetFromTid()) {
        struct.fromTid.write(oprot);
      }
      if (struct.isSetToTid()) {
        struct.toTid.write(oprot);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetExtraList()) {
        {
          oprot.writeI32(struct.extraList.size());
          for (TimNode _iter177 : struct.extraList)
          {
            _iter177.write(oprot);
          }
        }
      }
      if (struct.isSetError()) {
        struct.error.write(oprot);
      }
      if (struct.isSetExtraMap()) {
        {
          oprot.writeI32(struct.extraMap.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter178 : struct.extraMap.entrySet())
          {
            oprot.writeString(_iter178.getKey());
            oprot.writeString(_iter178.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimIqBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.threadId = iprot.readString();
      struct.setThreadIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.fromTid = new Tid();
        struct.fromTid.read(iprot);
        struct.setFromTidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.toTid = new Tid();
        struct.toTid.read(iprot);
        struct.setToTidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list179 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.extraList = new java.util.ArrayList<TimNode>(_list179.size);
          @org.apache.thrift.annotation.Nullable TimNode _elem180;
          for (int _i181 = 0; _i181 < _list179.size; ++_i181)
          {
            _elem180 = new TimNode();
            _elem180.read(iprot);
            struct.extraList.add(_elem180);
          }
        }
        struct.setExtraListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.error = new TimError();
        struct.error.read(iprot);
        struct.setErrorIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map182 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extraMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map182.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key183;
          @org.apache.thrift.annotation.Nullable java.lang.String _val184;
          for (int _i185 = 0; _i185 < _map182.size; ++_i185)
          {
            _key183 = iprot.readString();
            _val184 = iprot.readString();
            struct.extraMap.put(_key183, _val184);
          }
        }
        struct.setExtraMapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

