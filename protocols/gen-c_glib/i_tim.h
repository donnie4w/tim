/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef I_TIM_H
#define I_TIM_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "tim_types.h"

/* ITim service interface */
typedef struct _ITimIf ITimIf;  /* dummy object */

struct _ITimIfInterface
{
  GTypeInterface parent;

  gboolean (*tim_stream) (ITimIf *iface, const TimParam * param, GError **error);
  gboolean (*tim_starttls) (ITimIf *iface, GError **error);
  gboolean (*tim_login) (ITimIf *iface, const Tid * tid, const gchar * pwd, GError **error);
  gboolean (*tim_ack) (ITimIf *iface, const TimAckBean * ab, GError **error);
  gboolean (*tim_presence) (ITimIf *iface, const TimPBean * pbean, GError **error);
  gboolean (*tim_message) (ITimIf *iface, const TimMBean * mbean, GError **error);
  gboolean (*tim_ping) (ITimIf *iface, const gchar * threadId, GError **error);
  gboolean (*tim_error) (ITimIf *iface, const TimError * e, GError **error);
  gboolean (*tim_logout) (ITimIf *iface, GError **error);
  gboolean (*tim_regist) (ITimIf *iface, const Tid * tid, const gchar * auth, GError **error);
  gboolean (*tim_roser) (ITimIf *iface, const TimRoster * roster, GError **error);
  gboolean (*tim_message_list) (ITimIf *iface, const TimMBeanList * mbeanList, GError **error);
  gboolean (*tim_presence_list) (ITimIf *iface, const TimPBeanList * pbeanList, GError **error);
  gboolean (*tim_message_iq) (ITimIf *iface, const TimMessageIq * timMsgIq, const gchar * iqType, GError **error);
  gboolean (*tim_message_result) (ITimIf *iface, const TimMBean * mbean, GError **error);
  gboolean (*tim_property) (ITimIf *iface, const TimPropertyBean * tpb, GError **error);
  gboolean (*tim_remote_user_auth) (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const gchar * pwd, const TimAuth * auth, GError **error);
  gboolean (*tim_remote_user_get) (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimAuth * auth, GError **error);
  gboolean (*tim_remote_user_edit) (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimUserBean * ub, const TimAuth * auth, GError **error);
  gboolean (*tim_response_presence) (ITimIf *iface, TimResponseBean ** _return, const TimPBean * pbean, const TimAuth * auth, GError **error);
  gboolean (*tim_response_message) (ITimIf *iface, TimResponseBean ** _return, const TimMBean * mbean, const TimAuth * auth, GError **error);
  gboolean (*tim_response_message_iq) (ITimIf *iface, TimMBeanList ** _return, const TimMessageIq * timMsgIq, const gchar * iqType, const TimAuth * auth, GError **error);
  gboolean (*tim_response_presence_list) (ITimIf *iface, TimResponseBean ** _return, const TimPBeanList * pbeanList, const TimAuth * auth, GError **error);
  gboolean (*tim_response_message_list) (ITimIf *iface, TimResponseBean ** _return, const TimMBeanList * mbeanList, const TimAuth * auth, GError **error);
};
typedef struct _ITimIfInterface ITimIfInterface;

GType i_tim_if_get_type (void);
#define TYPE_I_TIM_IF (i_tim_if_get_type())
#define I_TIM_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_TIM_IF, ITimIf))
#define IS_I_TIM_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_TIM_IF))
#define I_TIM_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_I_TIM_IF, ITimIfInterface))

gboolean i_tim_if_tim_stream (ITimIf *iface, const TimParam * param, GError **error);
gboolean i_tim_if_tim_starttls (ITimIf *iface, GError **error);
gboolean i_tim_if_tim_login (ITimIf *iface, const Tid * tid, const gchar * pwd, GError **error);
gboolean i_tim_if_tim_ack (ITimIf *iface, const TimAckBean * ab, GError **error);
gboolean i_tim_if_tim_presence (ITimIf *iface, const TimPBean * pbean, GError **error);
gboolean i_tim_if_tim_message (ITimIf *iface, const TimMBean * mbean, GError **error);
gboolean i_tim_if_tim_ping (ITimIf *iface, const gchar * threadId, GError **error);
gboolean i_tim_if_tim_error (ITimIf *iface, const TimError * e, GError **error);
gboolean i_tim_if_tim_logout (ITimIf *iface, GError **error);
gboolean i_tim_if_tim_regist (ITimIf *iface, const Tid * tid, const gchar * auth, GError **error);
gboolean i_tim_if_tim_roser (ITimIf *iface, const TimRoster * roster, GError **error);
gboolean i_tim_if_tim_message_list (ITimIf *iface, const TimMBeanList * mbeanList, GError **error);
gboolean i_tim_if_tim_presence_list (ITimIf *iface, const TimPBeanList * pbeanList, GError **error);
gboolean i_tim_if_tim_message_iq (ITimIf *iface, const TimMessageIq * timMsgIq, const gchar * iqType, GError **error);
gboolean i_tim_if_tim_message_result (ITimIf *iface, const TimMBean * mbean, GError **error);
gboolean i_tim_if_tim_property (ITimIf *iface, const TimPropertyBean * tpb, GError **error);
gboolean i_tim_if_tim_remote_user_auth (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const gchar * pwd, const TimAuth * auth, GError **error);
gboolean i_tim_if_tim_remote_user_get (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimAuth * auth, GError **error);
gboolean i_tim_if_tim_remote_user_edit (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimUserBean * ub, const TimAuth * auth, GError **error);
gboolean i_tim_if_tim_response_presence (ITimIf *iface, TimResponseBean ** _return, const TimPBean * pbean, const TimAuth * auth, GError **error);
gboolean i_tim_if_tim_response_message (ITimIf *iface, TimResponseBean ** _return, const TimMBean * mbean, const TimAuth * auth, GError **error);
gboolean i_tim_if_tim_response_message_iq (ITimIf *iface, TimMBeanList ** _return, const TimMessageIq * timMsgIq, const gchar * iqType, const TimAuth * auth, GError **error);
gboolean i_tim_if_tim_response_presence_list (ITimIf *iface, TimResponseBean ** _return, const TimPBeanList * pbeanList, const TimAuth * auth, GError **error);
gboolean i_tim_if_tim_response_message_list (ITimIf *iface, TimResponseBean ** _return, const TimMBeanList * mbeanList, const TimAuth * auth, GError **error);

/* ITim service client */
struct _ITimClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _ITimClient ITimClient;

struct _ITimClientClass
{
  GObjectClass parent;
};
typedef struct _ITimClientClass ITimClientClass;

GType i_tim_client_get_type (void);
#define TYPE_I_TIM_CLIENT (i_tim_client_get_type())
#define I_TIM_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_TIM_CLIENT, ITimClient))
#define I_TIM_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_TIM_CLIENT, ITimClientClass))
#define I_TIM_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_TIM_CLIENT))
#define I_TIM_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_TIM_CLIENT))
#define I_TIM_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_TIM_CLIENT, ITimClientClass))

gboolean i_tim_client_tim_stream (ITimIf * iface, const TimParam * param, GError ** error);
gboolean i_tim_client_send_tim_stream (ITimIf * iface, const TimParam * param, GError ** error);
gboolean i_tim_client_tim_starttls (ITimIf * iface, GError ** error);
gboolean i_tim_client_send_tim_starttls (ITimIf * iface, GError ** error);
gboolean i_tim_client_tim_login (ITimIf * iface, const Tid * tid, const gchar * pwd, GError ** error);
gboolean i_tim_client_send_tim_login (ITimIf * iface, const Tid * tid, const gchar * pwd, GError ** error);
gboolean i_tim_client_tim_ack (ITimIf * iface, const TimAckBean * ab, GError ** error);
gboolean i_tim_client_send_tim_ack (ITimIf * iface, const TimAckBean * ab, GError ** error);
gboolean i_tim_client_tim_presence (ITimIf * iface, const TimPBean * pbean, GError ** error);
gboolean i_tim_client_send_tim_presence (ITimIf * iface, const TimPBean * pbean, GError ** error);
gboolean i_tim_client_tim_message (ITimIf * iface, const TimMBean * mbean, GError ** error);
gboolean i_tim_client_send_tim_message (ITimIf * iface, const TimMBean * mbean, GError ** error);
gboolean i_tim_client_tim_ping (ITimIf * iface, const gchar * threadId, GError ** error);
gboolean i_tim_client_send_tim_ping (ITimIf * iface, const gchar * threadId, GError ** error);
gboolean i_tim_client_tim_error (ITimIf * iface, const TimError * e, GError ** error);
gboolean i_tim_client_send_tim_error (ITimIf * iface, const TimError * e, GError ** error);
gboolean i_tim_client_tim_logout (ITimIf * iface, GError ** error);
gboolean i_tim_client_send_tim_logout (ITimIf * iface, GError ** error);
gboolean i_tim_client_tim_regist (ITimIf * iface, const Tid * tid, const gchar * auth, GError ** error);
gboolean i_tim_client_send_tim_regist (ITimIf * iface, const Tid * tid, const gchar * auth, GError ** error);
gboolean i_tim_client_tim_roser (ITimIf * iface, const TimRoster * roster, GError ** error);
gboolean i_tim_client_send_tim_roser (ITimIf * iface, const TimRoster * roster, GError ** error);
gboolean i_tim_client_tim_message_list (ITimIf * iface, const TimMBeanList * mbeanList, GError ** error);
gboolean i_tim_client_send_tim_message_list (ITimIf * iface, const TimMBeanList * mbeanList, GError ** error);
gboolean i_tim_client_tim_presence_list (ITimIf * iface, const TimPBeanList * pbeanList, GError ** error);
gboolean i_tim_client_send_tim_presence_list (ITimIf * iface, const TimPBeanList * pbeanList, GError ** error);
gboolean i_tim_client_tim_message_iq (ITimIf * iface, const TimMessageIq * timMsgIq, const gchar * iqType, GError ** error);
gboolean i_tim_client_send_tim_message_iq (ITimIf * iface, const TimMessageIq * timMsgIq, const gchar * iqType, GError ** error);
gboolean i_tim_client_tim_message_result (ITimIf * iface, const TimMBean * mbean, GError ** error);
gboolean i_tim_client_send_tim_message_result (ITimIf * iface, const TimMBean * mbean, GError ** error);
gboolean i_tim_client_tim_property (ITimIf * iface, const TimPropertyBean * tpb, GError ** error);
gboolean i_tim_client_send_tim_property (ITimIf * iface, const TimPropertyBean * tpb, GError ** error);
gboolean i_tim_client_tim_remote_user_auth (ITimIf * iface, TimRemoteUserBean ** _return, const Tid * tid, const gchar * pwd, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_remote_user_auth (ITimIf * iface, const Tid * tid, const gchar * pwd, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_remote_user_auth (ITimIf * iface, TimRemoteUserBean ** _return, GError ** error);
gboolean i_tim_client_tim_remote_user_get (ITimIf * iface, TimRemoteUserBean ** _return, const Tid * tid, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_remote_user_get (ITimIf * iface, const Tid * tid, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_remote_user_get (ITimIf * iface, TimRemoteUserBean ** _return, GError ** error);
gboolean i_tim_client_tim_remote_user_edit (ITimIf * iface, TimRemoteUserBean ** _return, const Tid * tid, const TimUserBean * ub, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_remote_user_edit (ITimIf * iface, const Tid * tid, const TimUserBean * ub, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_remote_user_edit (ITimIf * iface, TimRemoteUserBean ** _return, GError ** error);
gboolean i_tim_client_tim_response_presence (ITimIf * iface, TimResponseBean ** _return, const TimPBean * pbean, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_response_presence (ITimIf * iface, const TimPBean * pbean, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_response_presence (ITimIf * iface, TimResponseBean ** _return, GError ** error);
gboolean i_tim_client_tim_response_message (ITimIf * iface, TimResponseBean ** _return, const TimMBean * mbean, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_response_message (ITimIf * iface, const TimMBean * mbean, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_response_message (ITimIf * iface, TimResponseBean ** _return, GError ** error);
gboolean i_tim_client_tim_response_message_iq (ITimIf * iface, TimMBeanList ** _return, const TimMessageIq * timMsgIq, const gchar * iqType, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_response_message_iq (ITimIf * iface, const TimMessageIq * timMsgIq, const gchar * iqType, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_response_message_iq (ITimIf * iface, TimMBeanList ** _return, GError ** error);
gboolean i_tim_client_tim_response_presence_list (ITimIf * iface, TimResponseBean ** _return, const TimPBeanList * pbeanList, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_response_presence_list (ITimIf * iface, const TimPBeanList * pbeanList, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_response_presence_list (ITimIf * iface, TimResponseBean ** _return, GError ** error);
gboolean i_tim_client_tim_response_message_list (ITimIf * iface, TimResponseBean ** _return, const TimMBeanList * mbeanList, const TimAuth * auth, GError ** error);
gboolean i_tim_client_send_tim_response_message_list (ITimIf * iface, const TimMBeanList * mbeanList, const TimAuth * auth, GError ** error);
gboolean i_tim_client_recv_tim_response_message_list (ITimIf * iface, TimResponseBean ** _return, GError ** error);
void i_tim_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void i_tim_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* ITim handler (abstract base class) */
struct _ITimHandler
{
  GObject parent;
};
typedef struct _ITimHandler ITimHandler;

struct _ITimHandlerClass
{
  GObjectClass parent;

  gboolean (*tim_stream) (ITimIf *iface, const TimParam * param, GError **error);
  gboolean (*tim_starttls) (ITimIf *iface, GError **error);
  gboolean (*tim_login) (ITimIf *iface, const Tid * tid, const gchar * pwd, GError **error);
  gboolean (*tim_ack) (ITimIf *iface, const TimAckBean * ab, GError **error);
  gboolean (*tim_presence) (ITimIf *iface, const TimPBean * pbean, GError **error);
  gboolean (*tim_message) (ITimIf *iface, const TimMBean * mbean, GError **error);
  gboolean (*tim_ping) (ITimIf *iface, const gchar * threadId, GError **error);
  gboolean (*tim_error) (ITimIf *iface, const TimError * e, GError **error);
  gboolean (*tim_logout) (ITimIf *iface, GError **error);
  gboolean (*tim_regist) (ITimIf *iface, const Tid * tid, const gchar * auth, GError **error);
  gboolean (*tim_roser) (ITimIf *iface, const TimRoster * roster, GError **error);
  gboolean (*tim_message_list) (ITimIf *iface, const TimMBeanList * mbeanList, GError **error);
  gboolean (*tim_presence_list) (ITimIf *iface, const TimPBeanList * pbeanList, GError **error);
  gboolean (*tim_message_iq) (ITimIf *iface, const TimMessageIq * timMsgIq, const gchar * iqType, GError **error);
  gboolean (*tim_message_result) (ITimIf *iface, const TimMBean * mbean, GError **error);
  gboolean (*tim_property) (ITimIf *iface, const TimPropertyBean * tpb, GError **error);
  gboolean (*tim_remote_user_auth) (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const gchar * pwd, const TimAuth * auth, GError **error);
  gboolean (*tim_remote_user_get) (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimAuth * auth, GError **error);
  gboolean (*tim_remote_user_edit) (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimUserBean * ub, const TimAuth * auth, GError **error);
  gboolean (*tim_response_presence) (ITimIf *iface, TimResponseBean ** _return, const TimPBean * pbean, const TimAuth * auth, GError **error);
  gboolean (*tim_response_message) (ITimIf *iface, TimResponseBean ** _return, const TimMBean * mbean, const TimAuth * auth, GError **error);
  gboolean (*tim_response_message_iq) (ITimIf *iface, TimMBeanList ** _return, const TimMessageIq * timMsgIq, const gchar * iqType, const TimAuth * auth, GError **error);
  gboolean (*tim_response_presence_list) (ITimIf *iface, TimResponseBean ** _return, const TimPBeanList * pbeanList, const TimAuth * auth, GError **error);
  gboolean (*tim_response_message_list) (ITimIf *iface, TimResponseBean ** _return, const TimMBeanList * mbeanList, const TimAuth * auth, GError **error);
};
typedef struct _ITimHandlerClass ITimHandlerClass;

GType i_tim_handler_get_type (void);
#define TYPE_I_TIM_HANDLER (i_tim_handler_get_type())
#define I_TIM_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_TIM_HANDLER, ITimHandler))
#define IS_I_TIM_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_TIM_HANDLER))
#define I_TIM_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_TIM_HANDLER, ITimHandlerClass))
#define IS_I_TIM_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_TIM_HANDLER))
#define I_TIM_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_TIM_HANDLER, ITimHandlerClass))

gboolean i_tim_handler_tim_stream (ITimIf *iface, const TimParam * param, GError **error);
gboolean i_tim_handler_tim_starttls (ITimIf *iface, GError **error);
gboolean i_tim_handler_tim_login (ITimIf *iface, const Tid * tid, const gchar * pwd, GError **error);
gboolean i_tim_handler_tim_ack (ITimIf *iface, const TimAckBean * ab, GError **error);
gboolean i_tim_handler_tim_presence (ITimIf *iface, const TimPBean * pbean, GError **error);
gboolean i_tim_handler_tim_message (ITimIf *iface, const TimMBean * mbean, GError **error);
gboolean i_tim_handler_tim_ping (ITimIf *iface, const gchar * threadId, GError **error);
gboolean i_tim_handler_tim_error (ITimIf *iface, const TimError * e, GError **error);
gboolean i_tim_handler_tim_logout (ITimIf *iface, GError **error);
gboolean i_tim_handler_tim_regist (ITimIf *iface, const Tid * tid, const gchar * auth, GError **error);
gboolean i_tim_handler_tim_roser (ITimIf *iface, const TimRoster * roster, GError **error);
gboolean i_tim_handler_tim_message_list (ITimIf *iface, const TimMBeanList * mbeanList, GError **error);
gboolean i_tim_handler_tim_presence_list (ITimIf *iface, const TimPBeanList * pbeanList, GError **error);
gboolean i_tim_handler_tim_message_iq (ITimIf *iface, const TimMessageIq * timMsgIq, const gchar * iqType, GError **error);
gboolean i_tim_handler_tim_message_result (ITimIf *iface, const TimMBean * mbean, GError **error);
gboolean i_tim_handler_tim_property (ITimIf *iface, const TimPropertyBean * tpb, GError **error);
gboolean i_tim_handler_tim_remote_user_auth (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const gchar * pwd, const TimAuth * auth, GError **error);
gboolean i_tim_handler_tim_remote_user_get (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimAuth * auth, GError **error);
gboolean i_tim_handler_tim_remote_user_edit (ITimIf *iface, TimRemoteUserBean ** _return, const Tid * tid, const TimUserBean * ub, const TimAuth * auth, GError **error);
gboolean i_tim_handler_tim_response_presence (ITimIf *iface, TimResponseBean ** _return, const TimPBean * pbean, const TimAuth * auth, GError **error);
gboolean i_tim_handler_tim_response_message (ITimIf *iface, TimResponseBean ** _return, const TimMBean * mbean, const TimAuth * auth, GError **error);
gboolean i_tim_handler_tim_response_message_iq (ITimIf *iface, TimMBeanList ** _return, const TimMessageIq * timMsgIq, const gchar * iqType, const TimAuth * auth, GError **error);
gboolean i_tim_handler_tim_response_presence_list (ITimIf *iface, TimResponseBean ** _return, const TimPBeanList * pbeanList, const TimAuth * auth, GError **error);
gboolean i_tim_handler_tim_response_message_list (ITimIf *iface, TimResponseBean ** _return, const TimMBeanList * mbeanList, const TimAuth * auth, GError **error);

/* ITim processor */
struct _ITimProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  ITimHandler *handler;
  GHashTable *process_map;
};
typedef struct _ITimProcessor ITimProcessor;

struct _ITimProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _ITimProcessorClass ITimProcessorClass;

GType i_tim_processor_get_type (void);
#define TYPE_I_TIM_PROCESSOR (i_tim_processor_get_type())
#define I_TIM_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_TIM_PROCESSOR, ITimProcessor))
#define IS_I_TIM_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_TIM_PROCESSOR))
#define I_TIM_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_I_TIM_PROCESSOR, ITimProcessorClass))
#define IS_I_TIM_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_TIM_PROCESSOR))
#define I_TIM_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_TIM_PROCESSOR, ITimProcessorClass))

#endif /* I_TIM_H */
