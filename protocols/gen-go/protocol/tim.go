// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package protocol

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - ErrCode: 错误码
//  - ErrMsg: 错误内容
type TimError struct {
  ErrCode *int32 `thrift:"errCode,1" db:"errCode" json:"errCode,omitempty"`
  ErrMsg *string `thrift:"errMsg,2" db:"errMsg" json:"errMsg,omitempty"`
}

func NewTimError() *TimError {
  return &TimError{}
}

var TimError_ErrCode_DEFAULT int32
func (p *TimError) GetErrCode() int32 {
  if !p.IsSetErrCode() {
    return TimError_ErrCode_DEFAULT
  }
return *p.ErrCode
}
var TimError_ErrMsg_DEFAULT string
func (p *TimError) GetErrMsg() string {
  if !p.IsSetErrMsg() {
    return TimError_ErrMsg_DEFAULT
  }
return *p.ErrMsg
}
func (p *TimError) IsSetErrCode() bool {
  return p.ErrCode != nil
}

func (p *TimError) IsSetErrMsg() bool {
  return p.ErrMsg != nil
}

func (p *TimError) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimError)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrCode = &v
}
  return nil
}

func (p *TimError)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrMsg = &v
}
  return nil
}

func (p *TimError) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrCode() {
    if err := oprot.WriteFieldBegin(ctx, "errCode", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errCode: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ErrCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errCode (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errCode: ", p), err) }
  }
  return err
}

func (p *TimError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrMsg() {
    if err := oprot.WriteFieldBegin(ctx, "errMsg", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errMsg: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ErrMsg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errMsg (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errMsg: ", p), err) }
  }
  return err
}

func (p *TimError) Equals(other *TimError) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrCode != other.ErrCode {
    if p.ErrCode == nil || other.ErrCode == nil {
      return false
    }
    if (*p.ErrCode) != (*other.ErrCode) { return false }
  }
  if p.ErrMsg != other.ErrMsg {
    if p.ErrMsg == nil || other.ErrMsg == nil {
      return false
    }
    if (*p.ErrMsg) != (*other.ErrMsg) { return false }
  }
  return true
}

func (p *TimError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimError(%+v)", *p)
}

// Attributes:
//  - Key: 键
//  - Value: 值
type TimNode struct {
  Key *string `thrift:"key,1" db:"key" json:"key,omitempty"`
  Value *string `thrift:"value,2" db:"value" json:"value,omitempty"`
}

func NewTimNode() *TimNode {
  return &TimNode{}
}

var TimNode_Key_DEFAULT string
func (p *TimNode) GetKey() string {
  if !p.IsSetKey() {
    return TimNode_Key_DEFAULT
  }
return *p.Key
}
var TimNode_Value_DEFAULT string
func (p *TimNode) GetValue() string {
  if !p.IsSetValue() {
    return TimNode_Value_DEFAULT
  }
return *p.Value
}
func (p *TimNode) IsSetKey() bool {
  return p.Key != nil
}

func (p *TimNode) IsSetValue() bool {
  return p.Value != nil
}

func (p *TimNode) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimNode)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = &v
}
  return nil
}

func (p *TimNode)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *TimNode) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimNode"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimNode) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetKey() {
    if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  }
  return err
}

func (p *TimNode) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *TimNode) Equals(other *TimNode) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Key != other.Key {
    if p.Key == nil || other.Key == nil {
      return false
    }
    if (*p.Key) != (*other.Key) { return false }
  }
  if p.Value != other.Value {
    if p.Value == nil || other.Value == nil {
      return false
    }
    if (*p.Value) != (*other.Value) { return false }
  }
  return true
}

func (p *TimNode) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimNode(%+v)", *p)
}

// Attributes:
//  - ID: id，返回所要回执协议的线程id
//  - AckType: 类型，自定义 如：ping，message等
//  - AckStatus: 状态，如成功，失败等
//  - ExtraList: 附加信息
//  - Err: 错误信息
//  - ExtraMap
type TimAckBean struct {
  ID *string `thrift:"id,1" db:"id" json:"id,omitempty"`
  AckType *string `thrift:"ackType,2" db:"ackType" json:"ackType,omitempty"`
  AckStatus *string `thrift:"ackStatus,3" db:"ackStatus" json:"ackStatus,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,4" db:"extraList" json:"extraList,omitempty"`
  Err *TimError `thrift:"err,5" db:"err" json:"err,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,6" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimAckBean() *TimAckBean {
  return &TimAckBean{}
}

var TimAckBean_ID_DEFAULT string
func (p *TimAckBean) GetID() string {
  if !p.IsSetID() {
    return TimAckBean_ID_DEFAULT
  }
return *p.ID
}
var TimAckBean_AckType_DEFAULT string
func (p *TimAckBean) GetAckType() string {
  if !p.IsSetAckType() {
    return TimAckBean_AckType_DEFAULT
  }
return *p.AckType
}
var TimAckBean_AckStatus_DEFAULT string
func (p *TimAckBean) GetAckStatus() string {
  if !p.IsSetAckStatus() {
    return TimAckBean_AckStatus_DEFAULT
  }
return *p.AckStatus
}
var TimAckBean_ExtraList_DEFAULT []*TimNode

func (p *TimAckBean) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimAckBean_Err_DEFAULT *TimError
func (p *TimAckBean) GetErr() *TimError {
  if !p.IsSetErr() {
    return TimAckBean_Err_DEFAULT
  }
return p.Err
}
var TimAckBean_ExtraMap_DEFAULT map[string]string

func (p *TimAckBean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimAckBean) IsSetID() bool {
  return p.ID != nil
}

func (p *TimAckBean) IsSetAckType() bool {
  return p.AckType != nil
}

func (p *TimAckBean) IsSetAckStatus() bool {
  return p.AckStatus != nil
}

func (p *TimAckBean) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimAckBean) IsSetErr() bool {
  return p.Err != nil
}

func (p *TimAckBean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimAckBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimAckBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *TimAckBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AckType = &v
}
  return nil
}

func (p *TimAckBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AckStatus = &v
}
  return nil
}

func (p *TimAckBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TimNode{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ExtraList = append(p.ExtraList, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimAckBean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Err = &TimError{}
  if err := p.Err.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Err), err)
  }
  return nil
}

func (p *TimAckBean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.ExtraMap[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimAckBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimAckBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimAckBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *TimAckBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAckType() {
    if err := oprot.WriteFieldBegin(ctx, "ackType", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ackType: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AckType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackType (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ackType: ", p), err) }
  }
  return err
}

func (p *TimAckBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAckStatus() {
    if err := oprot.WriteFieldBegin(ctx, "ackStatus", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ackStatus: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AckStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ackStatus (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ackStatus: ", p), err) }
  }
  return err
}

func (p *TimAckBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraList: ", p), err) }
  }
  return err
}

func (p *TimAckBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:err: ", p), err) }
    if err := p.Err.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Err), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:err: ", p), err) }
  }
  return err
}

func (p *TimAckBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extraMap: ", p), err) }
  }
  return err
}

func (p *TimAckBean) Equals(other *TimAckBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if p.AckType != other.AckType {
    if p.AckType == nil || other.AckType == nil {
      return false
    }
    if (*p.AckType) != (*other.AckType) { return false }
  }
  if p.AckStatus != other.AckStatus {
    if p.AckStatus == nil || other.AckStatus == nil {
      return false
    }
    if (*p.AckStatus) != (*other.AckStatus) { return false }
  }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src3 := other.ExtraList[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if !p.Err.Equals(other.Err) { return false }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src4 := other.ExtraMap[k]
    if _tgt != _src4 { return false }
  }
  return true
}

func (p *TimAckBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimAckBean(%+v)", *p)
}

// Attributes:
//  - Chl: 渠道
//  - Platform: 平台
//  - Version: version 客户端协议版本
type TimHBean struct {
  Chl int32 `thrift:"chl,1,required" db:"chl" json:"chl"`
  Platform *int32 `thrift:"platform,2" db:"platform" json:"platform,omitempty"`
  Version int16 `thrift:"version,3,required" db:"version" json:"version"`
}

func NewTimHBean() *TimHBean {
  return &TimHBean{}
}


func (p *TimHBean) GetChl() int32 {
  return p.Chl
}
var TimHBean_Platform_DEFAULT int32
func (p *TimHBean) GetPlatform() int32 {
  if !p.IsSetPlatform() {
    return TimHBean_Platform_DEFAULT
  }
return *p.Platform
}

func (p *TimHBean) GetVersion() int16 {
  return p.Version
}
func (p *TimHBean) IsSetPlatform() bool {
  return p.Platform != nil
}

func (p *TimHBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetChl bool = false;
  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetChl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetChl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Chl is not set"));
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *TimHBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Chl = v
}
  return nil
}

func (p *TimHBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Platform = &v
}
  return nil
}

func (p *TimHBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TimHBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimHBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimHBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chl", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chl: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Chl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chl: ", p), err) }
  return err
}

func (p *TimHBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPlatform() {
    if err := oprot.WriteFieldBegin(ctx, "platform", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:platform: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Platform)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.platform (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:platform: ", p), err) }
  }
  return err
}

func (p *TimHBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err) }
  return err
}

func (p *TimHBean) Equals(other *TimHBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Chl != other.Chl { return false }
  if p.Platform != other.Platform {
    if p.Platform == nil || other.Platform == nil {
      return false
    }
    if (*p.Platform) != (*other.Platform) { return false }
  }
  if p.Version != other.Version { return false }
  return true
}

func (p *TimHBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimHBean(%+v)", *p)
}

// Attributes:
//  - Timestamp: 服务器时间
//  - Version: 版本
//  - Lang: 语言
//  - ExtraList: 附加信息
//  - ExtraMap
//  - Interflow: 消息合流
//  - TLS: tls
type TimParam struct {
  Timestamp *string `thrift:"timestamp,1" db:"timestamp" json:"timestamp,omitempty"`
  Version *int16 `thrift:"version,2" db:"version" json:"version,omitempty"`
  Lang *string `thrift:"lang,3" db:"lang" json:"lang,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,4" db:"extraList" json:"extraList,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,5" db:"extraMap" json:"extraMap,omitempty"`
  Interflow *string `thrift:"interflow,6" db:"interflow" json:"interflow,omitempty"`
  TLS *string `thrift:"tls,7" db:"tls" json:"tls,omitempty"`
}

func NewTimParam() *TimParam {
  return &TimParam{}
}

var TimParam_Timestamp_DEFAULT string
func (p *TimParam) GetTimestamp() string {
  if !p.IsSetTimestamp() {
    return TimParam_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TimParam_Version_DEFAULT int16
func (p *TimParam) GetVersion() int16 {
  if !p.IsSetVersion() {
    return TimParam_Version_DEFAULT
  }
return *p.Version
}
var TimParam_Lang_DEFAULT string
func (p *TimParam) GetLang() string {
  if !p.IsSetLang() {
    return TimParam_Lang_DEFAULT
  }
return *p.Lang
}
var TimParam_ExtraList_DEFAULT []*TimNode

func (p *TimParam) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimParam_ExtraMap_DEFAULT map[string]string

func (p *TimParam) GetExtraMap() map[string]string {
  return p.ExtraMap
}
var TimParam_Interflow_DEFAULT string
func (p *TimParam) GetInterflow() string {
  if !p.IsSetInterflow() {
    return TimParam_Interflow_DEFAULT
  }
return *p.Interflow
}
var TimParam_TLS_DEFAULT string
func (p *TimParam) GetTLS() string {
  if !p.IsSetTLS() {
    return TimParam_TLS_DEFAULT
  }
return *p.TLS
}
func (p *TimParam) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TimParam) IsSetVersion() bool {
  return p.Version != nil
}

func (p *TimParam) IsSetLang() bool {
  return p.Lang != nil
}

func (p *TimParam) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimParam) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimParam) IsSetInterflow() bool {
  return p.Interflow != nil
}

func (p *TimParam) IsSetTLS() bool {
  return p.TLS != nil
}

func (p *TimParam) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimParam)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TimParam)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = &v
}
  return nil
}

func (p *TimParam)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Lang = &v
}
  return nil
}

func (p *TimParam)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &TimNode{}
    if err := _elem5.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.ExtraList = append(p.ExtraList, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimParam)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
var _val7 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val7 = v
}
    p.ExtraMap[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimParam)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Interflow = &v
}
  return nil
}

func (p *TimParam)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.TLS = &v
}
  return nil
}

func (p *TimParam) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimParam"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimParam) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  }
  return err
}

func (p *TimParam) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVersion() {
    if err := oprot.WriteFieldBegin(ctx, "version", thrift.I16, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.Version)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  }
  return err
}

func (p *TimParam) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLang() {
    if err := oprot.WriteFieldBegin(ctx, "lang", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Lang)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err) }
  }
  return err
}

func (p *TimParam) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraList: ", p), err) }
  }
  return err
}

func (p *TimParam) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraMap: ", p), err) }
  }
  return err
}

func (p *TimParam) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInterflow() {
    if err := oprot.WriteFieldBegin(ctx, "interflow", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:interflow: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Interflow)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.interflow (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:interflow: ", p), err) }
  }
  return err
}

func (p *TimParam) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTLS() {
    if err := oprot.WriteFieldBegin(ctx, "tls", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:tls: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TLS)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tls (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:tls: ", p), err) }
  }
  return err
}

func (p *TimParam) Equals(other *TimParam) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Timestamp != other.Timestamp {
    if p.Timestamp == nil || other.Timestamp == nil {
      return false
    }
    if (*p.Timestamp) != (*other.Timestamp) { return false }
  }
  if p.Version != other.Version {
    if p.Version == nil || other.Version == nil {
      return false
    }
    if (*p.Version) != (*other.Version) { return false }
  }
  if p.Lang != other.Lang {
    if p.Lang == nil || other.Lang == nil {
      return false
    }
    if (*p.Lang) != (*other.Lang) { return false }
  }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src8 := other.ExtraList[i]
    if !_tgt.Equals(_src8) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src9 := other.ExtraMap[k]
    if _tgt != _src9 { return false }
  }
  if p.Interflow != other.Interflow {
    if p.Interflow == nil || other.Interflow == nil {
      return false
    }
    if (*p.Interflow) != (*other.Interflow) { return false }
  }
  if p.TLS != other.TLS {
    if p.TLS == nil || other.TLS == nil {
      return false
    }
    if (*p.TLS) != (*other.TLS) { return false }
  }
  return true
}

func (p *TimParam) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimParam(%+v)", *p)
}

// Attributes:
//  - Timestamp: 时间戳    (毫秒)
//  - Formattime: 格式化时间
type TimTime struct {
  Timestamp *string `thrift:"timestamp,1" db:"timestamp" json:"timestamp,omitempty"`
  Formattime *string `thrift:"formattime,2" db:"formattime" json:"formattime,omitempty"`
}

func NewTimTime() *TimTime {
  return &TimTime{}
}

var TimTime_Timestamp_DEFAULT string
func (p *TimTime) GetTimestamp() string {
  if !p.IsSetTimestamp() {
    return TimTime_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TimTime_Formattime_DEFAULT string
func (p *TimTime) GetFormattime() string {
  if !p.IsSetFormattime() {
    return TimTime_Formattime_DEFAULT
  }
return *p.Formattime
}
func (p *TimTime) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TimTime) IsSetFormattime() bool {
  return p.Formattime != nil
}

func (p *TimTime) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimTime)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TimTime)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Formattime = &v
}
  return nil
}

func (p *TimTime) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimTime"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimTime) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timestamp: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timestamp: ", p), err) }
  }
  return err
}

func (p *TimTime) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFormattime() {
    if err := oprot.WriteFieldBegin(ctx, "formattime", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:formattime: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Formattime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.formattime (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:formattime: ", p), err) }
  }
  return err
}

func (p *TimTime) Equals(other *TimTime) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Timestamp != other.Timestamp {
    if p.Timestamp == nil || other.Timestamp == nil {
      return false
    }
    if (*p.Timestamp) != (*other.Timestamp) { return false }
  }
  if p.Formattime != other.Formattime {
    if p.Formattime == nil || other.Formattime == nil {
      return false
    }
    if (*p.Formattime) != (*other.Formattime) { return false }
  }
  return true
}

func (p *TimTime) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimTime(%+v)", *p)
}

// Attributes:
//  - Country: 国家
//  - Province: 省
//  - City: 市
//  - ExtraList: 附加信息：如区，镇，乡等
//  - ExtraMap
type TimArea struct {
  Country *string `thrift:"country,1" db:"country" json:"country,omitempty"`
  Province *string `thrift:"province,2" db:"province" json:"province,omitempty"`
  City *string `thrift:"city,3" db:"city" json:"city,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,4" db:"extraList" json:"extraList,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,5" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimArea() *TimArea {
  return &TimArea{}
}

var TimArea_Country_DEFAULT string
func (p *TimArea) GetCountry() string {
  if !p.IsSetCountry() {
    return TimArea_Country_DEFAULT
  }
return *p.Country
}
var TimArea_Province_DEFAULT string
func (p *TimArea) GetProvince() string {
  if !p.IsSetProvince() {
    return TimArea_Province_DEFAULT
  }
return *p.Province
}
var TimArea_City_DEFAULT string
func (p *TimArea) GetCity() string {
  if !p.IsSetCity() {
    return TimArea_City_DEFAULT
  }
return *p.City
}
var TimArea_ExtraList_DEFAULT []*TimNode

func (p *TimArea) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimArea_ExtraMap_DEFAULT map[string]string

func (p *TimArea) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimArea) IsSetCountry() bool {
  return p.Country != nil
}

func (p *TimArea) IsSetProvince() bool {
  return p.Province != nil
}

func (p *TimArea) IsSetCity() bool {
  return p.City != nil
}

func (p *TimArea) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimArea) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimArea) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimArea)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Country = &v
}
  return nil
}

func (p *TimArea)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Province = &v
}
  return nil
}

func (p *TimArea)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.City = &v
}
  return nil
}

func (p *TimArea)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &TimNode{}
    if err := _elem10.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.ExtraList = append(p.ExtraList, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimArea)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.ExtraMap[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimArea) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimArea"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimArea) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCountry() {
    if err := oprot.WriteFieldBegin(ctx, "country", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:country: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Country)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.country (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:country: ", p), err) }
  }
  return err
}

func (p *TimArea) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetProvince() {
    if err := oprot.WriteFieldBegin(ctx, "province", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:province: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Province)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.province (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:province: ", p), err) }
  }
  return err
}

func (p *TimArea) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCity() {
    if err := oprot.WriteFieldBegin(ctx, "city", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:city: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.City)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.city (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:city: ", p), err) }
  }
  return err
}

func (p *TimArea) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraList: ", p), err) }
  }
  return err
}

func (p *TimArea) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraMap: ", p), err) }
  }
  return err
}

func (p *TimArea) Equals(other *TimArea) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Country != other.Country {
    if p.Country == nil || other.Country == nil {
      return false
    }
    if (*p.Country) != (*other.Country) { return false }
  }
  if p.Province != other.Province {
    if p.Province == nil || other.Province == nil {
      return false
    }
    if (*p.Province) != (*other.Province) { return false }
  }
  if p.City != other.City {
    if p.City == nil || other.City == nil {
      return false
    }
    if (*p.City) != (*other.City) { return false }
  }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src13 := other.ExtraList[i]
    if !_tgt.Equals(_src13) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src14 := other.ExtraMap[k]
    if _tgt != _src14 { return false }
  }
  return true
}

func (p *TimArea) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimArea(%+v)", *p)
}

// Attributes:
//  - Name: 登陆名   用户登录号，房间号等
//  - Domain: 域名 用于区分渠道等 appid，appsecret
//  - Resource: 系统 自行约定 如 ： 1IOS，2android，3H5，4WEB 等
//  - Type: normal，group
//  - ExtraList: 附加信息：如传递客户端信息 iphone6，xiaomi，huawei等
//  - ExtraMap
type Tid struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Domain *string `thrift:"domain,2" db:"domain" json:"domain,omitempty"`
  Resource *string `thrift:"resource,3" db:"resource" json:"resource,omitempty"`
  Type *string `thrift:"type,4" db:"type" json:"type,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,5" db:"extraList" json:"extraList,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,6" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTid() *Tid {
  return &Tid{}
}


func (p *Tid) GetName() string {
  return p.Name
}
var Tid_Domain_DEFAULT string
func (p *Tid) GetDomain() string {
  if !p.IsSetDomain() {
    return Tid_Domain_DEFAULT
  }
return *p.Domain
}
var Tid_Resource_DEFAULT string
func (p *Tid) GetResource() string {
  if !p.IsSetResource() {
    return Tid_Resource_DEFAULT
  }
return *p.Resource
}
var Tid_Type_DEFAULT string
func (p *Tid) GetType() string {
  if !p.IsSetType() {
    return Tid_Type_DEFAULT
  }
return *p.Type
}
var Tid_ExtraList_DEFAULT []*TimNode

func (p *Tid) GetExtraList() []*TimNode {
  return p.ExtraList
}
var Tid_ExtraMap_DEFAULT map[string]string

func (p *Tid) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *Tid) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *Tid) IsSetResource() bool {
  return p.Resource != nil
}

func (p *Tid) IsSetType() bool {
  return p.Type != nil
}

func (p *Tid) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *Tid) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *Tid) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *Tid)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Tid)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *Tid)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Resource = &v
}
  return nil
}

func (p *Tid)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *Tid)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &TimNode{}
    if err := _elem15.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.ExtraList = append(p.ExtraList, _elem15)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Tid)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key16 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key16 = v
}
var _val17 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val17 = v
}
    p.ExtraMap[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Tid) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Tid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Tid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Tid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err) }
  }
  return err
}

func (p *Tid) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResource() {
    if err := oprot.WriteFieldBegin(ctx, "resource", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resource: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Resource)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resource (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resource: ", p), err) }
  }
  return err
}

func (p *Tid) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  }
  return err
}

func (p *Tid) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraList: ", p), err) }
  }
  return err
}

func (p *Tid) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:extraMap: ", p), err) }
  }
  return err
}

func (p *Tid) Equals(other *Tid) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Domain != other.Domain {
    if p.Domain == nil || other.Domain == nil {
      return false
    }
    if (*p.Domain) != (*other.Domain) { return false }
  }
  if p.Resource != other.Resource {
    if p.Resource == nil || other.Resource == nil {
      return false
    }
    if (*p.Resource) != (*other.Resource) { return false }
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src18 := other.ExtraList[i]
    if !_tgt.Equals(_src18) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src19 := other.ExtraMap[k]
    if _tgt != _src19 { return false }
  }
  return true
}

func (p *Tid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Tid(%+v)", *p)
}

// Attributes:
//  - Tid: 用户bean
//  - Nickname: 昵称
//  - Remarkname: 备注名称
//  - Brithday: 生日     2000-01-01
//  - Gender: 性别  自行约定 如 ：  0不知，1男，2女
//  - Headurl: 头像地址 http://xxx.jpg
//  - Area: 地区
//  - Headbyte: 头像
//  - PhotoBytes: 其他图片
//  - ExtraList: 扩展字段
//  - ExtraMap
type TimUserBean struct {
  Tid *Tid `thrift:"tid,1" db:"tid" json:"tid,omitempty"`
  Nickname *string `thrift:"nickname,2" db:"nickname" json:"nickname,omitempty"`
  Remarkname *string `thrift:"remarkname,3" db:"remarkname" json:"remarkname,omitempty"`
  Brithday *string `thrift:"brithday,4" db:"brithday" json:"brithday,omitempty"`
  Gender *int16 `thrift:"gender,5" db:"gender" json:"gender,omitempty"`
  Headurl *string `thrift:"headurl,6" db:"headurl" json:"headurl,omitempty"`
  Area *TimArea `thrift:"area,7" db:"area" json:"area,omitempty"`
  Headbyte []byte `thrift:"headbyte,8" db:"headbyte" json:"headbyte,omitempty"`
  PhotoBytes [][]byte `thrift:"photoBytes,9" db:"photoBytes" json:"photoBytes,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,10" db:"extraList" json:"extraList,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,11" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimUserBean() *TimUserBean {
  return &TimUserBean{}
}

var TimUserBean_Tid_DEFAULT *Tid
func (p *TimUserBean) GetTid() *Tid {
  if !p.IsSetTid() {
    return TimUserBean_Tid_DEFAULT
  }
return p.Tid
}
var TimUserBean_Nickname_DEFAULT string
func (p *TimUserBean) GetNickname() string {
  if !p.IsSetNickname() {
    return TimUserBean_Nickname_DEFAULT
  }
return *p.Nickname
}
var TimUserBean_Remarkname_DEFAULT string
func (p *TimUserBean) GetRemarkname() string {
  if !p.IsSetRemarkname() {
    return TimUserBean_Remarkname_DEFAULT
  }
return *p.Remarkname
}
var TimUserBean_Brithday_DEFAULT string
func (p *TimUserBean) GetBrithday() string {
  if !p.IsSetBrithday() {
    return TimUserBean_Brithday_DEFAULT
  }
return *p.Brithday
}
var TimUserBean_Gender_DEFAULT int16
func (p *TimUserBean) GetGender() int16 {
  if !p.IsSetGender() {
    return TimUserBean_Gender_DEFAULT
  }
return *p.Gender
}
var TimUserBean_Headurl_DEFAULT string
func (p *TimUserBean) GetHeadurl() string {
  if !p.IsSetHeadurl() {
    return TimUserBean_Headurl_DEFAULT
  }
return *p.Headurl
}
var TimUserBean_Area_DEFAULT *TimArea
func (p *TimUserBean) GetArea() *TimArea {
  if !p.IsSetArea() {
    return TimUserBean_Area_DEFAULT
  }
return p.Area
}
var TimUserBean_Headbyte_DEFAULT []byte

func (p *TimUserBean) GetHeadbyte() []byte {
  return p.Headbyte
}
var TimUserBean_PhotoBytes_DEFAULT [][]byte

func (p *TimUserBean) GetPhotoBytes() [][]byte {
  return p.PhotoBytes
}
var TimUserBean_ExtraList_DEFAULT []*TimNode

func (p *TimUserBean) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimUserBean_ExtraMap_DEFAULT map[string]string

func (p *TimUserBean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimUserBean) IsSetTid() bool {
  return p.Tid != nil
}

func (p *TimUserBean) IsSetNickname() bool {
  return p.Nickname != nil
}

func (p *TimUserBean) IsSetRemarkname() bool {
  return p.Remarkname != nil
}

func (p *TimUserBean) IsSetBrithday() bool {
  return p.Brithday != nil
}

func (p *TimUserBean) IsSetGender() bool {
  return p.Gender != nil
}

func (p *TimUserBean) IsSetHeadurl() bool {
  return p.Headurl != nil
}

func (p *TimUserBean) IsSetArea() bool {
  return p.Area != nil
}

func (p *TimUserBean) IsSetHeadbyte() bool {
  return p.Headbyte != nil
}

func (p *TimUserBean) IsSetPhotoBytes() bool {
  return p.PhotoBytes != nil
}

func (p *TimUserBean) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimUserBean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimUserBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimUserBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *TimUserBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nickname = &v
}
  return nil
}

func (p *TimUserBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Remarkname = &v
}
  return nil
}

func (p *TimUserBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Brithday = &v
}
  return nil
}

func (p *TimUserBean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Gender = &v
}
  return nil
}

func (p *TimUserBean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Headurl = &v
}
  return nil
}

func (p *TimUserBean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.Area = &TimArea{}
  if err := p.Area.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Area), err)
  }
  return nil
}

func (p *TimUserBean)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Headbyte = v
}
  return nil
}

func (p *TimUserBean)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.PhotoBytes =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.PhotoBytes = append(p.PhotoBytes, _elem20)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimUserBean)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &TimNode{}
    if err := _elem21.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.ExtraList = append(p.ExtraList, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimUserBean)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
var _val23 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.ExtraMap[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimUserBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimUserBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimUserBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTid() {
    if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
    if err := p.Tid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNickname() {
    if err := oprot.WriteFieldBegin(ctx, "nickname", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Nickname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nickname (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickname: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRemarkname() {
    if err := oprot.WriteFieldBegin(ctx, "remarkname", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remarkname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Remarkname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.remarkname (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remarkname: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBrithday() {
    if err := oprot.WriteFieldBegin(ctx, "brithday", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:brithday: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Brithday)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.brithday (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:brithday: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGender() {
    if err := oprot.WriteFieldBegin(ctx, "gender", thrift.I16, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gender: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.Gender)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gender (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gender: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHeadurl() {
    if err := oprot.WriteFieldBegin(ctx, "headurl", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:headurl: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Headurl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.headurl (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:headurl: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetArea() {
    if err := oprot.WriteFieldBegin(ctx, "area", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:area: ", p), err) }
    if err := p.Area.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Area), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:area: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHeadbyte() {
    if err := oprot.WriteFieldBegin(ctx, "headbyte", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:headbyte: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Headbyte); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.headbyte (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:headbyte: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoBytes() {
    if err := oprot.WriteFieldBegin(ctx, "photoBytes", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:photoBytes: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhotoBytes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PhotoBytes {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:photoBytes: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extraList: ", p), err) }
  }
  return err
}

func (p *TimUserBean) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extraMap: ", p), err) }
  }
  return err
}

func (p *TimUserBean) Equals(other *TimUserBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Tid.Equals(other.Tid) { return false }
  if p.Nickname != other.Nickname {
    if p.Nickname == nil || other.Nickname == nil {
      return false
    }
    if (*p.Nickname) != (*other.Nickname) { return false }
  }
  if p.Remarkname != other.Remarkname {
    if p.Remarkname == nil || other.Remarkname == nil {
      return false
    }
    if (*p.Remarkname) != (*other.Remarkname) { return false }
  }
  if p.Brithday != other.Brithday {
    if p.Brithday == nil || other.Brithday == nil {
      return false
    }
    if (*p.Brithday) != (*other.Brithday) { return false }
  }
  if p.Gender != other.Gender {
    if p.Gender == nil || other.Gender == nil {
      return false
    }
    if (*p.Gender) != (*other.Gender) { return false }
  }
  if p.Headurl != other.Headurl {
    if p.Headurl == nil || other.Headurl == nil {
      return false
    }
    if (*p.Headurl) != (*other.Headurl) { return false }
  }
  if !p.Area.Equals(other.Area) { return false }
  if bytes.Compare(p.Headbyte, other.Headbyte) != 0 { return false }
  if len(p.PhotoBytes) != len(other.PhotoBytes) { return false }
  for i, _tgt := range p.PhotoBytes {
    _src24 := other.PhotoBytes[i]
    if bytes.Compare(_tgt, _src24) != 0 { return false }
  }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src25 := other.ExtraList[i]
    if !_tgt.Equals(_src25) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src26 := other.ExtraMap[k]
    if _tgt != _src26 { return false }
  }
  return true
}

func (p *TimUserBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimUserBean(%+v)", *p)
}

// Attributes:
//  - Tid: 房间Tid
//  - FounderTid: 创建人Tid
//  - HostsTid: 主持人Tid
//  - MembersTid: memberTid
//  - Headurl: 头像地址 http://xxx.jpg
//  - RoomName: 房间名称
//  - Desc: 房间说明
//  - CreateTime: 房间创建时间
//  - ExtraList: 扩展字段
//  - ExtraMap
type TimRoom struct {
  Tid *Tid `thrift:"tid,1" db:"tid" json:"tid,omitempty"`
  FounderTid *Tid `thrift:"founderTid,2" db:"founderTid" json:"founderTid,omitempty"`
  HostsTid []*Tid `thrift:"HostsTid,3" db:"HostsTid" json:"HostsTid,omitempty"`
  MembersTid []*Tid `thrift:"membersTid,4" db:"membersTid" json:"membersTid,omitempty"`
  Headurl *string `thrift:"headurl,5" db:"headurl" json:"headurl,omitempty"`
  RoomName *string `thrift:"roomName,6" db:"roomName" json:"roomName,omitempty"`
  Desc *string `thrift:"desc,7" db:"desc" json:"desc,omitempty"`
  CreateTime *TimTime `thrift:"createTime,8" db:"createTime" json:"createTime,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,9" db:"extraList" json:"extraList,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,10" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimRoom() *TimRoom {
  return &TimRoom{}
}

var TimRoom_Tid_DEFAULT *Tid
func (p *TimRoom) GetTid() *Tid {
  if !p.IsSetTid() {
    return TimRoom_Tid_DEFAULT
  }
return p.Tid
}
var TimRoom_FounderTid_DEFAULT *Tid
func (p *TimRoom) GetFounderTid() *Tid {
  if !p.IsSetFounderTid() {
    return TimRoom_FounderTid_DEFAULT
  }
return p.FounderTid
}
var TimRoom_HostsTid_DEFAULT []*Tid

func (p *TimRoom) GetHostsTid() []*Tid {
  return p.HostsTid
}
var TimRoom_MembersTid_DEFAULT []*Tid

func (p *TimRoom) GetMembersTid() []*Tid {
  return p.MembersTid
}
var TimRoom_Headurl_DEFAULT string
func (p *TimRoom) GetHeadurl() string {
  if !p.IsSetHeadurl() {
    return TimRoom_Headurl_DEFAULT
  }
return *p.Headurl
}
var TimRoom_RoomName_DEFAULT string
func (p *TimRoom) GetRoomName() string {
  if !p.IsSetRoomName() {
    return TimRoom_RoomName_DEFAULT
  }
return *p.RoomName
}
var TimRoom_Desc_DEFAULT string
func (p *TimRoom) GetDesc() string {
  if !p.IsSetDesc() {
    return TimRoom_Desc_DEFAULT
  }
return *p.Desc
}
var TimRoom_CreateTime_DEFAULT *TimTime
func (p *TimRoom) GetCreateTime() *TimTime {
  if !p.IsSetCreateTime() {
    return TimRoom_CreateTime_DEFAULT
  }
return p.CreateTime
}
var TimRoom_ExtraList_DEFAULT []*TimNode

func (p *TimRoom) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimRoom_ExtraMap_DEFAULT map[string]string

func (p *TimRoom) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimRoom) IsSetTid() bool {
  return p.Tid != nil
}

func (p *TimRoom) IsSetFounderTid() bool {
  return p.FounderTid != nil
}

func (p *TimRoom) IsSetHostsTid() bool {
  return p.HostsTid != nil
}

func (p *TimRoom) IsSetMembersTid() bool {
  return p.MembersTid != nil
}

func (p *TimRoom) IsSetHeadurl() bool {
  return p.Headurl != nil
}

func (p *TimRoom) IsSetRoomName() bool {
  return p.RoomName != nil
}

func (p *TimRoom) IsSetDesc() bool {
  return p.Desc != nil
}

func (p *TimRoom) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *TimRoom) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimRoom) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *TimRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FounderTid = &Tid{}
  if err := p.FounderTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FounderTid), err)
  }
  return nil
}

func (p *TimRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Tid, 0, size)
  p.HostsTid =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &Tid{}
    if err := _elem27.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.HostsTid = append(p.HostsTid, _elem27)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Tid, 0, size)
  p.MembersTid =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &Tid{}
    if err := _elem28.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.MembersTid = append(p.MembersTid, _elem28)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Headurl = &v
}
  return nil
}

func (p *TimRoom)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RoomName = &v
}
  return nil
}

func (p *TimRoom)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Desc = &v
}
  return nil
}

func (p *TimRoom)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.CreateTime = &TimTime{}
  if err := p.CreateTime.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CreateTime), err)
  }
  return nil
}

func (p *TimRoom)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &TimNode{}
    if err := _elem29.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.ExtraList = append(p.ExtraList, _elem29)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimRoom)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key30 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key30 = v
}
var _val31 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val31 = v
}
    p.ExtraMap[_key30] = _val31
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTid() {
    if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
    if err := p.Tid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFounderTid() {
    if err := oprot.WriteFieldBegin(ctx, "founderTid", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:founderTid: ", p), err) }
    if err := p.FounderTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FounderTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:founderTid: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHostsTid() {
    if err := oprot.WriteFieldBegin(ctx, "HostsTid", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:HostsTid: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.HostsTid)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.HostsTid {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:HostsTid: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMembersTid() {
    if err := oprot.WriteFieldBegin(ctx, "membersTid", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:membersTid: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.MembersTid)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.MembersTid {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:membersTid: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHeadurl() {
    if err := oprot.WriteFieldBegin(ctx, "headurl", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:headurl: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Headurl)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.headurl (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:headurl: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRoomName() {
    if err := oprot.WriteFieldBegin(ctx, "roomName", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:roomName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RoomName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.roomName (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:roomName: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDesc() {
    if err := oprot.WriteFieldBegin(ctx, "desc", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:desc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Desc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.desc (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:desc: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createTime: ", p), err) }
    if err := p.CreateTime.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CreateTime), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createTime: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extraList: ", p), err) }
  }
  return err
}

func (p *TimRoom) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extraMap: ", p), err) }
  }
  return err
}

func (p *TimRoom) Equals(other *TimRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Tid.Equals(other.Tid) { return false }
  if !p.FounderTid.Equals(other.FounderTid) { return false }
  if len(p.HostsTid) != len(other.HostsTid) { return false }
  for i, _tgt := range p.HostsTid {
    _src32 := other.HostsTid[i]
    if !_tgt.Equals(_src32) { return false }
  }
  if len(p.MembersTid) != len(other.MembersTid) { return false }
  for i, _tgt := range p.MembersTid {
    _src33 := other.MembersTid[i]
    if !_tgt.Equals(_src33) { return false }
  }
  if p.Headurl != other.Headurl {
    if p.Headurl == nil || other.Headurl == nil {
      return false
    }
    if (*p.Headurl) != (*other.Headurl) { return false }
  }
  if p.RoomName != other.RoomName {
    if p.RoomName == nil || other.RoomName == nil {
      return false
    }
    if (*p.RoomName) != (*other.RoomName) { return false }
  }
  if p.Desc != other.Desc {
    if p.Desc == nil || other.Desc == nil {
      return false
    }
    if (*p.Desc) != (*other.Desc) { return false }
  }
  if !p.CreateTime.Equals(other.CreateTime) { return false }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src34 := other.ExtraList[i]
    if !_tgt.Equals(_src34) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src35 := other.ExtraMap[k]
    if _tgt != _src35 { return false }
  }
  return true
}

func (p *TimRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimRoom(%+v)", *p)
}

// Attributes:
//  - ThreadId: 标识
//  - FromTid
//  - ToTid
//  - Status: subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
//  - Type: normal：类似于email，主要特点是不要求响应；
// chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
// groupchat：类似于聊天室里的群聊；
// headline：用于发送alert和notification；
// error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
//  - Priority: 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
//  - Show: chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
//  - LeaguerTid: 成员Tid   群聊时信息发送者Tid
//  - ExtraList: 扩展字段
//  - Error: 错误码
//  - ExtraMap
type TimPBean struct {
  ThreadId string `thrift:"threadId,1,required" db:"threadId" json:"threadId"`
  FromTid *Tid `thrift:"fromTid,2" db:"fromTid" json:"fromTid,omitempty"`
  ToTid *Tid `thrift:"toTid,3" db:"toTid" json:"toTid,omitempty"`
  Status *string `thrift:"status,4" db:"status" json:"status,omitempty"`
  Type *string `thrift:"type,5" db:"type" json:"type,omitempty"`
  Priority *int32 `thrift:"priority,6" db:"priority" json:"priority,omitempty"`
  Show *string `thrift:"show,7" db:"show" json:"show,omitempty"`
  LeaguerTid *Tid `thrift:"leaguerTid,8" db:"leaguerTid" json:"leaguerTid,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,9" db:"extraList" json:"extraList,omitempty"`
  Error *TimError `thrift:"error,10" db:"error" json:"error,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,11" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimPBean() *TimPBean {
  return &TimPBean{}
}


func (p *TimPBean) GetThreadId() string {
  return p.ThreadId
}
var TimPBean_FromTid_DEFAULT *Tid
func (p *TimPBean) GetFromTid() *Tid {
  if !p.IsSetFromTid() {
    return TimPBean_FromTid_DEFAULT
  }
return p.FromTid
}
var TimPBean_ToTid_DEFAULT *Tid
func (p *TimPBean) GetToTid() *Tid {
  if !p.IsSetToTid() {
    return TimPBean_ToTid_DEFAULT
  }
return p.ToTid
}
var TimPBean_Status_DEFAULT string
func (p *TimPBean) GetStatus() string {
  if !p.IsSetStatus() {
    return TimPBean_Status_DEFAULT
  }
return *p.Status
}
var TimPBean_Type_DEFAULT string
func (p *TimPBean) GetType() string {
  if !p.IsSetType() {
    return TimPBean_Type_DEFAULT
  }
return *p.Type
}
var TimPBean_Priority_DEFAULT int32
func (p *TimPBean) GetPriority() int32 {
  if !p.IsSetPriority() {
    return TimPBean_Priority_DEFAULT
  }
return *p.Priority
}
var TimPBean_Show_DEFAULT string
func (p *TimPBean) GetShow() string {
  if !p.IsSetShow() {
    return TimPBean_Show_DEFAULT
  }
return *p.Show
}
var TimPBean_LeaguerTid_DEFAULT *Tid
func (p *TimPBean) GetLeaguerTid() *Tid {
  if !p.IsSetLeaguerTid() {
    return TimPBean_LeaguerTid_DEFAULT
  }
return p.LeaguerTid
}
var TimPBean_ExtraList_DEFAULT []*TimNode

func (p *TimPBean) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimPBean_Error_DEFAULT *TimError
func (p *TimPBean) GetError() *TimError {
  if !p.IsSetError() {
    return TimPBean_Error_DEFAULT
  }
return p.Error
}
var TimPBean_ExtraMap_DEFAULT map[string]string

func (p *TimPBean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimPBean) IsSetFromTid() bool {
  return p.FromTid != nil
}

func (p *TimPBean) IsSetToTid() bool {
  return p.ToTid != nil
}

func (p *TimPBean) IsSetStatus() bool {
  return p.Status != nil
}

func (p *TimPBean) IsSetType() bool {
  return p.Type != nil
}

func (p *TimPBean) IsSetPriority() bool {
  return p.Priority != nil
}

func (p *TimPBean) IsSetShow() bool {
  return p.Show != nil
}

func (p *TimPBean) IsSetLeaguerTid() bool {
  return p.LeaguerTid != nil
}

func (p *TimPBean) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimPBean) IsSetError() bool {
  return p.Error != nil
}

func (p *TimPBean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimPBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetThreadId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetThreadId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetThreadId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"));
  }
  return nil
}

func (p *TimPBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *TimPBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromTid = &Tid{}
  if err := p.FromTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
  }
  return nil
}

func (p *TimPBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ToTid = &Tid{}
  if err := p.ToTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
  }
  return nil
}

func (p *TimPBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *TimPBean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *TimPBean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Priority = &v
}
  return nil
}

func (p *TimPBean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Show = &v
}
  return nil
}

func (p *TimPBean)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.LeaguerTid = &Tid{}
  if err := p.LeaguerTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LeaguerTid), err)
  }
  return nil
}

func (p *TimPBean)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem36 := &TimNode{}
    if err := _elem36.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem36), err)
    }
    p.ExtraList = append(p.ExtraList, _elem36)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimPBean)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &TimError{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *TimPBean)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key37 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key37 = v
}
var _val38 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val38 = v
}
    p.ExtraMap[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimPBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimPBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimPBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  return err
}

func (p *TimPBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromTid() {
    if err := oprot.WriteFieldBegin(ctx, "fromTid", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromTid: ", p), err) }
    if err := p.FromTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromTid: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToTid() {
    if err := oprot.WriteFieldBegin(ctx, "toTid", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toTid: ", p), err) }
    if err := p.ToTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toTid: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:status: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:status: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPriority() {
    if err := oprot.WriteFieldBegin(ctx, "priority", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:priority: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Priority)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.priority (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:priority: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetShow() {
    if err := oprot.WriteFieldBegin(ctx, "show", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:show: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Show)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.show (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:show: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeaguerTid() {
    if err := oprot.WriteFieldBegin(ctx, "leaguerTid", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:leaguerTid: ", p), err) }
    if err := p.LeaguerTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LeaguerTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:leaguerTid: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extraList: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:error: ", p), err) }
  }
  return err
}

func (p *TimPBean) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extraMap: ", p), err) }
  }
  return err
}

func (p *TimPBean) Equals(other *TimPBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadId != other.ThreadId { return false }
  if !p.FromTid.Equals(other.FromTid) { return false }
  if !p.ToTid.Equals(other.ToTid) { return false }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  if p.Priority != other.Priority {
    if p.Priority == nil || other.Priority == nil {
      return false
    }
    if (*p.Priority) != (*other.Priority) { return false }
  }
  if p.Show != other.Show {
    if p.Show == nil || other.Show == nil {
      return false
    }
    if (*p.Show) != (*other.Show) { return false }
  }
  if !p.LeaguerTid.Equals(other.LeaguerTid) { return false }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src39 := other.ExtraList[i]
    if !_tgt.Equals(_src39) { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src40 := other.ExtraMap[k]
    if _tgt != _src40 { return false }
  }
  return true
}

func (p *TimPBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimPBean(%+v)", *p)
}

// Attributes:
//  - ThreadId: 线程id
//  - Mid: 消息id号
//  - FromTid: 来源Tid
//  - ToTid: 目标Tid
//  - Body: 信息内容
//  - Type: normal：类似于email，主要特点是不要求响应；
// chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
// groupchat：类似于聊天室里的群聊；
// headline：用于发送alert和notification；
// error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
//  - MsgType: 消息类型  1 文字 2 图片 3 语音 4视频 5混合
//  - Offline: 是否离线信息
//  - LeaguerTid: 成员Tid   群聊时信息发送者Tid
//  - ExtraList: 扩展字段
//  - Timestamp: 服务器发送信息时间戳(毫秒)
//  - Error: 错误码
//  - ExtraMap
//  - Readstatus: 0未读  1已读
type TimMBean struct {
  ThreadId string `thrift:"threadId,1,required" db:"threadId" json:"threadId"`
  Mid *string `thrift:"mid,2" db:"mid" json:"mid,omitempty"`
  FromTid *Tid `thrift:"fromTid,3" db:"fromTid" json:"fromTid,omitempty"`
  ToTid *Tid `thrift:"toTid,4" db:"toTid" json:"toTid,omitempty"`
  Body *string `thrift:"body,5" db:"body" json:"body,omitempty"`
  Type *string `thrift:"type,6" db:"type" json:"type,omitempty"`
  MsgType *int16 `thrift:"msgType,7" db:"msgType" json:"msgType,omitempty"`
  Offline *TimTime `thrift:"offline,8" db:"offline" json:"offline,omitempty"`
  LeaguerTid *Tid `thrift:"leaguerTid,9" db:"leaguerTid" json:"leaguerTid,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,10" db:"extraList" json:"extraList,omitempty"`
  Timestamp *string `thrift:"timestamp,11" db:"timestamp" json:"timestamp,omitempty"`
  Error *TimError `thrift:"error,12" db:"error" json:"error,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,13" db:"extraMap" json:"extraMap,omitempty"`
  Readstatus *int16 `thrift:"readstatus,14" db:"readstatus" json:"readstatus,omitempty"`
}

func NewTimMBean() *TimMBean {
  return &TimMBean{}
}


func (p *TimMBean) GetThreadId() string {
  return p.ThreadId
}
var TimMBean_Mid_DEFAULT string
func (p *TimMBean) GetMid() string {
  if !p.IsSetMid() {
    return TimMBean_Mid_DEFAULT
  }
return *p.Mid
}
var TimMBean_FromTid_DEFAULT *Tid
func (p *TimMBean) GetFromTid() *Tid {
  if !p.IsSetFromTid() {
    return TimMBean_FromTid_DEFAULT
  }
return p.FromTid
}
var TimMBean_ToTid_DEFAULT *Tid
func (p *TimMBean) GetToTid() *Tid {
  if !p.IsSetToTid() {
    return TimMBean_ToTid_DEFAULT
  }
return p.ToTid
}
var TimMBean_Body_DEFAULT string
func (p *TimMBean) GetBody() string {
  if !p.IsSetBody() {
    return TimMBean_Body_DEFAULT
  }
return *p.Body
}
var TimMBean_Type_DEFAULT string
func (p *TimMBean) GetType() string {
  if !p.IsSetType() {
    return TimMBean_Type_DEFAULT
  }
return *p.Type
}
var TimMBean_MsgType_DEFAULT int16
func (p *TimMBean) GetMsgType() int16 {
  if !p.IsSetMsgType() {
    return TimMBean_MsgType_DEFAULT
  }
return *p.MsgType
}
var TimMBean_Offline_DEFAULT *TimTime
func (p *TimMBean) GetOffline() *TimTime {
  if !p.IsSetOffline() {
    return TimMBean_Offline_DEFAULT
  }
return p.Offline
}
var TimMBean_LeaguerTid_DEFAULT *Tid
func (p *TimMBean) GetLeaguerTid() *Tid {
  if !p.IsSetLeaguerTid() {
    return TimMBean_LeaguerTid_DEFAULT
  }
return p.LeaguerTid
}
var TimMBean_ExtraList_DEFAULT []*TimNode

func (p *TimMBean) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimMBean_Timestamp_DEFAULT string
func (p *TimMBean) GetTimestamp() string {
  if !p.IsSetTimestamp() {
    return TimMBean_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TimMBean_Error_DEFAULT *TimError
func (p *TimMBean) GetError() *TimError {
  if !p.IsSetError() {
    return TimMBean_Error_DEFAULT
  }
return p.Error
}
var TimMBean_ExtraMap_DEFAULT map[string]string

func (p *TimMBean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
var TimMBean_Readstatus_DEFAULT int16
func (p *TimMBean) GetReadstatus() int16 {
  if !p.IsSetReadstatus() {
    return TimMBean_Readstatus_DEFAULT
  }
return *p.Readstatus
}
func (p *TimMBean) IsSetMid() bool {
  return p.Mid != nil
}

func (p *TimMBean) IsSetFromTid() bool {
  return p.FromTid != nil
}

func (p *TimMBean) IsSetToTid() bool {
  return p.ToTid != nil
}

func (p *TimMBean) IsSetBody() bool {
  return p.Body != nil
}

func (p *TimMBean) IsSetType() bool {
  return p.Type != nil
}

func (p *TimMBean) IsSetMsgType() bool {
  return p.MsgType != nil
}

func (p *TimMBean) IsSetOffline() bool {
  return p.Offline != nil
}

func (p *TimMBean) IsSetLeaguerTid() bool {
  return p.LeaguerTid != nil
}

func (p *TimMBean) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimMBean) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TimMBean) IsSetError() bool {
  return p.Error != nil
}

func (p *TimMBean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimMBean) IsSetReadstatus() bool {
  return p.Readstatus != nil
}

func (p *TimMBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetThreadId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetThreadId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetThreadId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"));
  }
  return nil
}

func (p *TimMBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *TimMBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = &v
}
  return nil
}

func (p *TimMBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromTid = &Tid{}
  if err := p.FromTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
  }
  return nil
}

func (p *TimMBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.ToTid = &Tid{}
  if err := p.ToTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
  }
  return nil
}

func (p *TimMBean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Body = &v
}
  return nil
}

func (p *TimMBean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *TimMBean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.MsgType = &v
}
  return nil
}

func (p *TimMBean)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Offline = &TimTime{}
  if err := p.Offline.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Offline), err)
  }
  return nil
}

func (p *TimMBean)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.LeaguerTid = &Tid{}
  if err := p.LeaguerTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LeaguerTid), err)
  }
  return nil
}

func (p *TimMBean)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem41 := &TimNode{}
    if err := _elem41.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem41), err)
    }
    p.ExtraList = append(p.ExtraList, _elem41)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimMBean)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TimMBean)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &TimError{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *TimMBean)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key42 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key42 = v
}
var _val43 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val43 = v
}
    p.ExtraMap[_key42] = _val43
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimMBean)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Readstatus = &v
}
  return nil
}

func (p *TimMBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimMBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimMBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  return err
}

func (p *TimMBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMid() {
    if err := oprot.WriteFieldBegin(ctx, "mid", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Mid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromTid() {
    if err := oprot.WriteFieldBegin(ctx, "fromTid", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromTid: ", p), err) }
    if err := p.FromTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromTid: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToTid() {
    if err := oprot.WriteFieldBegin(ctx, "toTid", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toTid: ", p), err) }
    if err := p.ToTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toTid: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBody() {
    if err := oprot.WriteFieldBegin(ctx, "body", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:body: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Body)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.body (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:body: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMsgType() {
    if err := oprot.WriteFieldBegin(ctx, "msgType", thrift.I16, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:msgType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.MsgType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.msgType (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:msgType: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOffline() {
    if err := oprot.WriteFieldBegin(ctx, "offline", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:offline: ", p), err) }
    if err := p.Offline.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Offline), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:offline: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLeaguerTid() {
    if err := oprot.WriteFieldBegin(ctx, "leaguerTid", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:leaguerTid: ", p), err) }
    if err := p.LeaguerTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LeaguerTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:leaguerTid: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extraList: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:timestamp: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:timestamp: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:error: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:extraMap: ", p), err) }
  }
  return err
}

func (p *TimMBean) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReadstatus() {
    if err := oprot.WriteFieldBegin(ctx, "readstatus", thrift.I16, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:readstatus: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.Readstatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readstatus (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:readstatus: ", p), err) }
  }
  return err
}

func (p *TimMBean) Equals(other *TimMBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadId != other.ThreadId { return false }
  if p.Mid != other.Mid {
    if p.Mid == nil || other.Mid == nil {
      return false
    }
    if (*p.Mid) != (*other.Mid) { return false }
  }
  if !p.FromTid.Equals(other.FromTid) { return false }
  if !p.ToTid.Equals(other.ToTid) { return false }
  if p.Body != other.Body {
    if p.Body == nil || other.Body == nil {
      return false
    }
    if (*p.Body) != (*other.Body) { return false }
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  if p.MsgType != other.MsgType {
    if p.MsgType == nil || other.MsgType == nil {
      return false
    }
    if (*p.MsgType) != (*other.MsgType) { return false }
  }
  if !p.Offline.Equals(other.Offline) { return false }
  if !p.LeaguerTid.Equals(other.LeaguerTid) { return false }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src44 := other.ExtraList[i]
    if !_tgt.Equals(_src44) { return false }
  }
  if p.Timestamp != other.Timestamp {
    if p.Timestamp == nil || other.Timestamp == nil {
      return false
    }
    if (*p.Timestamp) != (*other.Timestamp) { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src45 := other.ExtraMap[k]
    if _tgt != _src45 { return false }
  }
  if p.Readstatus != other.Readstatus {
    if p.Readstatus == nil || other.Readstatus == nil {
      return false
    }
    if (*p.Readstatus) != (*other.Readstatus) { return false }
  }
  return true
}

func (p *TimMBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimMBean(%+v)", *p)
}

// Attributes:
//  - ThreadId: 线程id
//  - FromTid
//  - ToTid
//  - Type: Get :获取当前域值。类似于http get方法
// Set :设置或替换get查询的值。类似于http put方法。
// Result :说明成功的响应了先前的查询。类似于http状态码200。
// Error: 查询和响应中出现的错误。
//  - ExtraList: 扩展字段
//  - Error: 错误码
//  - ExtraMap
type TimIqBean struct {
  ThreadId string `thrift:"threadId,1,required" db:"threadId" json:"threadId"`
  FromTid *Tid `thrift:"fromTid,2" db:"fromTid" json:"fromTid,omitempty"`
  ToTid *Tid `thrift:"toTid,3" db:"toTid" json:"toTid,omitempty"`
  Type *string `thrift:"type,4" db:"type" json:"type,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,5" db:"extraList" json:"extraList,omitempty"`
  Error *TimError `thrift:"error,6" db:"error" json:"error,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,7" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimIqBean() *TimIqBean {
  return &TimIqBean{}
}


func (p *TimIqBean) GetThreadId() string {
  return p.ThreadId
}
var TimIqBean_FromTid_DEFAULT *Tid
func (p *TimIqBean) GetFromTid() *Tid {
  if !p.IsSetFromTid() {
    return TimIqBean_FromTid_DEFAULT
  }
return p.FromTid
}
var TimIqBean_ToTid_DEFAULT *Tid
func (p *TimIqBean) GetToTid() *Tid {
  if !p.IsSetToTid() {
    return TimIqBean_ToTid_DEFAULT
  }
return p.ToTid
}
var TimIqBean_Type_DEFAULT string
func (p *TimIqBean) GetType() string {
  if !p.IsSetType() {
    return TimIqBean_Type_DEFAULT
  }
return *p.Type
}
var TimIqBean_ExtraList_DEFAULT []*TimNode

func (p *TimIqBean) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimIqBean_Error_DEFAULT *TimError
func (p *TimIqBean) GetError() *TimError {
  if !p.IsSetError() {
    return TimIqBean_Error_DEFAULT
  }
return p.Error
}
var TimIqBean_ExtraMap_DEFAULT map[string]string

func (p *TimIqBean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimIqBean) IsSetFromTid() bool {
  return p.FromTid != nil
}

func (p *TimIqBean) IsSetToTid() bool {
  return p.ToTid != nil
}

func (p *TimIqBean) IsSetType() bool {
  return p.Type != nil
}

func (p *TimIqBean) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimIqBean) IsSetError() bool {
  return p.Error != nil
}

func (p *TimIqBean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimIqBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetThreadId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetThreadId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetThreadId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"));
  }
  return nil
}

func (p *TimIqBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *TimIqBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromTid = &Tid{}
  if err := p.FromTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
  }
  return nil
}

func (p *TimIqBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ToTid = &Tid{}
  if err := p.ToTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
  }
  return nil
}

func (p *TimIqBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *TimIqBean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem46 := &TimNode{}
    if err := _elem46.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
    }
    p.ExtraList = append(p.ExtraList, _elem46)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimIqBean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &TimError{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *TimIqBean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key47 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key47 = v
}
var _val48 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val48 = v
}
    p.ExtraMap[_key47] = _val48
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimIqBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimIqBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimIqBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  return err
}

func (p *TimIqBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromTid() {
    if err := oprot.WriteFieldBegin(ctx, "fromTid", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromTid: ", p), err) }
    if err := p.FromTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromTid: ", p), err) }
  }
  return err
}

func (p *TimIqBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToTid() {
    if err := oprot.WriteFieldBegin(ctx, "toTid", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toTid: ", p), err) }
    if err := p.ToTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toTid: ", p), err) }
  }
  return err
}

func (p *TimIqBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err) }
  }
  return err
}

func (p *TimIqBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extraList: ", p), err) }
  }
  return err
}

func (p *TimIqBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:error: ", p), err) }
  }
  return err
}

func (p *TimIqBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extraMap: ", p), err) }
  }
  return err
}

func (p *TimIqBean) Equals(other *TimIqBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadId != other.ThreadId { return false }
  if !p.FromTid.Equals(other.FromTid) { return false }
  if !p.ToTid.Equals(other.ToTid) { return false }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src49 := other.ExtraList[i]
    if !_tgt.Equals(_src49) { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src50 := other.ExtraMap[k]
    if _tgt != _src50 { return false }
  }
  return true
}

func (p *TimIqBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimIqBean(%+v)", *p)
}

// Attributes:
//  - Subscription: none表示用户和contact之前没有任何的关系（虽然在server的buddy list中存在）
// to表示用户能看到contact的presence，但是contact看不到用户的Presence
// from和to的含义相反，指用户看不到contact的presence，但是contact可以看到
// both表示相关之间都能看到对方的presence
//  - Tid
//  - Name: 用户名
//  - ExtraMap
type TimRoster struct {
  Subscription string `thrift:"subscription,1,required" db:"subscription" json:"subscription"`
  Tid *Tid `thrift:"tid,2,required" db:"tid" json:"tid"`
  Name *string `thrift:"name,3" db:"name" json:"name,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,4" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimRoster() *TimRoster {
  return &TimRoster{}
}


func (p *TimRoster) GetSubscription() string {
  return p.Subscription
}
var TimRoster_Tid_DEFAULT *Tid
func (p *TimRoster) GetTid() *Tid {
  if !p.IsSetTid() {
    return TimRoster_Tid_DEFAULT
  }
return p.Tid
}
var TimRoster_Name_DEFAULT string
func (p *TimRoster) GetName() string {
  if !p.IsSetName() {
    return TimRoster_Name_DEFAULT
  }
return *p.Name
}
var TimRoster_ExtraMap_DEFAULT map[string]string

func (p *TimRoster) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimRoster) IsSetTid() bool {
  return p.Tid != nil
}

func (p *TimRoster) IsSetName() bool {
  return p.Name != nil
}

func (p *TimRoster) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimRoster) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSubscription bool = false;
  var issetTid bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSubscription = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSubscription{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Subscription is not set"));
  }
  if !issetTid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tid is not set"));
  }
  return nil
}

func (p *TimRoster)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Subscription = v
}
  return nil
}

func (p *TimRoster)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *TimRoster)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *TimRoster)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key51 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key51 = v
}
var _val52 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val52 = v
}
    p.ExtraMap[_key51] = _val52
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimRoster) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimRoster"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimRoster) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "subscription", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subscription: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Subscription)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subscription (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subscription: ", p), err) }
  return err
}

func (p *TimRoster) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tid: ", p), err) }
  if err := p.Tid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tid: ", p), err) }
  return err
}

func (p *TimRoster) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  }
  return err
}

func (p *TimRoster) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err) }
  }
  return err
}

func (p *TimRoster) Equals(other *TimRoster) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Subscription != other.Subscription { return false }
  if !p.Tid.Equals(other.Tid) { return false }
  if p.Name != other.Name {
    if p.Name == nil || other.Name == nil {
      return false
    }
    if (*p.Name) != (*other.Name) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src53 := other.ExtraMap[k]
    if _tgt != _src53 { return false }
  }
  return true
}

func (p *TimRoster) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimRoster(%+v)", *p)
}

// Attributes:
//  - Error: 错误码
//  - Ub: 远程用户信息
//  - ExtraMap
type TimRemoteUserBean struct {
  Error *TimError `thrift:"error,1" db:"error" json:"error,omitempty"`
  Ub *TimUserBean `thrift:"ub,2" db:"ub" json:"ub,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,3" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimRemoteUserBean() *TimRemoteUserBean {
  return &TimRemoteUserBean{}
}

var TimRemoteUserBean_Error_DEFAULT *TimError
func (p *TimRemoteUserBean) GetError() *TimError {
  if !p.IsSetError() {
    return TimRemoteUserBean_Error_DEFAULT
  }
return p.Error
}
var TimRemoteUserBean_Ub_DEFAULT *TimUserBean
func (p *TimRemoteUserBean) GetUb() *TimUserBean {
  if !p.IsSetUb() {
    return TimRemoteUserBean_Ub_DEFAULT
  }
return p.Ub
}
var TimRemoteUserBean_ExtraMap_DEFAULT map[string]string

func (p *TimRemoteUserBean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimRemoteUserBean) IsSetError() bool {
  return p.Error != nil
}

func (p *TimRemoteUserBean) IsSetUb() bool {
  return p.Ub != nil
}

func (p *TimRemoteUserBean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimRemoteUserBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimRemoteUserBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &TimError{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *TimRemoteUserBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ub = &TimUserBean{}
  if err := p.Ub.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ub), err)
  }
  return nil
}

func (p *TimRemoteUserBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key54 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key54 = v
}
var _val55 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val55 = v
}
    p.ExtraMap[_key54] = _val55
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimRemoteUserBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimRemoteUserBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimRemoteUserBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *TimRemoteUserBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUb() {
    if err := oprot.WriteFieldBegin(ctx, "ub", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ub: ", p), err) }
    if err := p.Ub.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ub), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ub: ", p), err) }
  }
  return err
}

func (p *TimRemoteUserBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extraMap: ", p), err) }
  }
  return err
}

func (p *TimRemoteUserBean) Equals(other *TimRemoteUserBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  if !p.Ub.Equals(other.Ub) { return false }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src56 := other.ExtraMap[k]
    if _tgt != _src56 { return false }
  }
  return true
}

func (p *TimRemoteUserBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimRemoteUserBean(%+v)", *p)
}

// Attributes:
//  - Error: 错误码
//  - Room: 远程房间信息
//  - ExtraMap
type TimRemoteRoom struct {
  Error *TimError `thrift:"error,1" db:"error" json:"error,omitempty"`
  Room *TimRoom `thrift:"room,2" db:"room" json:"room,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,3" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimRemoteRoom() *TimRemoteRoom {
  return &TimRemoteRoom{}
}

var TimRemoteRoom_Error_DEFAULT *TimError
func (p *TimRemoteRoom) GetError() *TimError {
  if !p.IsSetError() {
    return TimRemoteRoom_Error_DEFAULT
  }
return p.Error
}
var TimRemoteRoom_Room_DEFAULT *TimRoom
func (p *TimRemoteRoom) GetRoom() *TimRoom {
  if !p.IsSetRoom() {
    return TimRemoteRoom_Room_DEFAULT
  }
return p.Room
}
var TimRemoteRoom_ExtraMap_DEFAULT map[string]string

func (p *TimRemoteRoom) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimRemoteRoom) IsSetError() bool {
  return p.Error != nil
}

func (p *TimRemoteRoom) IsSetRoom() bool {
  return p.Room != nil
}

func (p *TimRemoteRoom) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimRemoteRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimRemoteRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &TimError{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *TimRemoteRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Room = &TimRoom{}
  if err := p.Room.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Room), err)
  }
  return nil
}

func (p *TimRemoteRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key57 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key57 = v
}
var _val58 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val58 = v
}
    p.ExtraMap[_key57] = _val58
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimRemoteRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimRemoteRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimRemoteRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *TimRemoteRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRoom() {
    if err := oprot.WriteFieldBegin(ctx, "room", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:room: ", p), err) }
    if err := p.Room.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Room), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:room: ", p), err) }
  }
  return err
}

func (p *TimRemoteRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extraMap: ", p), err) }
  }
  return err
}

func (p *TimRemoteRoom) Equals(other *TimRemoteRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Error.Equals(other.Error) { return false }
  if !p.Room.Equals(other.Room) { return false }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src59 := other.ExtraMap[k]
    if _tgt != _src59 { return false }
  }
  return true
}

func (p *TimRemoteRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimRemoteRoom(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - Error: 错误码
//  - ExtraList: 附加信息
//  - ExtraMap
type TimResponseBean struct {
  ThreadId *string `thrift:"threadId,1" db:"threadId" json:"threadId,omitempty"`
  Error *TimError `thrift:"error,2" db:"error" json:"error,omitempty"`
  ExtraList []*TimNode `thrift:"extraList,3" db:"extraList" json:"extraList,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,4" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimResponseBean() *TimResponseBean {
  return &TimResponseBean{}
}

var TimResponseBean_ThreadId_DEFAULT string
func (p *TimResponseBean) GetThreadId() string {
  if !p.IsSetThreadId() {
    return TimResponseBean_ThreadId_DEFAULT
  }
return *p.ThreadId
}
var TimResponseBean_Error_DEFAULT *TimError
func (p *TimResponseBean) GetError() *TimError {
  if !p.IsSetError() {
    return TimResponseBean_Error_DEFAULT
  }
return p.Error
}
var TimResponseBean_ExtraList_DEFAULT []*TimNode

func (p *TimResponseBean) GetExtraList() []*TimNode {
  return p.ExtraList
}
var TimResponseBean_ExtraMap_DEFAULT map[string]string

func (p *TimResponseBean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimResponseBean) IsSetThreadId() bool {
  return p.ThreadId != nil
}

func (p *TimResponseBean) IsSetError() bool {
  return p.Error != nil
}

func (p *TimResponseBean) IsSetExtraList() bool {
  return p.ExtraList != nil
}

func (p *TimResponseBean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimResponseBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimResponseBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = &v
}
  return nil
}

func (p *TimResponseBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &TimError{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *TimResponseBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimNode, 0, size)
  p.ExtraList =  tSlice
  for i := 0; i < size; i ++ {
    _elem60 := &TimNode{}
    if err := _elem60.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem60), err)
    }
    p.ExtraList = append(p.ExtraList, _elem60)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimResponseBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key61 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key61 = v
}
var _val62 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val62 = v
}
    p.ExtraMap[_key61] = _val62
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimResponseBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimResponseBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimResponseBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadId() {
    if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ThreadId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  }
  return err
}

func (p *TimResponseBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err) }
  }
  return err
}

func (p *TimResponseBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraList() {
    if err := oprot.WriteFieldBegin(ctx, "extraList", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extraList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ExtraList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ExtraList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extraList: ", p), err) }
  }
  return err
}

func (p *TimResponseBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err) }
  }
  return err
}

func (p *TimResponseBean) Equals(other *TimResponseBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadId != other.ThreadId {
    if p.ThreadId == nil || other.ThreadId == nil {
      return false
    }
    if (*p.ThreadId) != (*other.ThreadId) { return false }
  }
  if !p.Error.Equals(other.Error) { return false }
  if len(p.ExtraList) != len(other.ExtraList) { return false }
  for i, _tgt := range p.ExtraList {
    _src63 := other.ExtraList[i]
    if !_tgt.Equals(_src63) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src64 := other.ExtraMap[k]
    if _tgt != _src64 { return false }
  }
  return true
}

func (p *TimResponseBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimResponseBean(%+v)", *p)
}

// Attributes:
//  - FromTid
//  - ToTid
//  - Addr: ip地址
//  - Port: 端口
//  - Transport: 传输类型  1:tcp 2:udp
//  - PubId: 发布id 通过发布id 可以连接两个发布id相同的用户
//  - ExtraMap
type TimSock5Bean struct {
  FromTid *Tid `thrift:"fromTid,1,required" db:"fromTid" json:"fromTid"`
  ToTid *Tid `thrift:"toTid,2,required" db:"toTid" json:"toTid"`
  Addr string `thrift:"addr,3,required" db:"addr" json:"addr"`
  Port int32 `thrift:"port,4,required" db:"port" json:"port"`
  Transport int16 `thrift:"transport,5,required" db:"transport" json:"transport"`
  PubId string `thrift:"pubId,6,required" db:"pubId" json:"pubId"`
  ExtraMap map[string]string `thrift:"extraMap,7" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimSock5Bean() *TimSock5Bean {
  return &TimSock5Bean{}
}

var TimSock5Bean_FromTid_DEFAULT *Tid
func (p *TimSock5Bean) GetFromTid() *Tid {
  if !p.IsSetFromTid() {
    return TimSock5Bean_FromTid_DEFAULT
  }
return p.FromTid
}
var TimSock5Bean_ToTid_DEFAULT *Tid
func (p *TimSock5Bean) GetToTid() *Tid {
  if !p.IsSetToTid() {
    return TimSock5Bean_ToTid_DEFAULT
  }
return p.ToTid
}

func (p *TimSock5Bean) GetAddr() string {
  return p.Addr
}

func (p *TimSock5Bean) GetPort() int32 {
  return p.Port
}

func (p *TimSock5Bean) GetTransport() int16 {
  return p.Transport
}

func (p *TimSock5Bean) GetPubId() string {
  return p.PubId
}
var TimSock5Bean_ExtraMap_DEFAULT map[string]string

func (p *TimSock5Bean) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimSock5Bean) IsSetFromTid() bool {
  return p.FromTid != nil
}

func (p *TimSock5Bean) IsSetToTid() bool {
  return p.ToTid != nil
}

func (p *TimSock5Bean) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimSock5Bean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFromTid bool = false;
  var issetToTid bool = false;
  var issetAddr bool = false;
  var issetPort bool = false;
  var issetTransport bool = false;
  var issetPubId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetFromTid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetToTid = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetAddr = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetPort = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTransport = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetPubId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFromTid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FromTid is not set"));
  }
  if !issetToTid{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ToTid is not set"));
  }
  if !issetAddr{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Addr is not set"));
  }
  if !issetPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"));
  }
  if !issetTransport{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Transport is not set"));
  }
  if !issetPubId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PubId is not set"));
  }
  return nil
}

func (p *TimSock5Bean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromTid = &Tid{}
  if err := p.FromTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
  }
  return nil
}

func (p *TimSock5Bean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ToTid = &Tid{}
  if err := p.ToTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
  }
  return nil
}

func (p *TimSock5Bean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Addr = v
}
  return nil
}

func (p *TimSock5Bean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *TimSock5Bean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Transport = v
}
  return nil
}

func (p *TimSock5Bean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PubId = v
}
  return nil
}

func (p *TimSock5Bean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key65 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key65 = v
}
var _val66 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val66 = v
}
    p.ExtraMap[_key65] = _val66
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimSock5Bean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimSock5Bean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimSock5Bean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromTid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromTid: ", p), err) }
  if err := p.FromTid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromTid: ", p), err) }
  return err
}

func (p *TimSock5Bean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "toTid", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toTid: ", p), err) }
  if err := p.ToTid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toTid: ", p), err) }
  return err
}

func (p *TimSock5Bean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:addr: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Addr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:addr: ", p), err) }
  return err
}

func (p *TimSock5Bean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err) }
  return err
}

func (p *TimSock5Bean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transport", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transport: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Transport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transport (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transport: ", p), err) }
  return err
}

func (p *TimSock5Bean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pubId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pubId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PubId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pubId: ", p), err) }
  return err
}

func (p *TimSock5Bean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extraMap: ", p), err) }
  }
  return err
}

func (p *TimSock5Bean) Equals(other *TimSock5Bean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.FromTid.Equals(other.FromTid) { return false }
  if !p.ToTid.Equals(other.ToTid) { return false }
  if p.Addr != other.Addr { return false }
  if p.Port != other.Port { return false }
  if p.Transport != other.Transport { return false }
  if p.PubId != other.PubId { return false }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src67 := other.ExtraMap[k]
    if _tgt != _src67 { return false }
  }
  return true
}

func (p *TimSock5Bean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimSock5Bean(%+v)", *p)
}

// Attributes:
//  - PubId: 发布id
//  - Index: 序号数据块
//  - Bytes: 数据块
//  - ExtraMap
type TimSock5Bytes struct {
  PubId string `thrift:"pubId,1,required" db:"pubId" json:"pubId"`
  Index int32 `thrift:"index,2,required" db:"index" json:"index"`
  Bytes [][]byte `thrift:"bytes,3,required" db:"bytes" json:"bytes"`
  ExtraMap map[string]string `thrift:"extraMap,4" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimSock5Bytes() *TimSock5Bytes {
  return &TimSock5Bytes{}
}


func (p *TimSock5Bytes) GetPubId() string {
  return p.PubId
}

func (p *TimSock5Bytes) GetIndex() int32 {
  return p.Index
}

func (p *TimSock5Bytes) GetBytes() [][]byte {
  return p.Bytes
}
var TimSock5Bytes_ExtraMap_DEFAULT map[string]string

func (p *TimSock5Bytes) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimSock5Bytes) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimSock5Bytes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPubId bool = false;
  var issetIndex bool = false;
  var issetBytes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPubId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetIndex = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetBytes = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPubId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PubId is not set"));
  }
  if !issetIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Index is not set"));
  }
  if !issetBytes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bytes is not set"));
  }
  return nil
}

func (p *TimSock5Bytes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PubId = v
}
  return nil
}

func (p *TimSock5Bytes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *TimSock5Bytes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Bytes =  tSlice
  for i := 0; i < size; i ++ {
var _elem68 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem68 = v
}
    p.Bytes = append(p.Bytes, _elem68)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimSock5Bytes)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key69 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key69 = v
}
var _val70 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val70 = v
}
    p.ExtraMap[_key69] = _val70
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimSock5Bytes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimSock5Bytes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimSock5Bytes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pubId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PubId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubId: ", p), err) }
  return err
}

func (p *TimSock5Bytes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *TimSock5Bytes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bytes", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bytes: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Bytes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Bytes {
    if err := oprot.WriteBinary(ctx, v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bytes: ", p), err) }
  return err
}

func (p *TimSock5Bytes) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err) }
  }
  return err
}

func (p *TimSock5Bytes) Equals(other *TimSock5Bytes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PubId != other.PubId { return false }
  if p.Index != other.Index { return false }
  if len(p.Bytes) != len(other.Bytes) { return false }
  for i, _tgt := range p.Bytes {
    _src71 := other.Bytes[i]
    if bytes.Compare(_tgt, _src71) != 0 { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src72 := other.ExtraMap[k]
    if _tgt != _src72 { return false }
  }
  return true
}

func (p *TimSock5Bytes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimSock5Bytes(%+v)", *p)
}

// Attributes:
//  - FromTimeStamp: 时间上
//  - ToTimeStamp: 时间下
//  - LimitCount: 条数
//  - ExtraMap
type TimPage struct {
  FromTimeStamp *string `thrift:"fromTimeStamp,1" db:"fromTimeStamp" json:"fromTimeStamp,omitempty"`
  ToTimeStamp *string `thrift:"toTimeStamp,2" db:"toTimeStamp" json:"toTimeStamp,omitempty"`
  LimitCount *int32 `thrift:"limitCount,3" db:"limitCount" json:"limitCount,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,4" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimPage() *TimPage {
  return &TimPage{}
}

var TimPage_FromTimeStamp_DEFAULT string
func (p *TimPage) GetFromTimeStamp() string {
  if !p.IsSetFromTimeStamp() {
    return TimPage_FromTimeStamp_DEFAULT
  }
return *p.FromTimeStamp
}
var TimPage_ToTimeStamp_DEFAULT string
func (p *TimPage) GetToTimeStamp() string {
  if !p.IsSetToTimeStamp() {
    return TimPage_ToTimeStamp_DEFAULT
  }
return *p.ToTimeStamp
}
var TimPage_LimitCount_DEFAULT int32
func (p *TimPage) GetLimitCount() int32 {
  if !p.IsSetLimitCount() {
    return TimPage_LimitCount_DEFAULT
  }
return *p.LimitCount
}
var TimPage_ExtraMap_DEFAULT map[string]string

func (p *TimPage) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimPage) IsSetFromTimeStamp() bool {
  return p.FromTimeStamp != nil
}

func (p *TimPage) IsSetToTimeStamp() bool {
  return p.ToTimeStamp != nil
}

func (p *TimPage) IsSetLimitCount() bool {
  return p.LimitCount != nil
}

func (p *TimPage) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimPage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimPage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromTimeStamp = &v
}
  return nil
}

func (p *TimPage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ToTimeStamp = &v
}
  return nil
}

func (p *TimPage)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LimitCount = &v
}
  return nil
}

func (p *TimPage)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key73 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key73 = v
}
var _val74 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val74 = v
}
    p.ExtraMap[_key73] = _val74
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimPage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimPage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimPage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromTimeStamp() {
    if err := oprot.WriteFieldBegin(ctx, "fromTimeStamp", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromTimeStamp: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.FromTimeStamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fromTimeStamp (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromTimeStamp: ", p), err) }
  }
  return err
}

func (p *TimPage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToTimeStamp() {
    if err := oprot.WriteFieldBegin(ctx, "toTimeStamp", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:toTimeStamp: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ToTimeStamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.toTimeStamp (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:toTimeStamp: ", p), err) }
  }
  return err
}

func (p *TimPage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLimitCount() {
    if err := oprot.WriteFieldBegin(ctx, "limitCount", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limitCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.LimitCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limitCount (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limitCount: ", p), err) }
  }
  return err
}

func (p *TimPage) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err) }
  }
  return err
}

func (p *TimPage) Equals(other *TimPage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FromTimeStamp != other.FromTimeStamp {
    if p.FromTimeStamp == nil || other.FromTimeStamp == nil {
      return false
    }
    if (*p.FromTimeStamp) != (*other.FromTimeStamp) { return false }
  }
  if p.ToTimeStamp != other.ToTimeStamp {
    if p.ToTimeStamp == nil || other.ToTimeStamp == nil {
      return false
    }
    if (*p.ToTimeStamp) != (*other.ToTimeStamp) { return false }
  }
  if p.LimitCount != other.LimitCount {
    if p.LimitCount == nil || other.LimitCount == nil {
      return false
    }
    if (*p.LimitCount) != (*other.LimitCount) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src75 := other.ExtraMap[k]
    if _tgt != _src75 { return false }
  }
  return true
}

func (p *TimPage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimPage(%+v)", *p)
}

// Attributes:
//  - Tidlist: tid集合
//  - TimPage: 分页
//  - Midlist: mid集合
//  - ExtraMap
type TimMessageIq struct {
  Tidlist []string `thrift:"tidlist,1" db:"tidlist" json:"tidlist,omitempty"`
  TimPage *TimPage `thrift:"timPage,2" db:"timPage" json:"timPage,omitempty"`
  Midlist []string `thrift:"midlist,3" db:"midlist" json:"midlist,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,4" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimMessageIq() *TimMessageIq {
  return &TimMessageIq{}
}

var TimMessageIq_Tidlist_DEFAULT []string

func (p *TimMessageIq) GetTidlist() []string {
  return p.Tidlist
}
var TimMessageIq_TimPage_DEFAULT *TimPage
func (p *TimMessageIq) GetTimPage() *TimPage {
  if !p.IsSetTimPage() {
    return TimMessageIq_TimPage_DEFAULT
  }
return p.TimPage
}
var TimMessageIq_Midlist_DEFAULT []string

func (p *TimMessageIq) GetMidlist() []string {
  return p.Midlist
}
var TimMessageIq_ExtraMap_DEFAULT map[string]string

func (p *TimMessageIq) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimMessageIq) IsSetTidlist() bool {
  return p.Tidlist != nil
}

func (p *TimMessageIq) IsSetTimPage() bool {
  return p.TimPage != nil
}

func (p *TimMessageIq) IsSetMidlist() bool {
  return p.Midlist != nil
}

func (p *TimMessageIq) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimMessageIq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimMessageIq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Tidlist =  tSlice
  for i := 0; i < size; i ++ {
var _elem76 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem76 = v
}
    p.Tidlist = append(p.Tidlist, _elem76)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimMessageIq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.TimPage = &TimPage{}
  if err := p.TimPage.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimPage), err)
  }
  return nil
}

func (p *TimMessageIq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Midlist =  tSlice
  for i := 0; i < size; i ++ {
var _elem77 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem77 = v
}
    p.Midlist = append(p.Midlist, _elem77)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimMessageIq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key78 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key78 = v
}
var _val79 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val79 = v
}
    p.ExtraMap[_key78] = _val79
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimMessageIq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimMessageIq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimMessageIq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTidlist() {
    if err := oprot.WriteFieldBegin(ctx, "tidlist", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tidlist: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Tidlist)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Tidlist {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tidlist: ", p), err) }
  }
  return err
}

func (p *TimMessageIq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimPage() {
    if err := oprot.WriteFieldBegin(ctx, "timPage", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timPage: ", p), err) }
    if err := p.TimPage.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimPage), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timPage: ", p), err) }
  }
  return err
}

func (p *TimMessageIq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMidlist() {
    if err := oprot.WriteFieldBegin(ctx, "midlist", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:midlist: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Midlist)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Midlist {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:midlist: ", p), err) }
  }
  return err
}

func (p *TimMessageIq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err) }
  }
  return err
}

func (p *TimMessageIq) Equals(other *TimMessageIq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Tidlist) != len(other.Tidlist) { return false }
  for i, _tgt := range p.Tidlist {
    _src80 := other.Tidlist[i]
    if _tgt != _src80 { return false }
  }
  if !p.TimPage.Equals(other.TimPage) { return false }
  if len(p.Midlist) != len(other.Midlist) { return false }
  for i, _tgt := range p.Midlist {
    _src81 := other.Midlist[i]
    if _tgt != _src81 { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src82 := other.ExtraMap[k]
    if _tgt != _src82 { return false }
  }
  return true
}

func (p *TimMessageIq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimMessageIq(%+v)", *p)
}

// Attributes:
//  - Domain: 域名
//  - Username: 用户名
//  - Pwd: 密码
type TimAuth struct {
  Domain *string `thrift:"domain,1" db:"domain" json:"domain,omitempty"`
  Username *string `thrift:"username,2" db:"username" json:"username,omitempty"`
  Pwd *string `thrift:"pwd,3" db:"pwd" json:"pwd,omitempty"`
}

func NewTimAuth() *TimAuth {
  return &TimAuth{}
}

var TimAuth_Domain_DEFAULT string
func (p *TimAuth) GetDomain() string {
  if !p.IsSetDomain() {
    return TimAuth_Domain_DEFAULT
  }
return *p.Domain
}
var TimAuth_Username_DEFAULT string
func (p *TimAuth) GetUsername() string {
  if !p.IsSetUsername() {
    return TimAuth_Username_DEFAULT
  }
return *p.Username
}
var TimAuth_Pwd_DEFAULT string
func (p *TimAuth) GetPwd() string {
  if !p.IsSetPwd() {
    return TimAuth_Pwd_DEFAULT
  }
return *p.Pwd
}
func (p *TimAuth) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *TimAuth) IsSetUsername() bool {
  return p.Username != nil
}

func (p *TimAuth) IsSetPwd() bool {
  return p.Pwd != nil
}

func (p *TimAuth) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimAuth)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *TimAuth)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = &v
}
  return nil
}

func (p *TimAuth)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Pwd = &v
}
  return nil
}

func (p *TimAuth) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimAuth"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimAuth) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain: ", p), err) }
  }
  return err
}

func (p *TimAuth) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUsername() {
    if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Username)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  }
  return err
}

func (p *TimAuth) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPwd() {
    if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pwd: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Pwd)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pwd (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pwd: ", p), err) }
  }
  return err
}

func (p *TimAuth) Equals(other *TimAuth) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Domain != other.Domain {
    if p.Domain == nil || other.Domain == nil {
      return false
    }
    if (*p.Domain) != (*other.Domain) { return false }
  }
  if p.Username != other.Username {
    if p.Username == nil || other.Username == nil {
      return false
    }
    if (*p.Username) != (*other.Username) { return false }
  }
  if p.Pwd != other.Pwd {
    if p.Pwd == nil || other.Pwd == nil {
      return false
    }
    if (*p.Pwd) != (*other.Pwd) { return false }
  }
  return true
}

func (p *TimAuth) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimAuth(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - TimMBeanList: 信息列表
//  - ReqType: 类型
//  - ExtraMap
type TimMBeanList struct {
  ThreadId string `thrift:"threadId,1,required" db:"threadId" json:"threadId"`
  TimMBeanList []*TimMBean `thrift:"timMBeanList,2" db:"timMBeanList" json:"timMBeanList,omitempty"`
  ReqType *string `thrift:"reqType,3" db:"reqType" json:"reqType,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,4" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimMBeanList() *TimMBeanList {
  return &TimMBeanList{}
}


func (p *TimMBeanList) GetThreadId() string {
  return p.ThreadId
}
var TimMBeanList_TimMBeanList_DEFAULT []*TimMBean

func (p *TimMBeanList) GetTimMBeanList() []*TimMBean {
  return p.TimMBeanList
}
var TimMBeanList_ReqType_DEFAULT string
func (p *TimMBeanList) GetReqType() string {
  if !p.IsSetReqType() {
    return TimMBeanList_ReqType_DEFAULT
  }
return *p.ReqType
}
var TimMBeanList_ExtraMap_DEFAULT map[string]string

func (p *TimMBeanList) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimMBeanList) IsSetTimMBeanList() bool {
  return p.TimMBeanList != nil
}

func (p *TimMBeanList) IsSetReqType() bool {
  return p.ReqType != nil
}

func (p *TimMBeanList) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimMBeanList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetThreadId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetThreadId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetThreadId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"));
  }
  return nil
}

func (p *TimMBeanList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *TimMBeanList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimMBean, 0, size)
  p.TimMBeanList =  tSlice
  for i := 0; i < size; i ++ {
    _elem83 := &TimMBean{}
    if err := _elem83.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem83), err)
    }
    p.TimMBeanList = append(p.TimMBeanList, _elem83)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimMBeanList)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReqType = &v
}
  return nil
}

func (p *TimMBeanList)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key84 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key84 = v
}
var _val85 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val85 = v
}
    p.ExtraMap[_key84] = _val85
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimMBeanList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimMBeanList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimMBeanList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  return err
}

func (p *TimMBeanList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimMBeanList() {
    if err := oprot.WriteFieldBegin(ctx, "timMBeanList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timMBeanList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TimMBeanList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TimMBeanList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timMBeanList: ", p), err) }
  }
  return err
}

func (p *TimMBeanList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReqType() {
    if err := oprot.WriteFieldBegin(ctx, "reqType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reqType: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ReqType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reqType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reqType: ", p), err) }
  }
  return err
}

func (p *TimMBeanList) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err) }
  }
  return err
}

func (p *TimMBeanList) Equals(other *TimMBeanList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadId != other.ThreadId { return false }
  if len(p.TimMBeanList) != len(other.TimMBeanList) { return false }
  for i, _tgt := range p.TimMBeanList {
    _src86 := other.TimMBeanList[i]
    if !_tgt.Equals(_src86) { return false }
  }
  if p.ReqType != other.ReqType {
    if p.ReqType == nil || other.ReqType == nil {
      return false
    }
    if (*p.ReqType) != (*other.ReqType) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src87 := other.ExtraMap[k]
    if _tgt != _src87 { return false }
  }
  return true
}

func (p *TimMBeanList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimMBeanList(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - TimPBeanList: 状态信息列表
//  - ReqType: 类型
//  - ExtraMap
type TimPBeanList struct {
  ThreadId string `thrift:"threadId,1,required" db:"threadId" json:"threadId"`
  TimPBeanList []*TimPBean `thrift:"timPBeanList,2" db:"timPBeanList" json:"timPBeanList,omitempty"`
  ReqType *string `thrift:"reqType,3" db:"reqType" json:"reqType,omitempty"`
  ExtraMap map[string]string `thrift:"extraMap,4" db:"extraMap" json:"extraMap,omitempty"`
}

func NewTimPBeanList() *TimPBeanList {
  return &TimPBeanList{}
}


func (p *TimPBeanList) GetThreadId() string {
  return p.ThreadId
}
var TimPBeanList_TimPBeanList_DEFAULT []*TimPBean

func (p *TimPBeanList) GetTimPBeanList() []*TimPBean {
  return p.TimPBeanList
}
var TimPBeanList_ReqType_DEFAULT string
func (p *TimPBeanList) GetReqType() string {
  if !p.IsSetReqType() {
    return TimPBeanList_ReqType_DEFAULT
  }
return *p.ReqType
}
var TimPBeanList_ExtraMap_DEFAULT map[string]string

func (p *TimPBeanList) GetExtraMap() map[string]string {
  return p.ExtraMap
}
func (p *TimPBeanList) IsSetTimPBeanList() bool {
  return p.TimPBeanList != nil
}

func (p *TimPBeanList) IsSetReqType() bool {
  return p.ReqType != nil
}

func (p *TimPBeanList) IsSetExtraMap() bool {
  return p.ExtraMap != nil
}

func (p *TimPBeanList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetThreadId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetThreadId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetThreadId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThreadId is not set"));
  }
  return nil
}

func (p *TimPBeanList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *TimPBeanList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TimPBean, 0, size)
  p.TimPBeanList =  tSlice
  for i := 0; i < size; i ++ {
    _elem88 := &TimPBean{}
    if err := _elem88.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem88), err)
    }
    p.TimPBeanList = append(p.TimPBeanList, _elem88)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TimPBeanList)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReqType = &v
}
  return nil
}

func (p *TimPBeanList)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ExtraMap =  tMap
  for i := 0; i < size; i ++ {
var _key89 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key89 = v
}
var _val90 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val90 = v
}
    p.ExtraMap[_key89] = _val90
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimPBeanList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimPBeanList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimPBeanList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  return err
}

func (p *TimPBeanList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimPBeanList() {
    if err := oprot.WriteFieldBegin(ctx, "timPBeanList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timPBeanList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TimPBeanList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TimPBeanList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timPBeanList: ", p), err) }
  }
  return err
}

func (p *TimPBeanList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReqType() {
    if err := oprot.WriteFieldBegin(ctx, "reqType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reqType: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ReqType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.reqType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reqType: ", p), err) }
  }
  return err
}

func (p *TimPBeanList) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtraMap() {
    if err := oprot.WriteFieldBegin(ctx, "extraMap", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extraMap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ExtraMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.ExtraMap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extraMap: ", p), err) }
  }
  return err
}

func (p *TimPBeanList) Equals(other *TimPBeanList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadId != other.ThreadId { return false }
  if len(p.TimPBeanList) != len(other.TimPBeanList) { return false }
  for i, _tgt := range p.TimPBeanList {
    _src91 := other.TimPBeanList[i]
    if !_tgt.Equals(_src91) { return false }
  }
  if p.ReqType != other.ReqType {
    if p.ReqType == nil || other.ReqType == nil {
      return false
    }
    if (*p.ReqType) != (*other.ReqType) { return false }
  }
  if len(p.ExtraMap) != len(other.ExtraMap) { return false }
  for k, _tgt := range p.ExtraMap {
    _src92 := other.ExtraMap[k]
    if _tgt != _src92 { return false }
  }
  return true
}

func (p *TimPBeanList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimPBeanList(%+v)", *p)
}

// Attributes:
//  - ThreadId
//  - Interflow: 消息合流
//  - TLS: tls
type TimPropertyBean struct {
  ThreadId *string `thrift:"threadId,1" db:"threadId" json:"threadId,omitempty"`
  Interflow *string `thrift:"interflow,2" db:"interflow" json:"interflow,omitempty"`
  TLS *string `thrift:"tls,3" db:"tls" json:"tls,omitempty"`
}

func NewTimPropertyBean() *TimPropertyBean {
  return &TimPropertyBean{}
}

var TimPropertyBean_ThreadId_DEFAULT string
func (p *TimPropertyBean) GetThreadId() string {
  if !p.IsSetThreadId() {
    return TimPropertyBean_ThreadId_DEFAULT
  }
return *p.ThreadId
}
var TimPropertyBean_Interflow_DEFAULT string
func (p *TimPropertyBean) GetInterflow() string {
  if !p.IsSetInterflow() {
    return TimPropertyBean_Interflow_DEFAULT
  }
return *p.Interflow
}
var TimPropertyBean_TLS_DEFAULT string
func (p *TimPropertyBean) GetTLS() string {
  if !p.IsSetTLS() {
    return TimPropertyBean_TLS_DEFAULT
  }
return *p.TLS
}
func (p *TimPropertyBean) IsSetThreadId() bool {
  return p.ThreadId != nil
}

func (p *TimPropertyBean) IsSetInterflow() bool {
  return p.Interflow != nil
}

func (p *TimPropertyBean) IsSetTLS() bool {
  return p.TLS != nil
}

func (p *TimPropertyBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TimPropertyBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = &v
}
  return nil
}

func (p *TimPropertyBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Interflow = &v
}
  return nil
}

func (p *TimPropertyBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TLS = &v
}
  return nil
}

func (p *TimPropertyBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimPropertyBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimPropertyBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadId() {
    if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ThreadId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  }
  return err
}

func (p *TimPropertyBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInterflow() {
    if err := oprot.WriteFieldBegin(ctx, "interflow", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:interflow: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Interflow)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.interflow (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:interflow: ", p), err) }
  }
  return err
}

func (p *TimPropertyBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTLS() {
    if err := oprot.WriteFieldBegin(ctx, "tls", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tls: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TLS)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tls (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tls: ", p), err) }
  }
  return err
}

func (p *TimPropertyBean) Equals(other *TimPropertyBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadId != other.ThreadId {
    if p.ThreadId == nil || other.ThreadId == nil {
      return false
    }
    if (*p.ThreadId) != (*other.ThreadId) { return false }
  }
  if p.Interflow != other.Interflow {
    if p.Interflow == nil || other.Interflow == nil {
      return false
    }
    if (*p.Interflow) != (*other.Interflow) { return false }
  }
  if p.TLS != other.TLS {
    if p.TLS == nil || other.TLS == nil {
      return false
    }
    if (*p.TLS) != (*other.TLS) { return false }
  }
  return true
}

func (p *TimPropertyBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimPropertyBean(%+v)", *p)
}

type ITim interface {
  // 流程开始
  // 
  // Parameters:
  //  - Param
  TimStream(ctx context.Context, param *TimParam) (_err error)
  // tls协议
  TimStarttls(ctx context.Context) (_err error)
  // 登陆协议
  // 
  // Parameters:
  //  - Tid
  //  - Pwd
  TimLogin(ctx context.Context, tid *Tid, pwd string) (_err error)
  // 回执信息
  // 
  // Parameters:
  //  - Ab
  TimAck(ctx context.Context, ab *TimAckBean) (_err error)
  // 广播出席协议或接收广播协议
  // 
  // Parameters:
  //  - Pbean
  TimPresence(ctx context.Context, pbean *TimPBean) (_err error)
  // 发送信息或接收信息
  // 
  // Parameters:
  //  - Mbean
  TimMessage(ctx context.Context, mbean *TimMBean) (_err error)
  // ping 心跳协议
  // 
  // Parameters:
  //  - ThreadId
  TimPing(ctx context.Context, threadId string) (_err error)
  // 错误通知
  // 
  // Parameters:
  //  - E
  TimError(ctx context.Context, e *TimError) (_err error)
  // 登出协议
  TimLogout(ctx context.Context) (_err error)
  // 注册协议
  // 
  // Parameters:
  //  - Tid
  //  - Auth
  TimRegist(ctx context.Context, tid *Tid, auth string) (_err error)
  // 花名册
  // 
  // Parameters:
  //  - Roster
  TimRoser(ctx context.Context, roster *TimRoster) (_err error)
  // 发送信息或接收信息列表（合流）
  // 
  // Parameters:
  //  - MbeanList
  TimMessageList(ctx context.Context, mbeanList *TimMBeanList) (_err error)
  // 发送状态信息列表（合流）
  // 
  // Parameters:
  //  - PbeanList
  TimPresenceList(ctx context.Context, pbeanList *TimPBeanList) (_err error)
  // 信息请求 get请求数据 del删除
  // 
  // Parameters:
  //  - TimMsgIq
  //  - IqType
  TimMessageIq(ctx context.Context, timMsgIq *TimMessageIq, iqType string) (_err error)
  // 信息请求
  // 
  // Parameters:
  //  - Mbean
  TimMessageResult_(ctx context.Context, mbean *TimMBean) (_err error)
  // 用户协议属性请求
  // 
  // Parameters:
  //  - Tpb
  TimProperty(ctx context.Context, tpb *TimPropertyBean) (_err error)
  // 请求远程验证信息
  // 
  // Parameters:
  //  - Tid
  //  - Pwd
  //  - Auth
  TimRemoteUserAuth(ctx context.Context, tid *Tid, pwd string, auth *TimAuth) (_r *TimRemoteUserBean, _err error)
  // 请求远程用户信息
  // 
  // Parameters:
  //  - Tid
  //  - Auth
  TimRemoteUserGet(ctx context.Context, tid *Tid, auth *TimAuth) (_r *TimRemoteUserBean, _err error)
  // 编辑远程用户信息
  // 
  // Parameters:
  //  - Tid
  //  - Ub
  //  - Auth
  TimRemoteUserEdit(ctx context.Context, tid *Tid, ub *TimUserBean, auth *TimAuth) (_r *TimRemoteUserBean, _err error)
  // 广播出席协议或接收广播协议
  // 
  // Parameters:
  //  - Pbean
  //  - Auth
  TimResponsePresence(ctx context.Context, pbean *TimPBean, auth *TimAuth) (_r *TimResponseBean, _err error)
  // 发送信息或接收信息
  // 
  // Parameters:
  //  - Mbean
  //  - Auth
  TimResponseMessage(ctx context.Context, mbean *TimMBean, auth *TimAuth) (_r *TimResponseBean, _err error)
  // 信息请求 get请求数据 del删除（辅助接口）
  // 
  // Parameters:
  //  - TimMsgIq
  //  - IqType
  //  - Auth
  TimResponseMessageIq(ctx context.Context, timMsgIq *TimMessageIq, iqType string, auth *TimAuth) (_r *TimMBeanList, _err error)
  // 广播出席协议或接收广播协议
  // 
  // Parameters:
  //  - PbeanList
  //  - Auth
  TimResponsePresenceList(ctx context.Context, pbeanList *TimPBeanList, auth *TimAuth) (_r *TimResponseBean, _err error)
  // 发送信息或接收信息
  // 
  // Parameters:
  //  - MbeanList
  //  - Auth
  TimResponseMessageList(ctx context.Context, mbeanList *TimMBeanList, auth *TimAuth) (_r *TimResponseBean, _err error)
}

type ITimClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewITimClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ITimClient {
  return &ITimClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewITimClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ITimClient {
  return &ITimClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewITimClient(c thrift.TClient) *ITimClient {
  return &ITimClient{
    c: c,
  }
}

func (p *ITimClient) Client_() thrift.TClient {
  return p.c
}

func (p *ITimClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ITimClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// 流程开始
// 
// Parameters:
//  - Param
func (p *ITimClient) TimStream(ctx context.Context, param *TimParam) (_err error) {
  var _args93 ITimTimStreamArgs
  _args93.Param = param
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timStream", &_args93, nil); err != nil {
    return err
  }
  return nil
}

// tls协议
func (p *ITimClient) TimStarttls(ctx context.Context) (_err error) {
  var _args94 ITimTimStarttlsArgs
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timStarttls", &_args94, nil); err != nil {
    return err
  }
  return nil
}

// 登陆协议
// 
// Parameters:
//  - Tid
//  - Pwd
func (p *ITimClient) TimLogin(ctx context.Context, tid *Tid, pwd string) (_err error) {
  var _args95 ITimTimLoginArgs
  _args95.Tid = tid
  _args95.Pwd = pwd
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timLogin", &_args95, nil); err != nil {
    return err
  }
  return nil
}

// 回执信息
// 
// Parameters:
//  - Ab
func (p *ITimClient) TimAck(ctx context.Context, ab *TimAckBean) (_err error) {
  var _args96 ITimTimAckArgs
  _args96.Ab = ab
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timAck", &_args96, nil); err != nil {
    return err
  }
  return nil
}

// 广播出席协议或接收广播协议
// 
// Parameters:
//  - Pbean
func (p *ITimClient) TimPresence(ctx context.Context, pbean *TimPBean) (_err error) {
  var _args97 ITimTimPresenceArgs
  _args97.Pbean = pbean
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timPresence", &_args97, nil); err != nil {
    return err
  }
  return nil
}

// 发送信息或接收信息
// 
// Parameters:
//  - Mbean
func (p *ITimClient) TimMessage(ctx context.Context, mbean *TimMBean) (_err error) {
  var _args98 ITimTimMessageArgs
  _args98.Mbean = mbean
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timMessage", &_args98, nil); err != nil {
    return err
  }
  return nil
}

// ping 心跳协议
// 
// Parameters:
//  - ThreadId
func (p *ITimClient) TimPing(ctx context.Context, threadId string) (_err error) {
  var _args99 ITimTimPingArgs
  _args99.ThreadId = threadId
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timPing", &_args99, nil); err != nil {
    return err
  }
  return nil
}

// 错误通知
// 
// Parameters:
//  - E
func (p *ITimClient) TimError(ctx context.Context, e *TimError) (_err error) {
  var _args100 ITimTimErrorArgs
  _args100.E = e
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timError", &_args100, nil); err != nil {
    return err
  }
  return nil
}

// 登出协议
func (p *ITimClient) TimLogout(ctx context.Context) (_err error) {
  var _args101 ITimTimLogoutArgs
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timLogout", &_args101, nil); err != nil {
    return err
  }
  return nil
}

// 注册协议
// 
// Parameters:
//  - Tid
//  - Auth
func (p *ITimClient) TimRegist(ctx context.Context, tid *Tid, auth string) (_err error) {
  var _args102 ITimTimRegistArgs
  _args102.Tid = tid
  _args102.Auth = auth
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timRegist", &_args102, nil); err != nil {
    return err
  }
  return nil
}

// 花名册
// 
// Parameters:
//  - Roster
func (p *ITimClient) TimRoser(ctx context.Context, roster *TimRoster) (_err error) {
  var _args103 ITimTimRoserArgs
  _args103.Roster = roster
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timRoser", &_args103, nil); err != nil {
    return err
  }
  return nil
}

// 发送信息或接收信息列表（合流）
// 
// Parameters:
//  - MbeanList
func (p *ITimClient) TimMessageList(ctx context.Context, mbeanList *TimMBeanList) (_err error) {
  var _args104 ITimTimMessageListArgs
  _args104.MbeanList = mbeanList
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timMessageList", &_args104, nil); err != nil {
    return err
  }
  return nil
}

// 发送状态信息列表（合流）
// 
// Parameters:
//  - PbeanList
func (p *ITimClient) TimPresenceList(ctx context.Context, pbeanList *TimPBeanList) (_err error) {
  var _args105 ITimTimPresenceListArgs
  _args105.PbeanList = pbeanList
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timPresenceList", &_args105, nil); err != nil {
    return err
  }
  return nil
}

// 信息请求 get请求数据 del删除
// 
// Parameters:
//  - TimMsgIq
//  - IqType
func (p *ITimClient) TimMessageIq(ctx context.Context, timMsgIq *TimMessageIq, iqType string) (_err error) {
  var _args106 ITimTimMessageIqArgs
  _args106.TimMsgIq = timMsgIq
  _args106.IqType = iqType
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timMessageIq", &_args106, nil); err != nil {
    return err
  }
  return nil
}

// 信息请求
// 
// Parameters:
//  - Mbean
func (p *ITimClient) TimMessageResult_(ctx context.Context, mbean *TimMBean) (_err error) {
  var _args107 ITimTimMessageResultArgs
  _args107.Mbean = mbean
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timMessageResult", &_args107, nil); err != nil {
    return err
  }
  return nil
}

// 用户协议属性请求
// 
// Parameters:
//  - Tpb
func (p *ITimClient) TimProperty(ctx context.Context, tpb *TimPropertyBean) (_err error) {
  var _args108 ITimTimPropertyArgs
  _args108.Tpb = tpb
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "timProperty", &_args108, nil); err != nil {
    return err
  }
  return nil
}

// 请求远程验证信息
// 
// Parameters:
//  - Tid
//  - Pwd
//  - Auth
func (p *ITimClient) TimRemoteUserAuth(ctx context.Context, tid *Tid, pwd string, auth *TimAuth) (_r *TimRemoteUserBean, _err error) {
  var _args109 ITimTimRemoteUserAuthArgs
  _args109.Tid = tid
  _args109.Pwd = pwd
  _args109.Auth = auth
  var _result111 ITimTimRemoteUserAuthResult
  var _meta110 thrift.ResponseMeta
  _meta110, _err = p.Client_().Call(ctx, "timRemoteUserAuth", &_args109, &_result111)
  p.SetLastResponseMeta_(_meta110)
  if _err != nil {
    return
  }
  if _ret112 := _result111.GetSuccess(); _ret112 != nil {
    return _ret112, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timRemoteUserAuth failed: unknown result")
}

// 请求远程用户信息
// 
// Parameters:
//  - Tid
//  - Auth
func (p *ITimClient) TimRemoteUserGet(ctx context.Context, tid *Tid, auth *TimAuth) (_r *TimRemoteUserBean, _err error) {
  var _args113 ITimTimRemoteUserGetArgs
  _args113.Tid = tid
  _args113.Auth = auth
  var _result115 ITimTimRemoteUserGetResult
  var _meta114 thrift.ResponseMeta
  _meta114, _err = p.Client_().Call(ctx, "timRemoteUserGet", &_args113, &_result115)
  p.SetLastResponseMeta_(_meta114)
  if _err != nil {
    return
  }
  if _ret116 := _result115.GetSuccess(); _ret116 != nil {
    return _ret116, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timRemoteUserGet failed: unknown result")
}

// 编辑远程用户信息
// 
// Parameters:
//  - Tid
//  - Ub
//  - Auth
func (p *ITimClient) TimRemoteUserEdit(ctx context.Context, tid *Tid, ub *TimUserBean, auth *TimAuth) (_r *TimRemoteUserBean, _err error) {
  var _args117 ITimTimRemoteUserEditArgs
  _args117.Tid = tid
  _args117.Ub = ub
  _args117.Auth = auth
  var _result119 ITimTimRemoteUserEditResult
  var _meta118 thrift.ResponseMeta
  _meta118, _err = p.Client_().Call(ctx, "timRemoteUserEdit", &_args117, &_result119)
  p.SetLastResponseMeta_(_meta118)
  if _err != nil {
    return
  }
  if _ret120 := _result119.GetSuccess(); _ret120 != nil {
    return _ret120, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timRemoteUserEdit failed: unknown result")
}

// 广播出席协议或接收广播协议
// 
// Parameters:
//  - Pbean
//  - Auth
func (p *ITimClient) TimResponsePresence(ctx context.Context, pbean *TimPBean, auth *TimAuth) (_r *TimResponseBean, _err error) {
  var _args121 ITimTimResponsePresenceArgs
  _args121.Pbean = pbean
  _args121.Auth = auth
  var _result123 ITimTimResponsePresenceResult
  var _meta122 thrift.ResponseMeta
  _meta122, _err = p.Client_().Call(ctx, "timResponsePresence", &_args121, &_result123)
  p.SetLastResponseMeta_(_meta122)
  if _err != nil {
    return
  }
  if _ret124 := _result123.GetSuccess(); _ret124 != nil {
    return _ret124, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timResponsePresence failed: unknown result")
}

// 发送信息或接收信息
// 
// Parameters:
//  - Mbean
//  - Auth
func (p *ITimClient) TimResponseMessage(ctx context.Context, mbean *TimMBean, auth *TimAuth) (_r *TimResponseBean, _err error) {
  var _args125 ITimTimResponseMessageArgs
  _args125.Mbean = mbean
  _args125.Auth = auth
  var _result127 ITimTimResponseMessageResult
  var _meta126 thrift.ResponseMeta
  _meta126, _err = p.Client_().Call(ctx, "timResponseMessage", &_args125, &_result127)
  p.SetLastResponseMeta_(_meta126)
  if _err != nil {
    return
  }
  if _ret128 := _result127.GetSuccess(); _ret128 != nil {
    return _ret128, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timResponseMessage failed: unknown result")
}

// 信息请求 get请求数据 del删除（辅助接口）
// 
// Parameters:
//  - TimMsgIq
//  - IqType
//  - Auth
func (p *ITimClient) TimResponseMessageIq(ctx context.Context, timMsgIq *TimMessageIq, iqType string, auth *TimAuth) (_r *TimMBeanList, _err error) {
  var _args129 ITimTimResponseMessageIqArgs
  _args129.TimMsgIq = timMsgIq
  _args129.IqType = iqType
  _args129.Auth = auth
  var _result131 ITimTimResponseMessageIqResult
  var _meta130 thrift.ResponseMeta
  _meta130, _err = p.Client_().Call(ctx, "timResponseMessageIq", &_args129, &_result131)
  p.SetLastResponseMeta_(_meta130)
  if _err != nil {
    return
  }
  if _ret132 := _result131.GetSuccess(); _ret132 != nil {
    return _ret132, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timResponseMessageIq failed: unknown result")
}

// 广播出席协议或接收广播协议
// 
// Parameters:
//  - PbeanList
//  - Auth
func (p *ITimClient) TimResponsePresenceList(ctx context.Context, pbeanList *TimPBeanList, auth *TimAuth) (_r *TimResponseBean, _err error) {
  var _args133 ITimTimResponsePresenceListArgs
  _args133.PbeanList = pbeanList
  _args133.Auth = auth
  var _result135 ITimTimResponsePresenceListResult
  var _meta134 thrift.ResponseMeta
  _meta134, _err = p.Client_().Call(ctx, "timResponsePresenceList", &_args133, &_result135)
  p.SetLastResponseMeta_(_meta134)
  if _err != nil {
    return
  }
  if _ret136 := _result135.GetSuccess(); _ret136 != nil {
    return _ret136, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timResponsePresenceList failed: unknown result")
}

// 发送信息或接收信息
// 
// Parameters:
//  - MbeanList
//  - Auth
func (p *ITimClient) TimResponseMessageList(ctx context.Context, mbeanList *TimMBeanList, auth *TimAuth) (_r *TimResponseBean, _err error) {
  var _args137 ITimTimResponseMessageListArgs
  _args137.MbeanList = mbeanList
  _args137.Auth = auth
  var _result139 ITimTimResponseMessageListResult
  var _meta138 thrift.ResponseMeta
  _meta138, _err = p.Client_().Call(ctx, "timResponseMessageList", &_args137, &_result139)
  p.SetLastResponseMeta_(_meta138)
  if _err != nil {
    return
  }
  if _ret140 := _result139.GetSuccess(); _ret140 != nil {
    return _ret140, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "timResponseMessageList failed: unknown result")
}

type ITimProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ITim
}

func (p *ITimProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ITimProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ITimProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewITimProcessor(handler ITim) *ITimProcessor {

  self141 := &ITimProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self141.processorMap["timStream"] = &iTimProcessorTimStream{handler:handler}
  self141.processorMap["timStarttls"] = &iTimProcessorTimStarttls{handler:handler}
  self141.processorMap["timLogin"] = &iTimProcessorTimLogin{handler:handler}
  self141.processorMap["timAck"] = &iTimProcessorTimAck{handler:handler}
  self141.processorMap["timPresence"] = &iTimProcessorTimPresence{handler:handler}
  self141.processorMap["timMessage"] = &iTimProcessorTimMessage{handler:handler}
  self141.processorMap["timPing"] = &iTimProcessorTimPing{handler:handler}
  self141.processorMap["timError"] = &iTimProcessorTimError{handler:handler}
  self141.processorMap["timLogout"] = &iTimProcessorTimLogout{handler:handler}
  self141.processorMap["timRegist"] = &iTimProcessorTimRegist{handler:handler}
  self141.processorMap["timRoser"] = &iTimProcessorTimRoser{handler:handler}
  self141.processorMap["timMessageList"] = &iTimProcessorTimMessageList{handler:handler}
  self141.processorMap["timPresenceList"] = &iTimProcessorTimPresenceList{handler:handler}
  self141.processorMap["timMessageIq"] = &iTimProcessorTimMessageIq{handler:handler}
  self141.processorMap["timMessageResult"] = &iTimProcessorTimMessageResult_{handler:handler}
  self141.processorMap["timProperty"] = &iTimProcessorTimProperty{handler:handler}
  self141.processorMap["timRemoteUserAuth"] = &iTimProcessorTimRemoteUserAuth{handler:handler}
  self141.processorMap["timRemoteUserGet"] = &iTimProcessorTimRemoteUserGet{handler:handler}
  self141.processorMap["timRemoteUserEdit"] = &iTimProcessorTimRemoteUserEdit{handler:handler}
  self141.processorMap["timResponsePresence"] = &iTimProcessorTimResponsePresence{handler:handler}
  self141.processorMap["timResponseMessage"] = &iTimProcessorTimResponseMessage{handler:handler}
  self141.processorMap["timResponseMessageIq"] = &iTimProcessorTimResponseMessageIq{handler:handler}
  self141.processorMap["timResponsePresenceList"] = &iTimProcessorTimResponsePresenceList{handler:handler}
  self141.processorMap["timResponseMessageList"] = &iTimProcessorTimResponseMessageList{handler:handler}
return self141
}

func (p *ITimProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x142 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x142.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x142

}

type iTimProcessorTimStream struct {
  handler ITim
}

func (p *iTimProcessorTimStream) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimStreamArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimStream(ctx, args.Param); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimStarttls struct {
  handler ITim
}

func (p *iTimProcessorTimStarttls) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimStarttlsArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimStarttls(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimLogin struct {
  handler ITim
}

func (p *iTimProcessorTimLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimLoginArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimLogin(ctx, args.Tid, args.Pwd); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimAck struct {
  handler ITim
}

func (p *iTimProcessorTimAck) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimAckArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimAck(ctx, args.Ab); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimPresence struct {
  handler ITim
}

func (p *iTimProcessorTimPresence) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimPresenceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimPresence(ctx, args.Pbean); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimMessage struct {
  handler ITim
}

func (p *iTimProcessorTimMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimMessageArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimMessage(ctx, args.Mbean); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimPing struct {
  handler ITim
}

func (p *iTimProcessorTimPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimPingArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimPing(ctx, args.ThreadId); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimError struct {
  handler ITim
}

func (p *iTimProcessorTimError) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimErrorArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimError(ctx, args.E); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimLogout struct {
  handler ITim
}

func (p *iTimProcessorTimLogout) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimLogoutArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimLogout(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimRegist struct {
  handler ITim
}

func (p *iTimProcessorTimRegist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimRegistArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimRegist(ctx, args.Tid, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimRoser struct {
  handler ITim
}

func (p *iTimProcessorTimRoser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimRoserArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimRoser(ctx, args.Roster); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimMessageList struct {
  handler ITim
}

func (p *iTimProcessorTimMessageList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimMessageListArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimMessageList(ctx, args.MbeanList); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimPresenceList struct {
  handler ITim
}

func (p *iTimProcessorTimPresenceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimPresenceListArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimPresenceList(ctx, args.PbeanList); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimMessageIq struct {
  handler ITim
}

func (p *iTimProcessorTimMessageIq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimMessageIqArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimMessageIq(ctx, args.TimMsgIq, args.IqType); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimMessageResult_ struct {
  handler ITim
}

func (p *iTimProcessorTimMessageResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimMessageResultArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimMessageResult_(ctx, args.Mbean); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimProperty struct {
  handler ITim
}

func (p *iTimProcessorTimProperty) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ITimTimPropertyArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 := p.handler.TimProperty(ctx, args.Tpb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, err
}

type iTimProcessorTimRemoteUserAuth struct {
  handler ITim
}

func (p *iTimProcessorTimRemoteUserAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err143 error
  args := ITimTimRemoteUserAuthArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timRemoteUserAuth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimRemoteUserAuthResult{}
  if retval, err2 := p.handler.TimRemoteUserAuth(ctx, args.Tid, args.Pwd, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc144 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timRemoteUserAuth: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timRemoteUserAuth", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err143 = thrift.WrapTException(err2)
    }
    if err2 := _exc144.Write(ctx, oprot); _write_err143 == nil && err2 != nil {
      _write_err143 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err143 == nil && err2 != nil {
      _write_err143 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err143 == nil && err2 != nil {
      _write_err143 = thrift.WrapTException(err2)
    }
    if _write_err143 != nil {
      return false, thrift.WrapTException(_write_err143)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timRemoteUserAuth", thrift.REPLY, seqId); err2 != nil {
    _write_err143 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err143 == nil && err2 != nil {
    _write_err143 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err143 == nil && err2 != nil {
    _write_err143 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err143 == nil && err2 != nil {
    _write_err143 = thrift.WrapTException(err2)
  }
  if _write_err143 != nil {
    return false, thrift.WrapTException(_write_err143)
  }
  return true, err
}

type iTimProcessorTimRemoteUserGet struct {
  handler ITim
}

func (p *iTimProcessorTimRemoteUserGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err145 error
  args := ITimTimRemoteUserGetArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timRemoteUserGet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimRemoteUserGetResult{}
  if retval, err2 := p.handler.TimRemoteUserGet(ctx, args.Tid, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc146 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timRemoteUserGet: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timRemoteUserGet", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err145 = thrift.WrapTException(err2)
    }
    if err2 := _exc146.Write(ctx, oprot); _write_err145 == nil && err2 != nil {
      _write_err145 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err145 == nil && err2 != nil {
      _write_err145 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err145 == nil && err2 != nil {
      _write_err145 = thrift.WrapTException(err2)
    }
    if _write_err145 != nil {
      return false, thrift.WrapTException(_write_err145)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timRemoteUserGet", thrift.REPLY, seqId); err2 != nil {
    _write_err145 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err145 == nil && err2 != nil {
    _write_err145 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err145 == nil && err2 != nil {
    _write_err145 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err145 == nil && err2 != nil {
    _write_err145 = thrift.WrapTException(err2)
  }
  if _write_err145 != nil {
    return false, thrift.WrapTException(_write_err145)
  }
  return true, err
}

type iTimProcessorTimRemoteUserEdit struct {
  handler ITim
}

func (p *iTimProcessorTimRemoteUserEdit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err147 error
  args := ITimTimRemoteUserEditArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timRemoteUserEdit", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimRemoteUserEditResult{}
  if retval, err2 := p.handler.TimRemoteUserEdit(ctx, args.Tid, args.Ub, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc148 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timRemoteUserEdit: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timRemoteUserEdit", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err147 = thrift.WrapTException(err2)
    }
    if err2 := _exc148.Write(ctx, oprot); _write_err147 == nil && err2 != nil {
      _write_err147 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err147 == nil && err2 != nil {
      _write_err147 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err147 == nil && err2 != nil {
      _write_err147 = thrift.WrapTException(err2)
    }
    if _write_err147 != nil {
      return false, thrift.WrapTException(_write_err147)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timRemoteUserEdit", thrift.REPLY, seqId); err2 != nil {
    _write_err147 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err147 == nil && err2 != nil {
    _write_err147 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err147 == nil && err2 != nil {
    _write_err147 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err147 == nil && err2 != nil {
    _write_err147 = thrift.WrapTException(err2)
  }
  if _write_err147 != nil {
    return false, thrift.WrapTException(_write_err147)
  }
  return true, err
}

type iTimProcessorTimResponsePresence struct {
  handler ITim
}

func (p *iTimProcessorTimResponsePresence) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err149 error
  args := ITimTimResponsePresenceArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timResponsePresence", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimResponsePresenceResult{}
  if retval, err2 := p.handler.TimResponsePresence(ctx, args.Pbean, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc150 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timResponsePresence: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timResponsePresence", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err149 = thrift.WrapTException(err2)
    }
    if err2 := _exc150.Write(ctx, oprot); _write_err149 == nil && err2 != nil {
      _write_err149 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err149 == nil && err2 != nil {
      _write_err149 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err149 == nil && err2 != nil {
      _write_err149 = thrift.WrapTException(err2)
    }
    if _write_err149 != nil {
      return false, thrift.WrapTException(_write_err149)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timResponsePresence", thrift.REPLY, seqId); err2 != nil {
    _write_err149 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err149 == nil && err2 != nil {
    _write_err149 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err149 == nil && err2 != nil {
    _write_err149 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err149 == nil && err2 != nil {
    _write_err149 = thrift.WrapTException(err2)
  }
  if _write_err149 != nil {
    return false, thrift.WrapTException(_write_err149)
  }
  return true, err
}

type iTimProcessorTimResponseMessage struct {
  handler ITim
}

func (p *iTimProcessorTimResponseMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err151 error
  args := ITimTimResponseMessageArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timResponseMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimResponseMessageResult{}
  if retval, err2 := p.handler.TimResponseMessage(ctx, args.Mbean, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc152 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timResponseMessage: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timResponseMessage", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err151 = thrift.WrapTException(err2)
    }
    if err2 := _exc152.Write(ctx, oprot); _write_err151 == nil && err2 != nil {
      _write_err151 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err151 == nil && err2 != nil {
      _write_err151 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err151 == nil && err2 != nil {
      _write_err151 = thrift.WrapTException(err2)
    }
    if _write_err151 != nil {
      return false, thrift.WrapTException(_write_err151)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timResponseMessage", thrift.REPLY, seqId); err2 != nil {
    _write_err151 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err151 == nil && err2 != nil {
    _write_err151 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err151 == nil && err2 != nil {
    _write_err151 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err151 == nil && err2 != nil {
    _write_err151 = thrift.WrapTException(err2)
  }
  if _write_err151 != nil {
    return false, thrift.WrapTException(_write_err151)
  }
  return true, err
}

type iTimProcessorTimResponseMessageIq struct {
  handler ITim
}

func (p *iTimProcessorTimResponseMessageIq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err153 error
  args := ITimTimResponseMessageIqArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timResponseMessageIq", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimResponseMessageIqResult{}
  if retval, err2 := p.handler.TimResponseMessageIq(ctx, args.TimMsgIq, args.IqType, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc154 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timResponseMessageIq: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timResponseMessageIq", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err153 = thrift.WrapTException(err2)
    }
    if err2 := _exc154.Write(ctx, oprot); _write_err153 == nil && err2 != nil {
      _write_err153 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err153 == nil && err2 != nil {
      _write_err153 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err153 == nil && err2 != nil {
      _write_err153 = thrift.WrapTException(err2)
    }
    if _write_err153 != nil {
      return false, thrift.WrapTException(_write_err153)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timResponseMessageIq", thrift.REPLY, seqId); err2 != nil {
    _write_err153 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err153 == nil && err2 != nil {
    _write_err153 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err153 == nil && err2 != nil {
    _write_err153 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err153 == nil && err2 != nil {
    _write_err153 = thrift.WrapTException(err2)
  }
  if _write_err153 != nil {
    return false, thrift.WrapTException(_write_err153)
  }
  return true, err
}

type iTimProcessorTimResponsePresenceList struct {
  handler ITim
}

func (p *iTimProcessorTimResponsePresenceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err155 error
  args := ITimTimResponsePresenceListArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timResponsePresenceList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimResponsePresenceListResult{}
  if retval, err2 := p.handler.TimResponsePresenceList(ctx, args.PbeanList, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc156 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timResponsePresenceList: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timResponsePresenceList", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err155 = thrift.WrapTException(err2)
    }
    if err2 := _exc156.Write(ctx, oprot); _write_err155 == nil && err2 != nil {
      _write_err155 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err155 == nil && err2 != nil {
      _write_err155 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err155 == nil && err2 != nil {
      _write_err155 = thrift.WrapTException(err2)
    }
    if _write_err155 != nil {
      return false, thrift.WrapTException(_write_err155)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timResponsePresenceList", thrift.REPLY, seqId); err2 != nil {
    _write_err155 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err155 == nil && err2 != nil {
    _write_err155 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err155 == nil && err2 != nil {
    _write_err155 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err155 == nil && err2 != nil {
    _write_err155 = thrift.WrapTException(err2)
  }
  if _write_err155 != nil {
    return false, thrift.WrapTException(_write_err155)
  }
  return true, err
}

type iTimProcessorTimResponseMessageList struct {
  handler ITim
}

func (p *iTimProcessorTimResponseMessageList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err157 error
  args := ITimTimResponseMessageListArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "timResponseMessageList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ITimTimResponseMessageListResult{}
  if retval, err2 := p.handler.TimResponseMessageList(ctx, args.MbeanList, args.Auth); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc158 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing timResponseMessageList: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "timResponseMessageList", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err157 = thrift.WrapTException(err2)
    }
    if err2 := _exc158.Write(ctx, oprot); _write_err157 == nil && err2 != nil {
      _write_err157 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err157 == nil && err2 != nil {
      _write_err157 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err157 == nil && err2 != nil {
      _write_err157 = thrift.WrapTException(err2)
    }
    if _write_err157 != nil {
      return false, thrift.WrapTException(_write_err157)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "timResponseMessageList", thrift.REPLY, seqId); err2 != nil {
    _write_err157 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err157 == nil && err2 != nil {
    _write_err157 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err157 == nil && err2 != nil {
    _write_err157 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err157 == nil && err2 != nil {
    _write_err157 = thrift.WrapTException(err2)
  }
  if _write_err157 != nil {
    return false, thrift.WrapTException(_write_err157)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Param
type ITimTimStreamArgs struct {
  Param *TimParam `thrift:"param,1" db:"param" json:"param"`
}

func NewITimTimStreamArgs() *ITimTimStreamArgs {
  return &ITimTimStreamArgs{}
}

var ITimTimStreamArgs_Param_DEFAULT *TimParam
func (p *ITimTimStreamArgs) GetParam() *TimParam {
  if !p.IsSetParam() {
    return ITimTimStreamArgs_Param_DEFAULT
  }
return p.Param
}
func (p *ITimTimStreamArgs) IsSetParam() bool {
  return p.Param != nil
}

func (p *ITimTimStreamArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimStreamArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Param = &TimParam{}
  if err := p.Param.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Param), err)
  }
  return nil
}

func (p *ITimTimStreamArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timStream_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimStreamArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "param", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:param: ", p), err) }
  if err := p.Param.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Param), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:param: ", p), err) }
  return err
}

func (p *ITimTimStreamArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimStreamArgs(%+v)", *p)
}

type ITimTimStarttlsArgs struct {
}

func NewITimTimStarttlsArgs() *ITimTimStarttlsArgs {
  return &ITimTimStarttlsArgs{}
}

func (p *ITimTimStarttlsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimStarttlsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timStarttls_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimStarttlsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimStarttlsArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Pwd
type ITimTimLoginArgs struct {
  Tid *Tid `thrift:"tid,1" db:"tid" json:"tid"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
}

func NewITimTimLoginArgs() *ITimTimLoginArgs {
  return &ITimTimLoginArgs{}
}

var ITimTimLoginArgs_Tid_DEFAULT *Tid
func (p *ITimTimLoginArgs) GetTid() *Tid {
  if !p.IsSetTid() {
    return ITimTimLoginArgs_Tid_DEFAULT
  }
return p.Tid
}

func (p *ITimTimLoginArgs) GetPwd() string {
  return p.Pwd
}
func (p *ITimTimLoginArgs) IsSetTid() bool {
  return p.Tid != nil
}

func (p *ITimTimLoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimLoginArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *ITimTimLoginArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *ITimTimLoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimLoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
  if err := p.Tid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  return err
}

func (p *ITimTimLoginArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *ITimTimLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimLoginArgs(%+v)", *p)
}

// Attributes:
//  - Ab
type ITimTimAckArgs struct {
  Ab *TimAckBean `thrift:"ab,1" db:"ab" json:"ab"`
}

func NewITimTimAckArgs() *ITimTimAckArgs {
  return &ITimTimAckArgs{}
}

var ITimTimAckArgs_Ab_DEFAULT *TimAckBean
func (p *ITimTimAckArgs) GetAb() *TimAckBean {
  if !p.IsSetAb() {
    return ITimTimAckArgs_Ab_DEFAULT
  }
return p.Ab
}
func (p *ITimTimAckArgs) IsSetAb() bool {
  return p.Ab != nil
}

func (p *ITimTimAckArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimAckArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ab = &TimAckBean{}
  if err := p.Ab.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
  }
  return nil
}

func (p *ITimTimAckArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timAck_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimAckArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ab", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ab: ", p), err) }
  if err := p.Ab.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ab: ", p), err) }
  return err
}

func (p *ITimTimAckArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimAckArgs(%+v)", *p)
}

// Attributes:
//  - Pbean
type ITimTimPresenceArgs struct {
  Pbean *TimPBean `thrift:"pbean,1" db:"pbean" json:"pbean"`
}

func NewITimTimPresenceArgs() *ITimTimPresenceArgs {
  return &ITimTimPresenceArgs{}
}

var ITimTimPresenceArgs_Pbean_DEFAULT *TimPBean
func (p *ITimTimPresenceArgs) GetPbean() *TimPBean {
  if !p.IsSetPbean() {
    return ITimTimPresenceArgs_Pbean_DEFAULT
  }
return p.Pbean
}
func (p *ITimTimPresenceArgs) IsSetPbean() bool {
  return p.Pbean != nil
}

func (p *ITimTimPresenceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimPresenceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pbean = &TimPBean{}
  if err := p.Pbean.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pbean), err)
  }
  return nil
}

func (p *ITimTimPresenceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timPresence_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimPresenceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pbean", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbean: ", p), err) }
  if err := p.Pbean.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pbean), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbean: ", p), err) }
  return err
}

func (p *ITimTimPresenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimPresenceArgs(%+v)", *p)
}

// Attributes:
//  - Mbean
type ITimTimMessageArgs struct {
  Mbean *TimMBean `thrift:"mbean,1" db:"mbean" json:"mbean"`
}

func NewITimTimMessageArgs() *ITimTimMessageArgs {
  return &ITimTimMessageArgs{}
}

var ITimTimMessageArgs_Mbean_DEFAULT *TimMBean
func (p *ITimTimMessageArgs) GetMbean() *TimMBean {
  if !p.IsSetMbean() {
    return ITimTimMessageArgs_Mbean_DEFAULT
  }
return p.Mbean
}
func (p *ITimTimMessageArgs) IsSetMbean() bool {
  return p.Mbean != nil
}

func (p *ITimTimMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Mbean = &TimMBean{}
  if err := p.Mbean.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
  }
  return nil
}

func (p *ITimTimMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mbean", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err) }
  if err := p.Mbean.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err) }
  return err
}

func (p *ITimTimMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimMessageArgs(%+v)", *p)
}

// Attributes:
//  - ThreadId
type ITimTimPingArgs struct {
  ThreadId string `thrift:"threadId,1" db:"threadId" json:"threadId"`
}

func NewITimTimPingArgs() *ITimTimPingArgs {
  return &ITimTimPingArgs{}
}


func (p *ITimTimPingArgs) GetThreadId() string {
  return p.ThreadId
}
func (p *ITimTimPingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimPingArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *ITimTimPingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timPing_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimPingArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadId: ", p), err) }
  return err
}

func (p *ITimTimPingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimPingArgs(%+v)", *p)
}

// Attributes:
//  - E
type ITimTimErrorArgs struct {
  E *TimError `thrift:"e,1" db:"e" json:"e"`
}

func NewITimTimErrorArgs() *ITimTimErrorArgs {
  return &ITimTimErrorArgs{}
}

var ITimTimErrorArgs_E_DEFAULT *TimError
func (p *ITimTimErrorArgs) GetE() *TimError {
  if !p.IsSetE() {
    return ITimTimErrorArgs_E_DEFAULT
  }
return p.E
}
func (p *ITimTimErrorArgs) IsSetE() bool {
  return p.E != nil
}

func (p *ITimTimErrorArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimErrorArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TimError{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ITimTimErrorArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timError_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimErrorArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
  if err := p.E.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  return err
}

func (p *ITimTimErrorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimErrorArgs(%+v)", *p)
}

type ITimTimLogoutArgs struct {
}

func NewITimTimLogoutArgs() *ITimTimLogoutArgs {
  return &ITimTimLogoutArgs{}
}

func (p *ITimTimLogoutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimLogoutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timLogout_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimLogoutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimLogoutArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Auth
type ITimTimRegistArgs struct {
  Tid *Tid `thrift:"tid,1" db:"tid" json:"tid"`
  Auth string `thrift:"auth,2" db:"auth" json:"auth"`
}

func NewITimTimRegistArgs() *ITimTimRegistArgs {
  return &ITimTimRegistArgs{}
}

var ITimTimRegistArgs_Tid_DEFAULT *Tid
func (p *ITimTimRegistArgs) GetTid() *Tid {
  if !p.IsSetTid() {
    return ITimTimRegistArgs_Tid_DEFAULT
  }
return p.Tid
}

func (p *ITimTimRegistArgs) GetAuth() string {
  return p.Auth
}
func (p *ITimTimRegistArgs) IsSetTid() bool {
  return p.Tid != nil
}

func (p *ITimTimRegistArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRegistArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *ITimTimRegistArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Auth = v
}
  return nil
}

func (p *ITimTimRegistArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRegist_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRegistArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
  if err := p.Tid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  return err
}

func (p *ITimTimRegistArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Auth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.auth (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err) }
  return err
}

func (p *ITimTimRegistArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRegistArgs(%+v)", *p)
}

// Attributes:
//  - Roster
type ITimTimRoserArgs struct {
  Roster *TimRoster `thrift:"roster,1" db:"roster" json:"roster"`
}

func NewITimTimRoserArgs() *ITimTimRoserArgs {
  return &ITimTimRoserArgs{}
}

var ITimTimRoserArgs_Roster_DEFAULT *TimRoster
func (p *ITimTimRoserArgs) GetRoster() *TimRoster {
  if !p.IsSetRoster() {
    return ITimTimRoserArgs_Roster_DEFAULT
  }
return p.Roster
}
func (p *ITimTimRoserArgs) IsSetRoster() bool {
  return p.Roster != nil
}

func (p *ITimTimRoserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRoserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Roster = &TimRoster{}
  if err := p.Roster.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Roster), err)
  }
  return nil
}

func (p *ITimTimRoserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRoser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRoserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "roster", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:roster: ", p), err) }
  if err := p.Roster.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Roster), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:roster: ", p), err) }
  return err
}

func (p *ITimTimRoserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRoserArgs(%+v)", *p)
}

// Attributes:
//  - MbeanList
type ITimTimMessageListArgs struct {
  MbeanList *TimMBeanList `thrift:"mbeanList,1" db:"mbeanList" json:"mbeanList"`
}

func NewITimTimMessageListArgs() *ITimTimMessageListArgs {
  return &ITimTimMessageListArgs{}
}

var ITimTimMessageListArgs_MbeanList_DEFAULT *TimMBeanList
func (p *ITimTimMessageListArgs) GetMbeanList() *TimMBeanList {
  if !p.IsSetMbeanList() {
    return ITimTimMessageListArgs_MbeanList_DEFAULT
  }
return p.MbeanList
}
func (p *ITimTimMessageListArgs) IsSetMbeanList() bool {
  return p.MbeanList != nil
}

func (p *ITimTimMessageListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimMessageListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.MbeanList = &TimMBeanList{}
  if err := p.MbeanList.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MbeanList), err)
  }
  return nil
}

func (p *ITimTimMessageListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timMessageList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimMessageListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mbeanList", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbeanList: ", p), err) }
  if err := p.MbeanList.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MbeanList), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbeanList: ", p), err) }
  return err
}

func (p *ITimTimMessageListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimMessageListArgs(%+v)", *p)
}

// Attributes:
//  - PbeanList
type ITimTimPresenceListArgs struct {
  PbeanList *TimPBeanList `thrift:"pbeanList,1" db:"pbeanList" json:"pbeanList"`
}

func NewITimTimPresenceListArgs() *ITimTimPresenceListArgs {
  return &ITimTimPresenceListArgs{}
}

var ITimTimPresenceListArgs_PbeanList_DEFAULT *TimPBeanList
func (p *ITimTimPresenceListArgs) GetPbeanList() *TimPBeanList {
  if !p.IsSetPbeanList() {
    return ITimTimPresenceListArgs_PbeanList_DEFAULT
  }
return p.PbeanList
}
func (p *ITimTimPresenceListArgs) IsSetPbeanList() bool {
  return p.PbeanList != nil
}

func (p *ITimTimPresenceListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimPresenceListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.PbeanList = &TimPBeanList{}
  if err := p.PbeanList.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PbeanList), err)
  }
  return nil
}

func (p *ITimTimPresenceListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timPresenceList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimPresenceListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pbeanList", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbeanList: ", p), err) }
  if err := p.PbeanList.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PbeanList), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbeanList: ", p), err) }
  return err
}

func (p *ITimTimPresenceListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimPresenceListArgs(%+v)", *p)
}

// Attributes:
//  - TimMsgIq
//  - IqType
type ITimTimMessageIqArgs struct {
  TimMsgIq *TimMessageIq `thrift:"timMsgIq,1" db:"timMsgIq" json:"timMsgIq"`
  IqType string `thrift:"iqType,2" db:"iqType" json:"iqType"`
}

func NewITimTimMessageIqArgs() *ITimTimMessageIqArgs {
  return &ITimTimMessageIqArgs{}
}

var ITimTimMessageIqArgs_TimMsgIq_DEFAULT *TimMessageIq
func (p *ITimTimMessageIqArgs) GetTimMsgIq() *TimMessageIq {
  if !p.IsSetTimMsgIq() {
    return ITimTimMessageIqArgs_TimMsgIq_DEFAULT
  }
return p.TimMsgIq
}

func (p *ITimTimMessageIqArgs) GetIqType() string {
  return p.IqType
}
func (p *ITimTimMessageIqArgs) IsSetTimMsgIq() bool {
  return p.TimMsgIq != nil
}

func (p *ITimTimMessageIqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimMessageIqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.TimMsgIq = &TimMessageIq{}
  if err := p.TimMsgIq.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimMsgIq), err)
  }
  return nil
}

func (p *ITimTimMessageIqArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IqType = v
}
  return nil
}

func (p *ITimTimMessageIqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timMessageIq_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimMessageIqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timMsgIq", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timMsgIq: ", p), err) }
  if err := p.TimMsgIq.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimMsgIq), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timMsgIq: ", p), err) }
  return err
}

func (p *ITimTimMessageIqArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iqType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iqType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IqType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iqType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iqType: ", p), err) }
  return err
}

func (p *ITimTimMessageIqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimMessageIqArgs(%+v)", *p)
}

// Attributes:
//  - Mbean
type ITimTimMessageResultArgs struct {
  Mbean *TimMBean `thrift:"mbean,1" db:"mbean" json:"mbean"`
}

func NewITimTimMessageResultArgs() *ITimTimMessageResultArgs {
  return &ITimTimMessageResultArgs{}
}

var ITimTimMessageResultArgs_Mbean_DEFAULT *TimMBean
func (p *ITimTimMessageResultArgs) GetMbean() *TimMBean {
  if !p.IsSetMbean() {
    return ITimTimMessageResultArgs_Mbean_DEFAULT
  }
return p.Mbean
}
func (p *ITimTimMessageResultArgs) IsSetMbean() bool {
  return p.Mbean != nil
}

func (p *ITimTimMessageResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimMessageResultArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Mbean = &TimMBean{}
  if err := p.Mbean.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
  }
  return nil
}

func (p *ITimTimMessageResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timMessageResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimMessageResultArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mbean", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err) }
  if err := p.Mbean.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err) }
  return err
}

func (p *ITimTimMessageResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimMessageResultArgs(%+v)", *p)
}

// Attributes:
//  - Tpb
type ITimTimPropertyArgs struct {
  Tpb *TimPropertyBean `thrift:"tpb,1" db:"tpb" json:"tpb"`
}

func NewITimTimPropertyArgs() *ITimTimPropertyArgs {
  return &ITimTimPropertyArgs{}
}

var ITimTimPropertyArgs_Tpb_DEFAULT *TimPropertyBean
func (p *ITimTimPropertyArgs) GetTpb() *TimPropertyBean {
  if !p.IsSetTpb() {
    return ITimTimPropertyArgs_Tpb_DEFAULT
  }
return p.Tpb
}
func (p *ITimTimPropertyArgs) IsSetTpb() bool {
  return p.Tpb != nil
}

func (p *ITimTimPropertyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimPropertyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tpb = &TimPropertyBean{}
  if err := p.Tpb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tpb), err)
  }
  return nil
}

func (p *ITimTimPropertyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timProperty_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimPropertyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tpb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tpb: ", p), err) }
  if err := p.Tpb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tpb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tpb: ", p), err) }
  return err
}

func (p *ITimTimPropertyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimPropertyArgs(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Pwd
//  - Auth
type ITimTimRemoteUserAuthArgs struct {
  Tid *Tid `thrift:"tid,1" db:"tid" json:"tid"`
  Pwd string `thrift:"pwd,2" db:"pwd" json:"pwd"`
  Auth *TimAuth `thrift:"auth,3" db:"auth" json:"auth"`
}

func NewITimTimRemoteUserAuthArgs() *ITimTimRemoteUserAuthArgs {
  return &ITimTimRemoteUserAuthArgs{}
}

var ITimTimRemoteUserAuthArgs_Tid_DEFAULT *Tid
func (p *ITimTimRemoteUserAuthArgs) GetTid() *Tid {
  if !p.IsSetTid() {
    return ITimTimRemoteUserAuthArgs_Tid_DEFAULT
  }
return p.Tid
}

func (p *ITimTimRemoteUserAuthArgs) GetPwd() string {
  return p.Pwd
}
var ITimTimRemoteUserAuthArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimRemoteUserAuthArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimRemoteUserAuthArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimRemoteUserAuthArgs) IsSetTid() bool {
  return p.Tid != nil
}

func (p *ITimTimRemoteUserAuthArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimRemoteUserAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRemoteUserAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *ITimTimRemoteUserAuthArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Pwd = v
}
  return nil
}

func (p *ITimTimRemoteUserAuthArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimRemoteUserAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRemoteUserAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRemoteUserAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
  if err := p.Tid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserAuthArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Pwd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserAuthArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:auth: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRemoteUserAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimRemoteUserAuthResult struct {
  Success *TimRemoteUserBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimRemoteUserAuthResult() *ITimTimRemoteUserAuthResult {
  return &ITimTimRemoteUserAuthResult{}
}

var ITimTimRemoteUserAuthResult_Success_DEFAULT *TimRemoteUserBean
func (p *ITimTimRemoteUserAuthResult) GetSuccess() *TimRemoteUserBean {
  if !p.IsSetSuccess() {
    return ITimTimRemoteUserAuthResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimRemoteUserAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimRemoteUserAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRemoteUserAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimRemoteUserBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimRemoteUserAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRemoteUserAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRemoteUserAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimRemoteUserAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRemoteUserAuthResult(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Auth
type ITimTimRemoteUserGetArgs struct {
  Tid *Tid `thrift:"tid,1" db:"tid" json:"tid"`
  Auth *TimAuth `thrift:"auth,2" db:"auth" json:"auth"`
}

func NewITimTimRemoteUserGetArgs() *ITimTimRemoteUserGetArgs {
  return &ITimTimRemoteUserGetArgs{}
}

var ITimTimRemoteUserGetArgs_Tid_DEFAULT *Tid
func (p *ITimTimRemoteUserGetArgs) GetTid() *Tid {
  if !p.IsSetTid() {
    return ITimTimRemoteUserGetArgs_Tid_DEFAULT
  }
return p.Tid
}
var ITimTimRemoteUserGetArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimRemoteUserGetArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimRemoteUserGetArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimRemoteUserGetArgs) IsSetTid() bool {
  return p.Tid != nil
}

func (p *ITimTimRemoteUserGetArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimRemoteUserGetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRemoteUserGetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *ITimTimRemoteUserGetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimRemoteUserGetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRemoteUserGet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRemoteUserGetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
  if err := p.Tid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserGetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRemoteUserGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimRemoteUserGetResult struct {
  Success *TimRemoteUserBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimRemoteUserGetResult() *ITimTimRemoteUserGetResult {
  return &ITimTimRemoteUserGetResult{}
}

var ITimTimRemoteUserGetResult_Success_DEFAULT *TimRemoteUserBean
func (p *ITimTimRemoteUserGetResult) GetSuccess() *TimRemoteUserBean {
  if !p.IsSetSuccess() {
    return ITimTimRemoteUserGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimRemoteUserGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimRemoteUserGetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRemoteUserGetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimRemoteUserBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimRemoteUserGetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRemoteUserGet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRemoteUserGetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimRemoteUserGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRemoteUserGetResult(%+v)", *p)
}

// Attributes:
//  - Tid
//  - Ub
//  - Auth
type ITimTimRemoteUserEditArgs struct {
  Tid *Tid `thrift:"tid,1" db:"tid" json:"tid"`
  Ub *TimUserBean `thrift:"ub,2" db:"ub" json:"ub"`
  Auth *TimAuth `thrift:"auth,3" db:"auth" json:"auth"`
}

func NewITimTimRemoteUserEditArgs() *ITimTimRemoteUserEditArgs {
  return &ITimTimRemoteUserEditArgs{}
}

var ITimTimRemoteUserEditArgs_Tid_DEFAULT *Tid
func (p *ITimTimRemoteUserEditArgs) GetTid() *Tid {
  if !p.IsSetTid() {
    return ITimTimRemoteUserEditArgs_Tid_DEFAULT
  }
return p.Tid
}
var ITimTimRemoteUserEditArgs_Ub_DEFAULT *TimUserBean
func (p *ITimTimRemoteUserEditArgs) GetUb() *TimUserBean {
  if !p.IsSetUb() {
    return ITimTimRemoteUserEditArgs_Ub_DEFAULT
  }
return p.Ub
}
var ITimTimRemoteUserEditArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimRemoteUserEditArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimRemoteUserEditArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimRemoteUserEditArgs) IsSetTid() bool {
  return p.Tid != nil
}

func (p *ITimTimRemoteUserEditArgs) IsSetUb() bool {
  return p.Ub != nil
}

func (p *ITimTimRemoteUserEditArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimRemoteUserEditArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRemoteUserEditArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Tid = &Tid{}
  if err := p.Tid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tid), err)
  }
  return nil
}

func (p *ITimTimRemoteUserEditArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ub = &TimUserBean{}
  if err := p.Ub.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ub), err)
  }
  return nil
}

func (p *ITimTimRemoteUserEditArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimRemoteUserEditArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRemoteUserEdit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRemoteUserEditArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tid: ", p), err) }
  if err := p.Tid.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tid), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tid: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserEditArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ub", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ub: ", p), err) }
  if err := p.Ub.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ub), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ub: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserEditArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:auth: ", p), err) }
  return err
}

func (p *ITimTimRemoteUserEditArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRemoteUserEditArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimRemoteUserEditResult struct {
  Success *TimRemoteUserBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimRemoteUserEditResult() *ITimTimRemoteUserEditResult {
  return &ITimTimRemoteUserEditResult{}
}

var ITimTimRemoteUserEditResult_Success_DEFAULT *TimRemoteUserBean
func (p *ITimTimRemoteUserEditResult) GetSuccess() *TimRemoteUserBean {
  if !p.IsSetSuccess() {
    return ITimTimRemoteUserEditResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimRemoteUserEditResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimRemoteUserEditResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimRemoteUserEditResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimRemoteUserBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimRemoteUserEditResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timRemoteUserEdit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimRemoteUserEditResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimRemoteUserEditResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimRemoteUserEditResult(%+v)", *p)
}

// Attributes:
//  - Pbean
//  - Auth
type ITimTimResponsePresenceArgs struct {
  Pbean *TimPBean `thrift:"pbean,1" db:"pbean" json:"pbean"`
  Auth *TimAuth `thrift:"auth,2" db:"auth" json:"auth"`
}

func NewITimTimResponsePresenceArgs() *ITimTimResponsePresenceArgs {
  return &ITimTimResponsePresenceArgs{}
}

var ITimTimResponsePresenceArgs_Pbean_DEFAULT *TimPBean
func (p *ITimTimResponsePresenceArgs) GetPbean() *TimPBean {
  if !p.IsSetPbean() {
    return ITimTimResponsePresenceArgs_Pbean_DEFAULT
  }
return p.Pbean
}
var ITimTimResponsePresenceArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimResponsePresenceArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimResponsePresenceArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimResponsePresenceArgs) IsSetPbean() bool {
  return p.Pbean != nil
}

func (p *ITimTimResponsePresenceArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimResponsePresenceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pbean = &TimPBean{}
  if err := p.Pbean.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pbean), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponsePresence_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponsePresenceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pbean", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbean: ", p), err) }
  if err := p.Pbean.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pbean), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbean: ", p), err) }
  return err
}

func (p *ITimTimResponsePresenceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err) }
  return err
}

func (p *ITimTimResponsePresenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponsePresenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimResponsePresenceResult struct {
  Success *TimResponseBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimResponsePresenceResult() *ITimTimResponsePresenceResult {
  return &ITimTimResponsePresenceResult{}
}

var ITimTimResponsePresenceResult_Success_DEFAULT *TimResponseBean
func (p *ITimTimResponsePresenceResult) GetSuccess() *TimResponseBean {
  if !p.IsSetSuccess() {
    return ITimTimResponsePresenceResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimResponsePresenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimResponsePresenceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimResponseBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponsePresence_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponsePresenceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimResponsePresenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponsePresenceResult(%+v)", *p)
}

// Attributes:
//  - Mbean
//  - Auth
type ITimTimResponseMessageArgs struct {
  Mbean *TimMBean `thrift:"mbean,1" db:"mbean" json:"mbean"`
  Auth *TimAuth `thrift:"auth,2" db:"auth" json:"auth"`
}

func NewITimTimResponseMessageArgs() *ITimTimResponseMessageArgs {
  return &ITimTimResponseMessageArgs{}
}

var ITimTimResponseMessageArgs_Mbean_DEFAULT *TimMBean
func (p *ITimTimResponseMessageArgs) GetMbean() *TimMBean {
  if !p.IsSetMbean() {
    return ITimTimResponseMessageArgs_Mbean_DEFAULT
  }
return p.Mbean
}
var ITimTimResponseMessageArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimResponseMessageArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimResponseMessageArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimResponseMessageArgs) IsSetMbean() bool {
  return p.Mbean != nil
}

func (p *ITimTimResponseMessageArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimResponseMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponseMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Mbean = &TimMBean{}
  if err := p.Mbean.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mbean), err)
  }
  return nil
}

func (p *ITimTimResponseMessageArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimResponseMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponseMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponseMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mbean", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbean: ", p), err) }
  if err := p.Mbean.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mbean), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbean: ", p), err) }
  return err
}

func (p *ITimTimResponseMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err) }
  return err
}

func (p *ITimTimResponseMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponseMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimResponseMessageResult struct {
  Success *TimResponseBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimResponseMessageResult() *ITimTimResponseMessageResult {
  return &ITimTimResponseMessageResult{}
}

var ITimTimResponseMessageResult_Success_DEFAULT *TimResponseBean
func (p *ITimTimResponseMessageResult) GetSuccess() *TimResponseBean {
  if !p.IsSetSuccess() {
    return ITimTimResponseMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimResponseMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimResponseMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponseMessageResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimResponseBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimResponseMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponseMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponseMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimResponseMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponseMessageResult(%+v)", *p)
}

// Attributes:
//  - TimMsgIq
//  - IqType
//  - Auth
type ITimTimResponseMessageIqArgs struct {
  TimMsgIq *TimMessageIq `thrift:"timMsgIq,1" db:"timMsgIq" json:"timMsgIq"`
  IqType string `thrift:"iqType,2" db:"iqType" json:"iqType"`
  Auth *TimAuth `thrift:"auth,3" db:"auth" json:"auth"`
}

func NewITimTimResponseMessageIqArgs() *ITimTimResponseMessageIqArgs {
  return &ITimTimResponseMessageIqArgs{}
}

var ITimTimResponseMessageIqArgs_TimMsgIq_DEFAULT *TimMessageIq
func (p *ITimTimResponseMessageIqArgs) GetTimMsgIq() *TimMessageIq {
  if !p.IsSetTimMsgIq() {
    return ITimTimResponseMessageIqArgs_TimMsgIq_DEFAULT
  }
return p.TimMsgIq
}

func (p *ITimTimResponseMessageIqArgs) GetIqType() string {
  return p.IqType
}
var ITimTimResponseMessageIqArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimResponseMessageIqArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimResponseMessageIqArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimResponseMessageIqArgs) IsSetTimMsgIq() bool {
  return p.TimMsgIq != nil
}

func (p *ITimTimResponseMessageIqArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimResponseMessageIqArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponseMessageIqArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.TimMsgIq = &TimMessageIq{}
  if err := p.TimMsgIq.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimMsgIq), err)
  }
  return nil
}

func (p *ITimTimResponseMessageIqArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IqType = v
}
  return nil
}

func (p *ITimTimResponseMessageIqArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimResponseMessageIqArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponseMessageIq_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponseMessageIqArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "timMsgIq", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timMsgIq: ", p), err) }
  if err := p.TimMsgIq.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimMsgIq), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timMsgIq: ", p), err) }
  return err
}

func (p *ITimTimResponseMessageIqArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iqType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:iqType: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IqType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iqType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:iqType: ", p), err) }
  return err
}

func (p *ITimTimResponseMessageIqArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:auth: ", p), err) }
  return err
}

func (p *ITimTimResponseMessageIqArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponseMessageIqArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimResponseMessageIqResult struct {
  Success *TimMBeanList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimResponseMessageIqResult() *ITimTimResponseMessageIqResult {
  return &ITimTimResponseMessageIqResult{}
}

var ITimTimResponseMessageIqResult_Success_DEFAULT *TimMBeanList
func (p *ITimTimResponseMessageIqResult) GetSuccess() *TimMBeanList {
  if !p.IsSetSuccess() {
    return ITimTimResponseMessageIqResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimResponseMessageIqResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimResponseMessageIqResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponseMessageIqResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimMBeanList{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimResponseMessageIqResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponseMessageIq_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponseMessageIqResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimResponseMessageIqResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponseMessageIqResult(%+v)", *p)
}

// Attributes:
//  - PbeanList
//  - Auth
type ITimTimResponsePresenceListArgs struct {
  PbeanList *TimPBeanList `thrift:"pbeanList,1" db:"pbeanList" json:"pbeanList"`
  Auth *TimAuth `thrift:"auth,2" db:"auth" json:"auth"`
}

func NewITimTimResponsePresenceListArgs() *ITimTimResponsePresenceListArgs {
  return &ITimTimResponsePresenceListArgs{}
}

var ITimTimResponsePresenceListArgs_PbeanList_DEFAULT *TimPBeanList
func (p *ITimTimResponsePresenceListArgs) GetPbeanList() *TimPBeanList {
  if !p.IsSetPbeanList() {
    return ITimTimResponsePresenceListArgs_PbeanList_DEFAULT
  }
return p.PbeanList
}
var ITimTimResponsePresenceListArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimResponsePresenceListArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimResponsePresenceListArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimResponsePresenceListArgs) IsSetPbeanList() bool {
  return p.PbeanList != nil
}

func (p *ITimTimResponsePresenceListArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimResponsePresenceListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.PbeanList = &TimPBeanList{}
  if err := p.PbeanList.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PbeanList), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponsePresenceList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponsePresenceListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pbeanList", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pbeanList: ", p), err) }
  if err := p.PbeanList.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PbeanList), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pbeanList: ", p), err) }
  return err
}

func (p *ITimTimResponsePresenceListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err) }
  return err
}

func (p *ITimTimResponsePresenceListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponsePresenceListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimResponsePresenceListResult struct {
  Success *TimResponseBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimResponsePresenceListResult() *ITimTimResponsePresenceListResult {
  return &ITimTimResponsePresenceListResult{}
}

var ITimTimResponsePresenceListResult_Success_DEFAULT *TimResponseBean
func (p *ITimTimResponsePresenceListResult) GetSuccess() *TimResponseBean {
  if !p.IsSetSuccess() {
    return ITimTimResponsePresenceListResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimResponsePresenceListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimResponsePresenceListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimResponseBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimResponsePresenceListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponsePresenceList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponsePresenceListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimResponsePresenceListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponsePresenceListResult(%+v)", *p)
}

// Attributes:
//  - MbeanList
//  - Auth
type ITimTimResponseMessageListArgs struct {
  MbeanList *TimMBeanList `thrift:"mbeanList,1" db:"mbeanList" json:"mbeanList"`
  Auth *TimAuth `thrift:"auth,2" db:"auth" json:"auth"`
}

func NewITimTimResponseMessageListArgs() *ITimTimResponseMessageListArgs {
  return &ITimTimResponseMessageListArgs{}
}

var ITimTimResponseMessageListArgs_MbeanList_DEFAULT *TimMBeanList
func (p *ITimTimResponseMessageListArgs) GetMbeanList() *TimMBeanList {
  if !p.IsSetMbeanList() {
    return ITimTimResponseMessageListArgs_MbeanList_DEFAULT
  }
return p.MbeanList
}
var ITimTimResponseMessageListArgs_Auth_DEFAULT *TimAuth
func (p *ITimTimResponseMessageListArgs) GetAuth() *TimAuth {
  if !p.IsSetAuth() {
    return ITimTimResponseMessageListArgs_Auth_DEFAULT
  }
return p.Auth
}
func (p *ITimTimResponseMessageListArgs) IsSetMbeanList() bool {
  return p.MbeanList != nil
}

func (p *ITimTimResponseMessageListArgs) IsSetAuth() bool {
  return p.Auth != nil
}

func (p *ITimTimResponseMessageListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponseMessageListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.MbeanList = &TimMBeanList{}
  if err := p.MbeanList.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MbeanList), err)
  }
  return nil
}

func (p *ITimTimResponseMessageListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Auth = &TimAuth{}
  if err := p.Auth.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Auth), err)
  }
  return nil
}

func (p *ITimTimResponseMessageListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponseMessageList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponseMessageListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mbeanList", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mbeanList: ", p), err) }
  if err := p.MbeanList.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MbeanList), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mbeanList: ", p), err) }
  return err
}

func (p *ITimTimResponseMessageListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "auth", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:auth: ", p), err) }
  if err := p.Auth.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Auth), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:auth: ", p), err) }
  return err
}

func (p *ITimTimResponseMessageListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponseMessageListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ITimTimResponseMessageListResult struct {
  Success *TimResponseBean `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewITimTimResponseMessageListResult() *ITimTimResponseMessageListResult {
  return &ITimTimResponseMessageListResult{}
}

var ITimTimResponseMessageListResult_Success_DEFAULT *TimResponseBean
func (p *ITimTimResponseMessageListResult) GetSuccess() *TimResponseBean {
  if !p.IsSetSuccess() {
    return ITimTimResponseMessageListResult_Success_DEFAULT
  }
return p.Success
}
func (p *ITimTimResponseMessageListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ITimTimResponseMessageListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ITimTimResponseMessageListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TimResponseBean{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ITimTimResponseMessageListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "timResponseMessageList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ITimTimResponseMessageListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ITimTimResponseMessageListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ITimTimResponseMessageListResult(%+v)", *p)
}


