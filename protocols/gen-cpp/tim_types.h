/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tim_TYPES_H
#define tim_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class TimError;

class TimNode;

class TimAckBean;

class TimHBean;

class TimParam;

class TimTime;

class TimArea;

class Tid;

class TimUserBean;

class TimRoom;

class TimPBean;

class TimMBean;

class TimIqBean;

class TimRoster;

class TimRemoteUserBean;

class TimRemoteRoom;

class TimResponseBean;

class TimSock5Bean;

class TimSock5Bytes;

class TimPage;

class TimMessageIq;

class TimAuth;

class TimMBeanList;

class TimPBeanList;

class TimPropertyBean;

typedef struct _TimError__isset {
  _TimError__isset() : errCode(false), errMsg(false) {}
  bool errCode :1;
  bool errMsg :1;
} _TimError__isset;

class TimError : public virtual ::apache::thrift::TBase {
 public:

  TimError(const TimError&);
  TimError& operator=(const TimError&);
  TimError() noexcept
           : errCode(0),
             errMsg() {
  }

  virtual ~TimError() noexcept;
  /**
   * 错误码
   */
  int32_t errCode;
  /**
   * 错误内容
   */
  std::string errMsg;

  _TimError__isset __isset;

  void __set_errCode(const int32_t val);

  void __set_errMsg(const std::string& val);

  bool operator == (const TimError & rhs) const
  {
    if (__isset.errCode != rhs.__isset.errCode)
      return false;
    else if (__isset.errCode && !(errCode == rhs.errCode))
      return false;
    if (__isset.errMsg != rhs.__isset.errMsg)
      return false;
    else if (__isset.errMsg && !(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const TimError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimError &a, TimError &b);

std::ostream& operator<<(std::ostream& out, const TimError& obj);

typedef struct _TimNode__isset {
  _TimNode__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _TimNode__isset;

class TimNode : public virtual ::apache::thrift::TBase {
 public:

  TimNode(const TimNode&);
  TimNode& operator=(const TimNode&);
  TimNode() noexcept
          : key(),
            value() {
  }

  virtual ~TimNode() noexcept;
  /**
   * 键
   */
  std::string key;
  /**
   * 值
   */
  std::string value;

  _TimNode__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const TimNode & rhs) const
  {
    if (__isset.key != rhs.__isset.key)
      return false;
    else if (__isset.key && !(key == rhs.key))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const TimNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimNode &a, TimNode &b);

std::ostream& operator<<(std::ostream& out, const TimNode& obj);

typedef struct _TimAckBean__isset {
  _TimAckBean__isset() : id(false), ackType(false), ackStatus(false), extraList(false), err(false), extraMap(false) {}
  bool id :1;
  bool ackType :1;
  bool ackStatus :1;
  bool extraList :1;
  bool err :1;
  bool extraMap :1;
} _TimAckBean__isset;

class TimAckBean : public virtual ::apache::thrift::TBase {
 public:

  TimAckBean(const TimAckBean&);
  TimAckBean& operator=(const TimAckBean&);
  TimAckBean() noexcept
             : id(),
               ackType(),
               ackStatus() {
  }

  virtual ~TimAckBean() noexcept;
  /**
   * id，返回所要回执协议的线程id
   */
  std::string id;
  /**
   * 类型，自定义 如：ping，message等
   */
  std::string ackType;
  /**
   * 状态，如成功，失败等
   */
  std::string ackStatus;
  /**
   * 附加信息
   */
  std::vector<TimNode>  extraList;
  /**
   * 错误信息
   */
  TimError err;
  std::map<std::string, std::string>  extraMap;

  _TimAckBean__isset __isset;

  void __set_id(const std::string& val);

  void __set_ackType(const std::string& val);

  void __set_ackStatus(const std::string& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_err(const TimError& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimAckBean & rhs) const
  {
    if (__isset.id != rhs.__isset.id)
      return false;
    else if (__isset.id && !(id == rhs.id))
      return false;
    if (__isset.ackType != rhs.__isset.ackType)
      return false;
    else if (__isset.ackType && !(ackType == rhs.ackType))
      return false;
    if (__isset.ackStatus != rhs.__isset.ackStatus)
      return false;
    else if (__isset.ackStatus && !(ackStatus == rhs.ackStatus))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.err != rhs.__isset.err)
      return false;
    else if (__isset.err && !(err == rhs.err))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimAckBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimAckBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimAckBean &a, TimAckBean &b);

std::ostream& operator<<(std::ostream& out, const TimAckBean& obj);

typedef struct _TimHBean__isset {
  _TimHBean__isset() : platform(false) {}
  bool platform :1;
} _TimHBean__isset;

class TimHBean : public virtual ::apache::thrift::TBase {
 public:

  TimHBean(const TimHBean&) noexcept;
  TimHBean& operator=(const TimHBean&) noexcept;
  TimHBean() noexcept
           : chl(0),
             platform(0),
             version(0) {
  }

  virtual ~TimHBean() noexcept;
  /**
   * 渠道
   */
  int32_t chl;
  /**
   * 平台
   */
  int32_t platform;
  /**
   * version 客户端协议版本
   */
  int16_t version;

  _TimHBean__isset __isset;

  void __set_chl(const int32_t val);

  void __set_platform(const int32_t val);

  void __set_version(const int16_t val);

  bool operator == (const TimHBean & rhs) const
  {
    if (!(chl == rhs.chl))
      return false;
    if (__isset.platform != rhs.__isset.platform)
      return false;
    else if (__isset.platform && !(platform == rhs.platform))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const TimHBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimHBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimHBean &a, TimHBean &b);

std::ostream& operator<<(std::ostream& out, const TimHBean& obj);

typedef struct _TimParam__isset {
  _TimParam__isset() : timestamp(false), version(false), lang(false), extraList(false), extraMap(false), interflow(false), tls(false) {}
  bool timestamp :1;
  bool version :1;
  bool lang :1;
  bool extraList :1;
  bool extraMap :1;
  bool interflow :1;
  bool tls :1;
} _TimParam__isset;

class TimParam : public virtual ::apache::thrift::TBase {
 public:

  TimParam(const TimParam&);
  TimParam& operator=(const TimParam&);
  TimParam() noexcept
           : timestamp(),
             version(0),
             lang(),
             interflow(),
             tls() {
  }

  virtual ~TimParam() noexcept;
  /**
   * 服务器时间
   */
  std::string timestamp;
  /**
   * 版本
   */
  int16_t version;
  /**
   * 语言
   */
  std::string lang;
  /**
   * 附加信息
   */
  std::vector<TimNode>  extraList;
  std::map<std::string, std::string>  extraMap;
  /**
   * 消息合流
   */
  std::string interflow;
  /**
   * tls
   */
  std::string tls;

  _TimParam__isset __isset;

  void __set_timestamp(const std::string& val);

  void __set_version(const int16_t val);

  void __set_lang(const std::string& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  void __set_interflow(const std::string& val);

  void __set_tls(const std::string& val);

  bool operator == (const TimParam & rhs) const
  {
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.lang != rhs.__isset.lang)
      return false;
    else if (__isset.lang && !(lang == rhs.lang))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    if (__isset.interflow != rhs.__isset.interflow)
      return false;
    else if (__isset.interflow && !(interflow == rhs.interflow))
      return false;
    if (__isset.tls != rhs.__isset.tls)
      return false;
    else if (__isset.tls && !(tls == rhs.tls))
      return false;
    return true;
  }
  bool operator != (const TimParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimParam &a, TimParam &b);

std::ostream& operator<<(std::ostream& out, const TimParam& obj);

typedef struct _TimTime__isset {
  _TimTime__isset() : timestamp(false), formattime(false) {}
  bool timestamp :1;
  bool formattime :1;
} _TimTime__isset;

class TimTime : public virtual ::apache::thrift::TBase {
 public:

  TimTime(const TimTime&);
  TimTime& operator=(const TimTime&);
  TimTime() noexcept
          : timestamp(),
            formattime() {
  }

  virtual ~TimTime() noexcept;
  /**
   * 时间戳    (毫秒)
   */
  std::string timestamp;
  /**
   * 格式化时间
   */
  std::string formattime;

  _TimTime__isset __isset;

  void __set_timestamp(const std::string& val);

  void __set_formattime(const std::string& val);

  bool operator == (const TimTime & rhs) const
  {
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.formattime != rhs.__isset.formattime)
      return false;
    else if (__isset.formattime && !(formattime == rhs.formattime))
      return false;
    return true;
  }
  bool operator != (const TimTime &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimTime & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimTime &a, TimTime &b);

std::ostream& operator<<(std::ostream& out, const TimTime& obj);

typedef struct _TimArea__isset {
  _TimArea__isset() : country(false), province(false), city(false), extraList(false), extraMap(false) {}
  bool country :1;
  bool province :1;
  bool city :1;
  bool extraList :1;
  bool extraMap :1;
} _TimArea__isset;

class TimArea : public virtual ::apache::thrift::TBase {
 public:

  TimArea(const TimArea&);
  TimArea& operator=(const TimArea&);
  TimArea() noexcept
          : country(),
            province(),
            city() {
  }

  virtual ~TimArea() noexcept;
  /**
   * 国家
   */
  std::string country;
  /**
   * 省
   */
  std::string province;
  /**
   * 市
   */
  std::string city;
  /**
   * 附加信息：如区，镇，乡等
   */
  std::vector<TimNode>  extraList;
  std::map<std::string, std::string>  extraMap;

  _TimArea__isset __isset;

  void __set_country(const std::string& val);

  void __set_province(const std::string& val);

  void __set_city(const std::string& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimArea & rhs) const
  {
    if (__isset.country != rhs.__isset.country)
      return false;
    else if (__isset.country && !(country == rhs.country))
      return false;
    if (__isset.province != rhs.__isset.province)
      return false;
    else if (__isset.province && !(province == rhs.province))
      return false;
    if (__isset.city != rhs.__isset.city)
      return false;
    else if (__isset.city && !(city == rhs.city))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimArea &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimArea & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimArea &a, TimArea &b);

std::ostream& operator<<(std::ostream& out, const TimArea& obj);

typedef struct _Tid__isset {
  _Tid__isset() : domain(false), resource(false), type(false), extraList(false), extraMap(false) {}
  bool domain :1;
  bool resource :1;
  bool type :1;
  bool extraList :1;
  bool extraMap :1;
} _Tid__isset;

class Tid : public virtual ::apache::thrift::TBase {
 public:

  Tid(const Tid&);
  Tid& operator=(const Tid&);
  Tid() noexcept
      : name(),
        domain(),
        resource(),
        type() {
  }

  virtual ~Tid() noexcept;
  /**
   * 登陆名   用户登录号，房间号等
   */
  std::string name;
  /**
   * 域名 用于区分渠道等 appid，appsecret
   */
  std::string domain;
  /**
   * 系统 自行约定 如 ： 1IOS，2android，3H5，4WEB 等
   */
  std::string resource;
  /**
   * normal，group
   */
  std::string type;
  /**
   * 附加信息：如传递客户端信息 iphone6，xiaomi，huawei等
   */
  std::vector<TimNode>  extraList;
  std::map<std::string, std::string>  extraMap;

  _Tid__isset __isset;

  void __set_name(const std::string& val);

  void __set_domain(const std::string& val);

  void __set_resource(const std::string& val);

  void __set_type(const std::string& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const Tid & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.domain != rhs.__isset.domain)
      return false;
    else if (__isset.domain && !(domain == rhs.domain))
      return false;
    if (__isset.resource != rhs.__isset.resource)
      return false;
    else if (__isset.resource && !(resource == rhs.resource))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const Tid &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tid & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tid &a, Tid &b);

std::ostream& operator<<(std::ostream& out, const Tid& obj);

typedef struct _TimUserBean__isset {
  _TimUserBean__isset() : tid(false), nickname(false), remarkname(false), brithday(false), gender(false), headurl(false), area(false), headbyte(false), photoBytes(false), extraList(false), extraMap(false) {}
  bool tid :1;
  bool nickname :1;
  bool remarkname :1;
  bool brithday :1;
  bool gender :1;
  bool headurl :1;
  bool area :1;
  bool headbyte :1;
  bool photoBytes :1;
  bool extraList :1;
  bool extraMap :1;
} _TimUserBean__isset;

class TimUserBean : public virtual ::apache::thrift::TBase {
 public:

  TimUserBean(const TimUserBean&);
  TimUserBean& operator=(const TimUserBean&);
  TimUserBean() noexcept
              : nickname(),
                remarkname(),
                brithday(),
                gender(0),
                headurl(),
                headbyte() {
  }

  virtual ~TimUserBean() noexcept;
  /**
   * 用户bean
   */
  Tid tid;
  /**
   * 昵称
   */
  std::string nickname;
  /**
   * 备注名称
   */
  std::string remarkname;
  /**
   * 生日     2000-01-01
   */
  std::string brithday;
  /**
   * 性别  自行约定 如 ：  0不知，1男，2女
   */
  int16_t gender;
  /**
   * 头像地址 http://xxx.jpg
   */
  std::string headurl;
  /**
   * 地区
   */
  TimArea area;
  /**
   * 头像
   */
  std::string headbyte;
  /**
   * 其他图片
   */
  std::vector<std::string>  photoBytes;
  /**
   * 扩展字段
   */
  std::vector<TimNode>  extraList;
  std::map<std::string, std::string>  extraMap;

  _TimUserBean__isset __isset;

  void __set_tid(const Tid& val);

  void __set_nickname(const std::string& val);

  void __set_remarkname(const std::string& val);

  void __set_brithday(const std::string& val);

  void __set_gender(const int16_t val);

  void __set_headurl(const std::string& val);

  void __set_area(const TimArea& val);

  void __set_headbyte(const std::string& val);

  void __set_photoBytes(const std::vector<std::string> & val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimUserBean & rhs) const
  {
    if (__isset.tid != rhs.__isset.tid)
      return false;
    else if (__isset.tid && !(tid == rhs.tid))
      return false;
    if (__isset.nickname != rhs.__isset.nickname)
      return false;
    else if (__isset.nickname && !(nickname == rhs.nickname))
      return false;
    if (__isset.remarkname != rhs.__isset.remarkname)
      return false;
    else if (__isset.remarkname && !(remarkname == rhs.remarkname))
      return false;
    if (__isset.brithday != rhs.__isset.brithday)
      return false;
    else if (__isset.brithday && !(brithday == rhs.brithday))
      return false;
    if (__isset.gender != rhs.__isset.gender)
      return false;
    else if (__isset.gender && !(gender == rhs.gender))
      return false;
    if (__isset.headurl != rhs.__isset.headurl)
      return false;
    else if (__isset.headurl && !(headurl == rhs.headurl))
      return false;
    if (__isset.area != rhs.__isset.area)
      return false;
    else if (__isset.area && !(area == rhs.area))
      return false;
    if (__isset.headbyte != rhs.__isset.headbyte)
      return false;
    else if (__isset.headbyte && !(headbyte == rhs.headbyte))
      return false;
    if (__isset.photoBytes != rhs.__isset.photoBytes)
      return false;
    else if (__isset.photoBytes && !(photoBytes == rhs.photoBytes))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimUserBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimUserBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimUserBean &a, TimUserBean &b);

std::ostream& operator<<(std::ostream& out, const TimUserBean& obj);

typedef struct _TimRoom__isset {
  _TimRoom__isset() : tid(false), founderTid(false), HostsTid(false), membersTid(false), headurl(false), roomName(false), desc(false), createTime(false), extraList(false), extraMap(false) {}
  bool tid :1;
  bool founderTid :1;
  bool HostsTid :1;
  bool membersTid :1;
  bool headurl :1;
  bool roomName :1;
  bool desc :1;
  bool createTime :1;
  bool extraList :1;
  bool extraMap :1;
} _TimRoom__isset;

class TimRoom : public virtual ::apache::thrift::TBase {
 public:

  TimRoom(const TimRoom&);
  TimRoom& operator=(const TimRoom&);
  TimRoom() noexcept
          : headurl(),
            roomName(),
            desc() {
  }

  virtual ~TimRoom() noexcept;
  /**
   * 房间Tid
   */
  Tid tid;
  /**
   * 创建人Tid
   */
  Tid founderTid;
  /**
   * 主持人Tid
   */
  std::vector<Tid>  HostsTid;
  /**
   * memberTid
   */
  std::vector<Tid>  membersTid;
  /**
   * 头像地址 http://xxx.jpg
   */
  std::string headurl;
  /**
   * 房间名称
   */
  std::string roomName;
  /**
   * 房间说明
   */
  std::string desc;
  /**
   * 房间创建时间
   */
  TimTime createTime;
  /**
   * 扩展字段
   */
  std::vector<TimNode>  extraList;
  std::map<std::string, std::string>  extraMap;

  _TimRoom__isset __isset;

  void __set_tid(const Tid& val);

  void __set_founderTid(const Tid& val);

  void __set_HostsTid(const std::vector<Tid> & val);

  void __set_membersTid(const std::vector<Tid> & val);

  void __set_headurl(const std::string& val);

  void __set_roomName(const std::string& val);

  void __set_desc(const std::string& val);

  void __set_createTime(const TimTime& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimRoom & rhs) const
  {
    if (__isset.tid != rhs.__isset.tid)
      return false;
    else if (__isset.tid && !(tid == rhs.tid))
      return false;
    if (__isset.founderTid != rhs.__isset.founderTid)
      return false;
    else if (__isset.founderTid && !(founderTid == rhs.founderTid))
      return false;
    if (__isset.HostsTid != rhs.__isset.HostsTid)
      return false;
    else if (__isset.HostsTid && !(HostsTid == rhs.HostsTid))
      return false;
    if (__isset.membersTid != rhs.__isset.membersTid)
      return false;
    else if (__isset.membersTid && !(membersTid == rhs.membersTid))
      return false;
    if (__isset.headurl != rhs.__isset.headurl)
      return false;
    else if (__isset.headurl && !(headurl == rhs.headurl))
      return false;
    if (__isset.roomName != rhs.__isset.roomName)
      return false;
    else if (__isset.roomName && !(roomName == rhs.roomName))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    if (__isset.createTime != rhs.__isset.createTime)
      return false;
    else if (__isset.createTime && !(createTime == rhs.createTime))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimRoom &a, TimRoom &b);

std::ostream& operator<<(std::ostream& out, const TimRoom& obj);

typedef struct _TimPBean__isset {
  _TimPBean__isset() : fromTid(false), toTid(false), status(false), type(false), priority(false), show(false), leaguerTid(false), extraList(false), error(false), extraMap(false) {}
  bool fromTid :1;
  bool toTid :1;
  bool status :1;
  bool type :1;
  bool priority :1;
  bool show :1;
  bool leaguerTid :1;
  bool extraList :1;
  bool error :1;
  bool extraMap :1;
} _TimPBean__isset;

class TimPBean : public virtual ::apache::thrift::TBase {
 public:

  TimPBean(const TimPBean&);
  TimPBean& operator=(const TimPBean&);
  TimPBean() noexcept
           : threadId(),
             status(),
             type(),
             priority(0),
             show() {
  }

  virtual ~TimPBean() noexcept;
  /**
   * 标识
   */
  std::string threadId;
  Tid fromTid;
  Tid toTid;
  /**
   * subscribe：订阅其他用户的状态  probe：请求获取其他用户的状态  unavailable：不可用，离线（offline）状态
   */
  std::string status;
  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  std::string type;
  /**
   * 优先权 0 。高优先级的resource能接受发送到bare JID的消息，低优先级的resource不能
   */
  int32_t priority;
  /**
   * chat：聊天中  away：暂时离开   xa：eXtend Away，长时间离开   dnd：勿打扰   online:在线   offline:离线
   */
  std::string show;
  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  Tid leaguerTid;
  /**
   * 扩展字段
   */
  std::vector<TimNode>  extraList;
  /**
   * 错误码
   */
  TimError error;
  std::map<std::string, std::string>  extraMap;

  _TimPBean__isset __isset;

  void __set_threadId(const std::string& val);

  void __set_fromTid(const Tid& val);

  void __set_toTid(const Tid& val);

  void __set_status(const std::string& val);

  void __set_type(const std::string& val);

  void __set_priority(const int32_t val);

  void __set_show(const std::string& val);

  void __set_leaguerTid(const Tid& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_error(const TimError& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimPBean & rhs) const
  {
    if (!(threadId == rhs.threadId))
      return false;
    if (__isset.fromTid != rhs.__isset.fromTid)
      return false;
    else if (__isset.fromTid && !(fromTid == rhs.fromTid))
      return false;
    if (__isset.toTid != rhs.__isset.toTid)
      return false;
    else if (__isset.toTid && !(toTid == rhs.toTid))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.priority != rhs.__isset.priority)
      return false;
    else if (__isset.priority && !(priority == rhs.priority))
      return false;
    if (__isset.show != rhs.__isset.show)
      return false;
    else if (__isset.show && !(show == rhs.show))
      return false;
    if (__isset.leaguerTid != rhs.__isset.leaguerTid)
      return false;
    else if (__isset.leaguerTid && !(leaguerTid == rhs.leaguerTid))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimPBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimPBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimPBean &a, TimPBean &b);

std::ostream& operator<<(std::ostream& out, const TimPBean& obj);

typedef struct _TimMBean__isset {
  _TimMBean__isset() : mid(false), fromTid(false), toTid(false), body(false), type(false), msgType(false), offline(false), leaguerTid(false), extraList(false), timestamp(false), error(false), extraMap(false), readstatus(false) {}
  bool mid :1;
  bool fromTid :1;
  bool toTid :1;
  bool body :1;
  bool type :1;
  bool msgType :1;
  bool offline :1;
  bool leaguerTid :1;
  bool extraList :1;
  bool timestamp :1;
  bool error :1;
  bool extraMap :1;
  bool readstatus :1;
} _TimMBean__isset;

class TimMBean : public virtual ::apache::thrift::TBase {
 public:

  TimMBean(const TimMBean&);
  TimMBean& operator=(const TimMBean&);
  TimMBean() noexcept
           : threadId(),
             mid(),
             body(),
             type(),
             msgType(0),
             timestamp(),
             readstatus(0) {
  }

  virtual ~TimMBean() noexcept;
  /**
   * 线程id
   */
  std::string threadId;
  /**
   * 消息id号
   */
  std::string mid;
  /**
   * 来源Tid
   */
  Tid fromTid;
  /**
   * 目标Tid
   */
  Tid toTid;
  /**
   * 信息内容
   */
  std::string body;
  /**
   * normal：类似于email，主要特点是不要求响应；
   * chat：类似于qq里的好友即时聊天，主要特点是实时通讯；
   * groupchat：类似于聊天室里的群聊；
   * headline：用于发送alert和notification；
   * error：如果发送message出错，发现错误的实体会用这个类别来通知发送者出错了；
   */
  std::string type;
  /**
   * 消息类型  1 文字 2 图片 3 语音 4视频 5混合
   */
  int16_t msgType;
  /**
   * 是否离线信息
   */
  TimTime offline;
  /**
   * 成员Tid   群聊时信息发送者Tid
   */
  Tid leaguerTid;
  /**
   * 扩展字段
   */
  std::vector<TimNode>  extraList;
  /**
   * 服务器发送信息时间戳(毫秒)
   */
  std::string timestamp;
  /**
   * 错误码
   */
  TimError error;
  std::map<std::string, std::string>  extraMap;
  /**
   * 0未读  1已读
   */
  int16_t readstatus;

  _TimMBean__isset __isset;

  void __set_threadId(const std::string& val);

  void __set_mid(const std::string& val);

  void __set_fromTid(const Tid& val);

  void __set_toTid(const Tid& val);

  void __set_body(const std::string& val);

  void __set_type(const std::string& val);

  void __set_msgType(const int16_t val);

  void __set_offline(const TimTime& val);

  void __set_leaguerTid(const Tid& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_timestamp(const std::string& val);

  void __set_error(const TimError& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  void __set_readstatus(const int16_t val);

  bool operator == (const TimMBean & rhs) const
  {
    if (!(threadId == rhs.threadId))
      return false;
    if (__isset.mid != rhs.__isset.mid)
      return false;
    else if (__isset.mid && !(mid == rhs.mid))
      return false;
    if (__isset.fromTid != rhs.__isset.fromTid)
      return false;
    else if (__isset.fromTid && !(fromTid == rhs.fromTid))
      return false;
    if (__isset.toTid != rhs.__isset.toTid)
      return false;
    else if (__isset.toTid && !(toTid == rhs.toTid))
      return false;
    if (__isset.body != rhs.__isset.body)
      return false;
    else if (__isset.body && !(body == rhs.body))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.msgType != rhs.__isset.msgType)
      return false;
    else if (__isset.msgType && !(msgType == rhs.msgType))
      return false;
    if (__isset.offline != rhs.__isset.offline)
      return false;
    else if (__isset.offline && !(offline == rhs.offline))
      return false;
    if (__isset.leaguerTid != rhs.__isset.leaguerTid)
      return false;
    else if (__isset.leaguerTid && !(leaguerTid == rhs.leaguerTid))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    if (__isset.readstatus != rhs.__isset.readstatus)
      return false;
    else if (__isset.readstatus && !(readstatus == rhs.readstatus))
      return false;
    return true;
  }
  bool operator != (const TimMBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimMBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimMBean &a, TimMBean &b);

std::ostream& operator<<(std::ostream& out, const TimMBean& obj);

typedef struct _TimIqBean__isset {
  _TimIqBean__isset() : fromTid(false), toTid(false), type(false), extraList(false), error(false), extraMap(false) {}
  bool fromTid :1;
  bool toTid :1;
  bool type :1;
  bool extraList :1;
  bool error :1;
  bool extraMap :1;
} _TimIqBean__isset;

class TimIqBean : public virtual ::apache::thrift::TBase {
 public:

  TimIqBean(const TimIqBean&);
  TimIqBean& operator=(const TimIqBean&);
  TimIqBean() noexcept
            : threadId(),
              type() {
  }

  virtual ~TimIqBean() noexcept;
  /**
   * 线程id
   */
  std::string threadId;
  Tid fromTid;
  Tid toTid;
  /**
   * Get :获取当前域值。类似于http get方法
   * Set :设置或替换get查询的值。类似于http put方法。
   * Result :说明成功的响应了先前的查询。类似于http状态码200。
   * Error: 查询和响应中出现的错误。
   */
  std::string type;
  /**
   * 扩展字段
   */
  std::vector<TimNode>  extraList;
  /**
   * 错误码
   */
  TimError error;
  std::map<std::string, std::string>  extraMap;

  _TimIqBean__isset __isset;

  void __set_threadId(const std::string& val);

  void __set_fromTid(const Tid& val);

  void __set_toTid(const Tid& val);

  void __set_type(const std::string& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_error(const TimError& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimIqBean & rhs) const
  {
    if (!(threadId == rhs.threadId))
      return false;
    if (__isset.fromTid != rhs.__isset.fromTid)
      return false;
    else if (__isset.fromTid && !(fromTid == rhs.fromTid))
      return false;
    if (__isset.toTid != rhs.__isset.toTid)
      return false;
    else if (__isset.toTid && !(toTid == rhs.toTid))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimIqBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimIqBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimIqBean &a, TimIqBean &b);

std::ostream& operator<<(std::ostream& out, const TimIqBean& obj);

typedef struct _TimRoster__isset {
  _TimRoster__isset() : name(false), extraMap(false) {}
  bool name :1;
  bool extraMap :1;
} _TimRoster__isset;

class TimRoster : public virtual ::apache::thrift::TBase {
 public:

  TimRoster(const TimRoster&);
  TimRoster& operator=(const TimRoster&);
  TimRoster() noexcept
            : subscription(),
              name() {
  }

  virtual ~TimRoster() noexcept;
  /**
   * none表示用户和contact之前没有任何的关系（虽然在server的buddy list中存在）
   * to表示用户能看到contact的presence，但是contact看不到用户的Presence
   * from和to的含义相反，指用户看不到contact的presence，但是contact可以看到
   * both表示相关之间都能看到对方的presence
   */
  std::string subscription;
  Tid tid;
  /**
   * 用户名
   */
  std::string name;
  std::map<std::string, std::string>  extraMap;

  _TimRoster__isset __isset;

  void __set_subscription(const std::string& val);

  void __set_tid(const Tid& val);

  void __set_name(const std::string& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimRoster & rhs) const
  {
    if (!(subscription == rhs.subscription))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimRoster &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimRoster & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimRoster &a, TimRoster &b);

std::ostream& operator<<(std::ostream& out, const TimRoster& obj);

typedef struct _TimRemoteUserBean__isset {
  _TimRemoteUserBean__isset() : error(false), ub(false), extraMap(false) {}
  bool error :1;
  bool ub :1;
  bool extraMap :1;
} _TimRemoteUserBean__isset;

class TimRemoteUserBean : public virtual ::apache::thrift::TBase {
 public:

  TimRemoteUserBean(const TimRemoteUserBean&);
  TimRemoteUserBean& operator=(const TimRemoteUserBean&);
  TimRemoteUserBean() noexcept {
  }

  virtual ~TimRemoteUserBean() noexcept;
  /**
   * 错误码
   */
  TimError error;
  /**
   * 远程用户信息
   */
  TimUserBean ub;
  std::map<std::string, std::string>  extraMap;

  _TimRemoteUserBean__isset __isset;

  void __set_error(const TimError& val);

  void __set_ub(const TimUserBean& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimRemoteUserBean & rhs) const
  {
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.ub != rhs.__isset.ub)
      return false;
    else if (__isset.ub && !(ub == rhs.ub))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimRemoteUserBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimRemoteUserBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimRemoteUserBean &a, TimRemoteUserBean &b);

std::ostream& operator<<(std::ostream& out, const TimRemoteUserBean& obj);

typedef struct _TimRemoteRoom__isset {
  _TimRemoteRoom__isset() : error(false), room(false), extraMap(false) {}
  bool error :1;
  bool room :1;
  bool extraMap :1;
} _TimRemoteRoom__isset;

class TimRemoteRoom : public virtual ::apache::thrift::TBase {
 public:

  TimRemoteRoom(const TimRemoteRoom&);
  TimRemoteRoom& operator=(const TimRemoteRoom&);
  TimRemoteRoom() noexcept {
  }

  virtual ~TimRemoteRoom() noexcept;
  /**
   * 错误码
   */
  TimError error;
  /**
   * 远程房间信息
   */
  TimRoom room;
  std::map<std::string, std::string>  extraMap;

  _TimRemoteRoom__isset __isset;

  void __set_error(const TimError& val);

  void __set_room(const TimRoom& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimRemoteRoom & rhs) const
  {
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.room != rhs.__isset.room)
      return false;
    else if (__isset.room && !(room == rhs.room))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimRemoteRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimRemoteRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimRemoteRoom &a, TimRemoteRoom &b);

std::ostream& operator<<(std::ostream& out, const TimRemoteRoom& obj);

typedef struct _TimResponseBean__isset {
  _TimResponseBean__isset() : threadId(false), error(false), extraList(false), extraMap(false) {}
  bool threadId :1;
  bool error :1;
  bool extraList :1;
  bool extraMap :1;
} _TimResponseBean__isset;

class TimResponseBean : public virtual ::apache::thrift::TBase {
 public:

  TimResponseBean(const TimResponseBean&);
  TimResponseBean& operator=(const TimResponseBean&);
  TimResponseBean() noexcept
                  : threadId() {
  }

  virtual ~TimResponseBean() noexcept;
  std::string threadId;
  /**
   * 错误码
   */
  TimError error;
  /**
   * 附加信息
   */
  std::vector<TimNode>  extraList;
  std::map<std::string, std::string>  extraMap;

  _TimResponseBean__isset __isset;

  void __set_threadId(const std::string& val);

  void __set_error(const TimError& val);

  void __set_extraList(const std::vector<TimNode> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimResponseBean & rhs) const
  {
    if (__isset.threadId != rhs.__isset.threadId)
      return false;
    else if (__isset.threadId && !(threadId == rhs.threadId))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.extraList != rhs.__isset.extraList)
      return false;
    else if (__isset.extraList && !(extraList == rhs.extraList))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimResponseBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimResponseBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimResponseBean &a, TimResponseBean &b);

std::ostream& operator<<(std::ostream& out, const TimResponseBean& obj);

typedef struct _TimSock5Bean__isset {
  _TimSock5Bean__isset() : extraMap(false) {}
  bool extraMap :1;
} _TimSock5Bean__isset;

class TimSock5Bean : public virtual ::apache::thrift::TBase {
 public:

  TimSock5Bean(const TimSock5Bean&);
  TimSock5Bean& operator=(const TimSock5Bean&);
  TimSock5Bean() noexcept
               : addr(),
                 port(0),
                 transport(0),
                 pubId() {
  }

  virtual ~TimSock5Bean() noexcept;
  Tid fromTid;
  Tid toTid;
  /**
   * ip地址
   */
  std::string addr;
  /**
   * 端口
   */
  int32_t port;
  /**
   * 传输类型  1:tcp 2:udp
   */
  int16_t transport;
  /**
   * 发布id 通过发布id 可以连接两个发布id相同的用户
   */
  std::string pubId;
  std::map<std::string, std::string>  extraMap;

  _TimSock5Bean__isset __isset;

  void __set_fromTid(const Tid& val);

  void __set_toTid(const Tid& val);

  void __set_addr(const std::string& val);

  void __set_port(const int32_t val);

  void __set_transport(const int16_t val);

  void __set_pubId(const std::string& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimSock5Bean & rhs) const
  {
    if (!(fromTid == rhs.fromTid))
      return false;
    if (!(toTid == rhs.toTid))
      return false;
    if (!(addr == rhs.addr))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(transport == rhs.transport))
      return false;
    if (!(pubId == rhs.pubId))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimSock5Bean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimSock5Bean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimSock5Bean &a, TimSock5Bean &b);

std::ostream& operator<<(std::ostream& out, const TimSock5Bean& obj);

typedef struct _TimSock5Bytes__isset {
  _TimSock5Bytes__isset() : extraMap(false) {}
  bool extraMap :1;
} _TimSock5Bytes__isset;

class TimSock5Bytes : public virtual ::apache::thrift::TBase {
 public:

  TimSock5Bytes(const TimSock5Bytes&);
  TimSock5Bytes& operator=(const TimSock5Bytes&);
  TimSock5Bytes() noexcept
                : pubId(),
                  index(0) {
  }

  virtual ~TimSock5Bytes() noexcept;
  /**
   * 发布id
   */
  std::string pubId;
  /**
   * 序号数据块
   */
  int32_t index;
  /**
   * 数据块
   */
  std::vector<std::string>  bytes;
  std::map<std::string, std::string>  extraMap;

  _TimSock5Bytes__isset __isset;

  void __set_pubId(const std::string& val);

  void __set_index(const int32_t val);

  void __set_bytes(const std::vector<std::string> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimSock5Bytes & rhs) const
  {
    if (!(pubId == rhs.pubId))
      return false;
    if (!(index == rhs.index))
      return false;
    if (!(bytes == rhs.bytes))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimSock5Bytes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimSock5Bytes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimSock5Bytes &a, TimSock5Bytes &b);

std::ostream& operator<<(std::ostream& out, const TimSock5Bytes& obj);

typedef struct _TimPage__isset {
  _TimPage__isset() : fromTimeStamp(false), toTimeStamp(false), limitCount(false), extraMap(false) {}
  bool fromTimeStamp :1;
  bool toTimeStamp :1;
  bool limitCount :1;
  bool extraMap :1;
} _TimPage__isset;

class TimPage : public virtual ::apache::thrift::TBase {
 public:

  TimPage(const TimPage&);
  TimPage& operator=(const TimPage&);
  TimPage() noexcept
          : fromTimeStamp(),
            toTimeStamp(),
            limitCount(0) {
  }

  virtual ~TimPage() noexcept;
  /**
   * 时间上
   */
  std::string fromTimeStamp;
  /**
   * 时间下
   */
  std::string toTimeStamp;
  /**
   * 条数
   */
  int32_t limitCount;
  std::map<std::string, std::string>  extraMap;

  _TimPage__isset __isset;

  void __set_fromTimeStamp(const std::string& val);

  void __set_toTimeStamp(const std::string& val);

  void __set_limitCount(const int32_t val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimPage & rhs) const
  {
    if (__isset.fromTimeStamp != rhs.__isset.fromTimeStamp)
      return false;
    else if (__isset.fromTimeStamp && !(fromTimeStamp == rhs.fromTimeStamp))
      return false;
    if (__isset.toTimeStamp != rhs.__isset.toTimeStamp)
      return false;
    else if (__isset.toTimeStamp && !(toTimeStamp == rhs.toTimeStamp))
      return false;
    if (__isset.limitCount != rhs.__isset.limitCount)
      return false;
    else if (__isset.limitCount && !(limitCount == rhs.limitCount))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimPage &a, TimPage &b);

std::ostream& operator<<(std::ostream& out, const TimPage& obj);

typedef struct _TimMessageIq__isset {
  _TimMessageIq__isset() : tidlist(false), timPage(false), midlist(false), extraMap(false) {}
  bool tidlist :1;
  bool timPage :1;
  bool midlist :1;
  bool extraMap :1;
} _TimMessageIq__isset;

class TimMessageIq : public virtual ::apache::thrift::TBase {
 public:

  TimMessageIq(const TimMessageIq&);
  TimMessageIq& operator=(const TimMessageIq&);
  TimMessageIq() noexcept {
  }

  virtual ~TimMessageIq() noexcept;
  /**
   * tid集合
   */
  std::vector<std::string>  tidlist;
  /**
   * 分页
   */
  TimPage timPage;
  /**
   * mid集合
   */
  std::vector<std::string>  midlist;
  std::map<std::string, std::string>  extraMap;

  _TimMessageIq__isset __isset;

  void __set_tidlist(const std::vector<std::string> & val);

  void __set_timPage(const TimPage& val);

  void __set_midlist(const std::vector<std::string> & val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimMessageIq & rhs) const
  {
    if (__isset.tidlist != rhs.__isset.tidlist)
      return false;
    else if (__isset.tidlist && !(tidlist == rhs.tidlist))
      return false;
    if (__isset.timPage != rhs.__isset.timPage)
      return false;
    else if (__isset.timPage && !(timPage == rhs.timPage))
      return false;
    if (__isset.midlist != rhs.__isset.midlist)
      return false;
    else if (__isset.midlist && !(midlist == rhs.midlist))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimMessageIq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimMessageIq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimMessageIq &a, TimMessageIq &b);

std::ostream& operator<<(std::ostream& out, const TimMessageIq& obj);

typedef struct _TimAuth__isset {
  _TimAuth__isset() : domain(false), username(false), pwd(false) {}
  bool domain :1;
  bool username :1;
  bool pwd :1;
} _TimAuth__isset;

class TimAuth : public virtual ::apache::thrift::TBase {
 public:

  TimAuth(const TimAuth&);
  TimAuth& operator=(const TimAuth&);
  TimAuth() noexcept
          : domain(),
            username(),
            pwd() {
  }

  virtual ~TimAuth() noexcept;
  /**
   * 域名
   */
  std::string domain;
  /**
   * 用户名
   */
  std::string username;
  /**
   * 密码
   */
  std::string pwd;

  _TimAuth__isset __isset;

  void __set_domain(const std::string& val);

  void __set_username(const std::string& val);

  void __set_pwd(const std::string& val);

  bool operator == (const TimAuth & rhs) const
  {
    if (__isset.domain != rhs.__isset.domain)
      return false;
    else if (__isset.domain && !(domain == rhs.domain))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.pwd != rhs.__isset.pwd)
      return false;
    else if (__isset.pwd && !(pwd == rhs.pwd))
      return false;
    return true;
  }
  bool operator != (const TimAuth &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimAuth & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimAuth &a, TimAuth &b);

std::ostream& operator<<(std::ostream& out, const TimAuth& obj);

typedef struct _TimMBeanList__isset {
  _TimMBeanList__isset() : timMBeanList(false), reqType(false), extraMap(false) {}
  bool timMBeanList :1;
  bool reqType :1;
  bool extraMap :1;
} _TimMBeanList__isset;

class TimMBeanList : public virtual ::apache::thrift::TBase {
 public:

  TimMBeanList(const TimMBeanList&);
  TimMBeanList& operator=(const TimMBeanList&);
  TimMBeanList() noexcept
               : threadId(),
                 reqType() {
  }

  virtual ~TimMBeanList() noexcept;
  std::string threadId;
  /**
   * 信息列表
   */
  std::vector<TimMBean>  timMBeanList;
  /**
   * 类型
   */
  std::string reqType;
  std::map<std::string, std::string>  extraMap;

  _TimMBeanList__isset __isset;

  void __set_threadId(const std::string& val);

  void __set_timMBeanList(const std::vector<TimMBean> & val);

  void __set_reqType(const std::string& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimMBeanList & rhs) const
  {
    if (!(threadId == rhs.threadId))
      return false;
    if (__isset.timMBeanList != rhs.__isset.timMBeanList)
      return false;
    else if (__isset.timMBeanList && !(timMBeanList == rhs.timMBeanList))
      return false;
    if (__isset.reqType != rhs.__isset.reqType)
      return false;
    else if (__isset.reqType && !(reqType == rhs.reqType))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimMBeanList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimMBeanList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimMBeanList &a, TimMBeanList &b);

std::ostream& operator<<(std::ostream& out, const TimMBeanList& obj);

typedef struct _TimPBeanList__isset {
  _TimPBeanList__isset() : timPBeanList(false), reqType(false), extraMap(false) {}
  bool timPBeanList :1;
  bool reqType :1;
  bool extraMap :1;
} _TimPBeanList__isset;

class TimPBeanList : public virtual ::apache::thrift::TBase {
 public:

  TimPBeanList(const TimPBeanList&);
  TimPBeanList& operator=(const TimPBeanList&);
  TimPBeanList() noexcept
               : threadId(),
                 reqType() {
  }

  virtual ~TimPBeanList() noexcept;
  std::string threadId;
  /**
   * 状态信息列表
   */
  std::vector<TimPBean>  timPBeanList;
  /**
   * 类型
   */
  std::string reqType;
  std::map<std::string, std::string>  extraMap;

  _TimPBeanList__isset __isset;

  void __set_threadId(const std::string& val);

  void __set_timPBeanList(const std::vector<TimPBean> & val);

  void __set_reqType(const std::string& val);

  void __set_extraMap(const std::map<std::string, std::string> & val);

  bool operator == (const TimPBeanList & rhs) const
  {
    if (!(threadId == rhs.threadId))
      return false;
    if (__isset.timPBeanList != rhs.__isset.timPBeanList)
      return false;
    else if (__isset.timPBeanList && !(timPBeanList == rhs.timPBeanList))
      return false;
    if (__isset.reqType != rhs.__isset.reqType)
      return false;
    else if (__isset.reqType && !(reqType == rhs.reqType))
      return false;
    if (__isset.extraMap != rhs.__isset.extraMap)
      return false;
    else if (__isset.extraMap && !(extraMap == rhs.extraMap))
      return false;
    return true;
  }
  bool operator != (const TimPBeanList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimPBeanList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimPBeanList &a, TimPBeanList &b);

std::ostream& operator<<(std::ostream& out, const TimPBeanList& obj);

typedef struct _TimPropertyBean__isset {
  _TimPropertyBean__isset() : threadId(false), interflow(false), tls(false) {}
  bool threadId :1;
  bool interflow :1;
  bool tls :1;
} _TimPropertyBean__isset;

class TimPropertyBean : public virtual ::apache::thrift::TBase {
 public:

  TimPropertyBean(const TimPropertyBean&);
  TimPropertyBean& operator=(const TimPropertyBean&);
  TimPropertyBean() noexcept
                  : threadId(),
                    interflow(),
                    tls() {
  }

  virtual ~TimPropertyBean() noexcept;
  std::string threadId;
  /**
   * 消息合流
   */
  std::string interflow;
  /**
   * tls
   */
  std::string tls;

  _TimPropertyBean__isset __isset;

  void __set_threadId(const std::string& val);

  void __set_interflow(const std::string& val);

  void __set_tls(const std::string& val);

  bool operator == (const TimPropertyBean & rhs) const
  {
    if (__isset.threadId != rhs.__isset.threadId)
      return false;
    else if (__isset.threadId && !(threadId == rhs.threadId))
      return false;
    if (__isset.interflow != rhs.__isset.interflow)
      return false;
    else if (__isset.interflow && !(interflow == rhs.interflow))
      return false;
    if (__isset.tls != rhs.__isset.tls)
      return false;
    else if (__isset.tls && !(tls == rhs.tls))
      return false;
    return true;
  }
  bool operator != (const TimPropertyBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimPropertyBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimPropertyBean &a, TimPropertyBean &b);

std::ostream& operator<<(std::ostream& out, const TimPropertyBean& obj);



#endif
