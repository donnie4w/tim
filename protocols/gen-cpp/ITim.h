/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ITim_H
#define ITim_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "tim_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ITimIf {
 public:
  virtual ~ITimIf() {}

  /**
   * 流程开始
   * 
   * @param param
   */
  virtual void timStream(const TimParam& param) = 0;

  /**
   * tls协议
   */
  virtual void timStarttls() = 0;

  /**
   * 登陆协议
   * 
   * @param tid
   * @param pwd
   */
  virtual void timLogin(const Tid& tid, const std::string& pwd) = 0;

  /**
   * 回执信息
   * 
   * @param ab
   */
  virtual void timAck(const TimAckBean& ab) = 0;

  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   */
  virtual void timPresence(const TimPBean& pbean) = 0;

  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   */
  virtual void timMessage(const TimMBean& mbean) = 0;

  /**
   * ping 心跳协议
   * 
   * @param threadId
   */
  virtual void timPing(const std::string& threadId) = 0;

  /**
   * 错误通知
   * 
   * @param e
   */
  virtual void timError(const TimError& e) = 0;

  /**
   * 登出协议
   */
  virtual void timLogout() = 0;

  /**
   * 注册协议
   * 
   * @param tid
   * @param auth
   */
  virtual void timRegist(const Tid& tid, const std::string& auth) = 0;

  /**
   * 花名册
   * 
   * @param roster
   */
  virtual void timRoser(const TimRoster& roster) = 0;

  /**
   * 发送信息或接收信息列表（合流）
   * 
   * @param mbeanList
   */
  virtual void timMessageList(const TimMBeanList& mbeanList) = 0;

  /**
   * 发送状态信息列表（合流）
   * 
   * @param pbeanList
   */
  virtual void timPresenceList(const TimPBeanList& pbeanList) = 0;

  /**
   * 信息请求 get请求数据 del删除
   * 
   * @param timMsgIq
   * @param iqType
   */
  virtual void timMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType) = 0;

  /**
   * 信息请求
   * 
   * @param mbean
   */
  virtual void timMessageResult(const TimMBean& mbean) = 0;

  /**
   * 用户协议属性请求
   * 
   * @param tpb
   */
  virtual void timProperty(const TimPropertyBean& tpb) = 0;

  /**
   * 请求远程验证信息
   * 
   * @param tid
   * @param pwd
   * @param auth
   */
  virtual void timRemoteUserAuth(TimRemoteUserBean& _return, const Tid& tid, const std::string& pwd, const TimAuth& auth) = 0;

  /**
   * 请求远程用户信息
   * 
   * @param tid
   * @param auth
   */
  virtual void timRemoteUserGet(TimRemoteUserBean& _return, const Tid& tid, const TimAuth& auth) = 0;

  /**
   * 编辑远程用户信息
   * 
   * @param tid
   * @param ub
   * @param auth
   */
  virtual void timRemoteUserEdit(TimRemoteUserBean& _return, const Tid& tid, const TimUserBean& ub, const TimAuth& auth) = 0;

  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   * @param auth
   */
  virtual void timResponsePresence(TimResponseBean& _return, const TimPBean& pbean, const TimAuth& auth) = 0;

  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   * @param auth
   */
  virtual void timResponseMessage(TimResponseBean& _return, const TimMBean& mbean, const TimAuth& auth) = 0;

  /**
   * 信息请求 get请求数据 del删除（辅助接口）
   * 
   * @param timMsgIq
   * @param iqType
   * @param auth
   */
  virtual void timResponseMessageIq(TimMBeanList& _return, const TimMessageIq& timMsgIq, const std::string& iqType, const TimAuth& auth) = 0;

  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbeanList
   * @param auth
   */
  virtual void timResponsePresenceList(TimResponseBean& _return, const TimPBeanList& pbeanList, const TimAuth& auth) = 0;

  /**
   * 发送信息或接收信息
   * 
   * @param mbeanList
   * @param auth
   */
  virtual void timResponseMessageList(TimResponseBean& _return, const TimMBeanList& mbeanList, const TimAuth& auth) = 0;
};

class ITimIfFactory {
 public:
  typedef ITimIf Handler;

  virtual ~ITimIfFactory() {}

  virtual ITimIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ITimIf* /* handler */) = 0;
  };

class ITimIfSingletonFactory : virtual public ITimIfFactory {
 public:
  ITimIfSingletonFactory(const ::std::shared_ptr<ITimIf>& iface) : iface_(iface) {}
  virtual ~ITimIfSingletonFactory() {}

  virtual ITimIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ITimIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ITimIf> iface_;
};

class ITimNull : virtual public ITimIf {
 public:
  virtual ~ITimNull() {}
  void timStream(const TimParam& /* param */) override {
    return;
  }
  void timStarttls() override {
    return;
  }
  void timLogin(const Tid& /* tid */, const std::string& /* pwd */) override {
    return;
  }
  void timAck(const TimAckBean& /* ab */) override {
    return;
  }
  void timPresence(const TimPBean& /* pbean */) override {
    return;
  }
  void timMessage(const TimMBean& /* mbean */) override {
    return;
  }
  void timPing(const std::string& /* threadId */) override {
    return;
  }
  void timError(const TimError& /* e */) override {
    return;
  }
  void timLogout() override {
    return;
  }
  void timRegist(const Tid& /* tid */, const std::string& /* auth */) override {
    return;
  }
  void timRoser(const TimRoster& /* roster */) override {
    return;
  }
  void timMessageList(const TimMBeanList& /* mbeanList */) override {
    return;
  }
  void timPresenceList(const TimPBeanList& /* pbeanList */) override {
    return;
  }
  void timMessageIq(const TimMessageIq& /* timMsgIq */, const std::string& /* iqType */) override {
    return;
  }
  void timMessageResult(const TimMBean& /* mbean */) override {
    return;
  }
  void timProperty(const TimPropertyBean& /* tpb */) override {
    return;
  }
  void timRemoteUserAuth(TimRemoteUserBean& /* _return */, const Tid& /* tid */, const std::string& /* pwd */, const TimAuth& /* auth */) override {
    return;
  }
  void timRemoteUserGet(TimRemoteUserBean& /* _return */, const Tid& /* tid */, const TimAuth& /* auth */) override {
    return;
  }
  void timRemoteUserEdit(TimRemoteUserBean& /* _return */, const Tid& /* tid */, const TimUserBean& /* ub */, const TimAuth& /* auth */) override {
    return;
  }
  void timResponsePresence(TimResponseBean& /* _return */, const TimPBean& /* pbean */, const TimAuth& /* auth */) override {
    return;
  }
  void timResponseMessage(TimResponseBean& /* _return */, const TimMBean& /* mbean */, const TimAuth& /* auth */) override {
    return;
  }
  void timResponseMessageIq(TimMBeanList& /* _return */, const TimMessageIq& /* timMsgIq */, const std::string& /* iqType */, const TimAuth& /* auth */) override {
    return;
  }
  void timResponsePresenceList(TimResponseBean& /* _return */, const TimPBeanList& /* pbeanList */, const TimAuth& /* auth */) override {
    return;
  }
  void timResponseMessageList(TimResponseBean& /* _return */, const TimMBeanList& /* mbeanList */, const TimAuth& /* auth */) override {
    return;
  }
};

typedef struct _ITim_timStream_args__isset {
  _ITim_timStream_args__isset() : param(false) {}
  bool param :1;
} _ITim_timStream_args__isset;

class ITim_timStream_args {
 public:

  ITim_timStream_args(const ITim_timStream_args&);
  ITim_timStream_args& operator=(const ITim_timStream_args&);
  ITim_timStream_args() noexcept {
  }

  virtual ~ITim_timStream_args() noexcept;
  TimParam param;

  _ITim_timStream_args__isset __isset;

  void __set_param(const TimParam& val);

  bool operator == (const ITim_timStream_args & rhs) const
  {
    if (!(param == rhs.param))
      return false;
    return true;
  }
  bool operator != (const ITim_timStream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timStream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timStream_pargs {
 public:


  virtual ~ITim_timStream_pargs() noexcept;
  const TimParam* param;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timStarttls_args {
 public:

  ITim_timStarttls_args(const ITim_timStarttls_args&) noexcept;
  ITim_timStarttls_args& operator=(const ITim_timStarttls_args&) noexcept;
  ITim_timStarttls_args() noexcept {
  }

  virtual ~ITim_timStarttls_args() noexcept;

  bool operator == (const ITim_timStarttls_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ITim_timStarttls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timStarttls_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timStarttls_pargs {
 public:


  virtual ~ITim_timStarttls_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timLogin_args__isset {
  _ITim_timLogin_args__isset() : tid(false), pwd(false) {}
  bool tid :1;
  bool pwd :1;
} _ITim_timLogin_args__isset;

class ITim_timLogin_args {
 public:

  ITim_timLogin_args(const ITim_timLogin_args&);
  ITim_timLogin_args& operator=(const ITim_timLogin_args&);
  ITim_timLogin_args() noexcept
                     : pwd() {
  }

  virtual ~ITim_timLogin_args() noexcept;
  Tid tid;
  std::string pwd;

  _ITim_timLogin_args__isset __isset;

  void __set_tid(const Tid& val);

  void __set_pwd(const std::string& val);

  bool operator == (const ITim_timLogin_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(pwd == rhs.pwd))
      return false;
    return true;
  }
  bool operator != (const ITim_timLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timLogin_pargs {
 public:


  virtual ~ITim_timLogin_pargs() noexcept;
  const Tid* tid;
  const std::string* pwd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timAck_args__isset {
  _ITim_timAck_args__isset() : ab(false) {}
  bool ab :1;
} _ITim_timAck_args__isset;

class ITim_timAck_args {
 public:

  ITim_timAck_args(const ITim_timAck_args&);
  ITim_timAck_args& operator=(const ITim_timAck_args&);
  ITim_timAck_args() noexcept {
  }

  virtual ~ITim_timAck_args() noexcept;
  TimAckBean ab;

  _ITim_timAck_args__isset __isset;

  void __set_ab(const TimAckBean& val);

  bool operator == (const ITim_timAck_args & rhs) const
  {
    if (!(ab == rhs.ab))
      return false;
    return true;
  }
  bool operator != (const ITim_timAck_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timAck_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timAck_pargs {
 public:


  virtual ~ITim_timAck_pargs() noexcept;
  const TimAckBean* ab;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timPresence_args__isset {
  _ITim_timPresence_args__isset() : pbean(false) {}
  bool pbean :1;
} _ITim_timPresence_args__isset;

class ITim_timPresence_args {
 public:

  ITim_timPresence_args(const ITim_timPresence_args&);
  ITim_timPresence_args& operator=(const ITim_timPresence_args&);
  ITim_timPresence_args() noexcept {
  }

  virtual ~ITim_timPresence_args() noexcept;
  TimPBean pbean;

  _ITim_timPresence_args__isset __isset;

  void __set_pbean(const TimPBean& val);

  bool operator == (const ITim_timPresence_args & rhs) const
  {
    if (!(pbean == rhs.pbean))
      return false;
    return true;
  }
  bool operator != (const ITim_timPresence_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timPresence_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timPresence_pargs {
 public:


  virtual ~ITim_timPresence_pargs() noexcept;
  const TimPBean* pbean;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timMessage_args__isset {
  _ITim_timMessage_args__isset() : mbean(false) {}
  bool mbean :1;
} _ITim_timMessage_args__isset;

class ITim_timMessage_args {
 public:

  ITim_timMessage_args(const ITim_timMessage_args&);
  ITim_timMessage_args& operator=(const ITim_timMessage_args&);
  ITim_timMessage_args() noexcept {
  }

  virtual ~ITim_timMessage_args() noexcept;
  TimMBean mbean;

  _ITim_timMessage_args__isset __isset;

  void __set_mbean(const TimMBean& val);

  bool operator == (const ITim_timMessage_args & rhs) const
  {
    if (!(mbean == rhs.mbean))
      return false;
    return true;
  }
  bool operator != (const ITim_timMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timMessage_pargs {
 public:


  virtual ~ITim_timMessage_pargs() noexcept;
  const TimMBean* mbean;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timPing_args__isset {
  _ITim_timPing_args__isset() : threadId(false) {}
  bool threadId :1;
} _ITim_timPing_args__isset;

class ITim_timPing_args {
 public:

  ITim_timPing_args(const ITim_timPing_args&);
  ITim_timPing_args& operator=(const ITim_timPing_args&);
  ITim_timPing_args() noexcept
                    : threadId() {
  }

  virtual ~ITim_timPing_args() noexcept;
  std::string threadId;

  _ITim_timPing_args__isset __isset;

  void __set_threadId(const std::string& val);

  bool operator == (const ITim_timPing_args & rhs) const
  {
    if (!(threadId == rhs.threadId))
      return false;
    return true;
  }
  bool operator != (const ITim_timPing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timPing_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timPing_pargs {
 public:


  virtual ~ITim_timPing_pargs() noexcept;
  const std::string* threadId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timError_args__isset {
  _ITim_timError_args__isset() : e(false) {}
  bool e :1;
} _ITim_timError_args__isset;

class ITim_timError_args {
 public:

  ITim_timError_args(const ITim_timError_args&);
  ITim_timError_args& operator=(const ITim_timError_args&);
  ITim_timError_args() noexcept {
  }

  virtual ~ITim_timError_args() noexcept;
  TimError e;

  _ITim_timError_args__isset __isset;

  void __set_e(const TimError& val);

  bool operator == (const ITim_timError_args & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ITim_timError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timError_pargs {
 public:


  virtual ~ITim_timError_pargs() noexcept;
  const TimError* e;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timLogout_args {
 public:

  ITim_timLogout_args(const ITim_timLogout_args&) noexcept;
  ITim_timLogout_args& operator=(const ITim_timLogout_args&) noexcept;
  ITim_timLogout_args() noexcept {
  }

  virtual ~ITim_timLogout_args() noexcept;

  bool operator == (const ITim_timLogout_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ITim_timLogout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timLogout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timLogout_pargs {
 public:


  virtual ~ITim_timLogout_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRegist_args__isset {
  _ITim_timRegist_args__isset() : tid(false), auth(false) {}
  bool tid :1;
  bool auth :1;
} _ITim_timRegist_args__isset;

class ITim_timRegist_args {
 public:

  ITim_timRegist_args(const ITim_timRegist_args&);
  ITim_timRegist_args& operator=(const ITim_timRegist_args&);
  ITim_timRegist_args() noexcept
                      : auth() {
  }

  virtual ~ITim_timRegist_args() noexcept;
  Tid tid;
  std::string auth;

  _ITim_timRegist_args__isset __isset;

  void __set_tid(const Tid& val);

  void __set_auth(const std::string& val);

  bool operator == (const ITim_timRegist_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timRegist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRegist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timRegist_pargs {
 public:


  virtual ~ITim_timRegist_pargs() noexcept;
  const Tid* tid;
  const std::string* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRoser_args__isset {
  _ITim_timRoser_args__isset() : roster(false) {}
  bool roster :1;
} _ITim_timRoser_args__isset;

class ITim_timRoser_args {
 public:

  ITim_timRoser_args(const ITim_timRoser_args&);
  ITim_timRoser_args& operator=(const ITim_timRoser_args&);
  ITim_timRoser_args() noexcept {
  }

  virtual ~ITim_timRoser_args() noexcept;
  TimRoster roster;

  _ITim_timRoser_args__isset __isset;

  void __set_roster(const TimRoster& val);

  bool operator == (const ITim_timRoser_args & rhs) const
  {
    if (!(roster == rhs.roster))
      return false;
    return true;
  }
  bool operator != (const ITim_timRoser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRoser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timRoser_pargs {
 public:


  virtual ~ITim_timRoser_pargs() noexcept;
  const TimRoster* roster;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timMessageList_args__isset {
  _ITim_timMessageList_args__isset() : mbeanList(false) {}
  bool mbeanList :1;
} _ITim_timMessageList_args__isset;

class ITim_timMessageList_args {
 public:

  ITim_timMessageList_args(const ITim_timMessageList_args&);
  ITim_timMessageList_args& operator=(const ITim_timMessageList_args&);
  ITim_timMessageList_args() noexcept {
  }

  virtual ~ITim_timMessageList_args() noexcept;
  TimMBeanList mbeanList;

  _ITim_timMessageList_args__isset __isset;

  void __set_mbeanList(const TimMBeanList& val);

  bool operator == (const ITim_timMessageList_args & rhs) const
  {
    if (!(mbeanList == rhs.mbeanList))
      return false;
    return true;
  }
  bool operator != (const ITim_timMessageList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timMessageList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timMessageList_pargs {
 public:


  virtual ~ITim_timMessageList_pargs() noexcept;
  const TimMBeanList* mbeanList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timPresenceList_args__isset {
  _ITim_timPresenceList_args__isset() : pbeanList(false) {}
  bool pbeanList :1;
} _ITim_timPresenceList_args__isset;

class ITim_timPresenceList_args {
 public:

  ITim_timPresenceList_args(const ITim_timPresenceList_args&);
  ITim_timPresenceList_args& operator=(const ITim_timPresenceList_args&);
  ITim_timPresenceList_args() noexcept {
  }

  virtual ~ITim_timPresenceList_args() noexcept;
  TimPBeanList pbeanList;

  _ITim_timPresenceList_args__isset __isset;

  void __set_pbeanList(const TimPBeanList& val);

  bool operator == (const ITim_timPresenceList_args & rhs) const
  {
    if (!(pbeanList == rhs.pbeanList))
      return false;
    return true;
  }
  bool operator != (const ITim_timPresenceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timPresenceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timPresenceList_pargs {
 public:


  virtual ~ITim_timPresenceList_pargs() noexcept;
  const TimPBeanList* pbeanList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timMessageIq_args__isset {
  _ITim_timMessageIq_args__isset() : timMsgIq(false), iqType(false) {}
  bool timMsgIq :1;
  bool iqType :1;
} _ITim_timMessageIq_args__isset;

class ITim_timMessageIq_args {
 public:

  ITim_timMessageIq_args(const ITim_timMessageIq_args&);
  ITim_timMessageIq_args& operator=(const ITim_timMessageIq_args&);
  ITim_timMessageIq_args() noexcept
                         : iqType() {
  }

  virtual ~ITim_timMessageIq_args() noexcept;
  TimMessageIq timMsgIq;
  std::string iqType;

  _ITim_timMessageIq_args__isset __isset;

  void __set_timMsgIq(const TimMessageIq& val);

  void __set_iqType(const std::string& val);

  bool operator == (const ITim_timMessageIq_args & rhs) const
  {
    if (!(timMsgIq == rhs.timMsgIq))
      return false;
    if (!(iqType == rhs.iqType))
      return false;
    return true;
  }
  bool operator != (const ITim_timMessageIq_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timMessageIq_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timMessageIq_pargs {
 public:


  virtual ~ITim_timMessageIq_pargs() noexcept;
  const TimMessageIq* timMsgIq;
  const std::string* iqType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timMessageResult_args__isset {
  _ITim_timMessageResult_args__isset() : mbean(false) {}
  bool mbean :1;
} _ITim_timMessageResult_args__isset;

class ITim_timMessageResult_args {
 public:

  ITim_timMessageResult_args(const ITim_timMessageResult_args&);
  ITim_timMessageResult_args& operator=(const ITim_timMessageResult_args&);
  ITim_timMessageResult_args() noexcept {
  }

  virtual ~ITim_timMessageResult_args() noexcept;
  TimMBean mbean;

  _ITim_timMessageResult_args__isset __isset;

  void __set_mbean(const TimMBean& val);

  bool operator == (const ITim_timMessageResult_args & rhs) const
  {
    if (!(mbean == rhs.mbean))
      return false;
    return true;
  }
  bool operator != (const ITim_timMessageResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timMessageResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timMessageResult_pargs {
 public:


  virtual ~ITim_timMessageResult_pargs() noexcept;
  const TimMBean* mbean;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timProperty_args__isset {
  _ITim_timProperty_args__isset() : tpb(false) {}
  bool tpb :1;
} _ITim_timProperty_args__isset;

class ITim_timProperty_args {
 public:

  ITim_timProperty_args(const ITim_timProperty_args&);
  ITim_timProperty_args& operator=(const ITim_timProperty_args&);
  ITim_timProperty_args() noexcept {
  }

  virtual ~ITim_timProperty_args() noexcept;
  TimPropertyBean tpb;

  _ITim_timProperty_args__isset __isset;

  void __set_tpb(const TimPropertyBean& val);

  bool operator == (const ITim_timProperty_args & rhs) const
  {
    if (!(tpb == rhs.tpb))
      return false;
    return true;
  }
  bool operator != (const ITim_timProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timProperty_pargs {
 public:


  virtual ~ITim_timProperty_pargs() noexcept;
  const TimPropertyBean* tpb;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRemoteUserAuth_args__isset {
  _ITim_timRemoteUserAuth_args__isset() : tid(false), pwd(false), auth(false) {}
  bool tid :1;
  bool pwd :1;
  bool auth :1;
} _ITim_timRemoteUserAuth_args__isset;

class ITim_timRemoteUserAuth_args {
 public:

  ITim_timRemoteUserAuth_args(const ITim_timRemoteUserAuth_args&);
  ITim_timRemoteUserAuth_args& operator=(const ITim_timRemoteUserAuth_args&);
  ITim_timRemoteUserAuth_args() noexcept
                              : pwd() {
  }

  virtual ~ITim_timRemoteUserAuth_args() noexcept;
  Tid tid;
  std::string pwd;
  TimAuth auth;

  _ITim_timRemoteUserAuth_args__isset __isset;

  void __set_tid(const Tid& val);

  void __set_pwd(const std::string& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timRemoteUserAuth_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(pwd == rhs.pwd))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timRemoteUserAuth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRemoteUserAuth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timRemoteUserAuth_pargs {
 public:


  virtual ~ITim_timRemoteUserAuth_pargs() noexcept;
  const Tid* tid;
  const std::string* pwd;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRemoteUserAuth_result__isset {
  _ITim_timRemoteUserAuth_result__isset() : success(false) {}
  bool success :1;
} _ITim_timRemoteUserAuth_result__isset;

class ITim_timRemoteUserAuth_result {
 public:

  ITim_timRemoteUserAuth_result(const ITim_timRemoteUserAuth_result&);
  ITim_timRemoteUserAuth_result& operator=(const ITim_timRemoteUserAuth_result&);
  ITim_timRemoteUserAuth_result() noexcept {
  }

  virtual ~ITim_timRemoteUserAuth_result() noexcept;
  TimRemoteUserBean success;

  _ITim_timRemoteUserAuth_result__isset __isset;

  void __set_success(const TimRemoteUserBean& val);

  bool operator == (const ITim_timRemoteUserAuth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timRemoteUserAuth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRemoteUserAuth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRemoteUserAuth_presult__isset {
  _ITim_timRemoteUserAuth_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timRemoteUserAuth_presult__isset;

class ITim_timRemoteUserAuth_presult {
 public:


  virtual ~ITim_timRemoteUserAuth_presult() noexcept;
  TimRemoteUserBean* success;

  _ITim_timRemoteUserAuth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ITim_timRemoteUserGet_args__isset {
  _ITim_timRemoteUserGet_args__isset() : tid(false), auth(false) {}
  bool tid :1;
  bool auth :1;
} _ITim_timRemoteUserGet_args__isset;

class ITim_timRemoteUserGet_args {
 public:

  ITim_timRemoteUserGet_args(const ITim_timRemoteUserGet_args&);
  ITim_timRemoteUserGet_args& operator=(const ITim_timRemoteUserGet_args&);
  ITim_timRemoteUserGet_args() noexcept {
  }

  virtual ~ITim_timRemoteUserGet_args() noexcept;
  Tid tid;
  TimAuth auth;

  _ITim_timRemoteUserGet_args__isset __isset;

  void __set_tid(const Tid& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timRemoteUserGet_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timRemoteUserGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRemoteUserGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timRemoteUserGet_pargs {
 public:


  virtual ~ITim_timRemoteUserGet_pargs() noexcept;
  const Tid* tid;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRemoteUserGet_result__isset {
  _ITim_timRemoteUserGet_result__isset() : success(false) {}
  bool success :1;
} _ITim_timRemoteUserGet_result__isset;

class ITim_timRemoteUserGet_result {
 public:

  ITim_timRemoteUserGet_result(const ITim_timRemoteUserGet_result&);
  ITim_timRemoteUserGet_result& operator=(const ITim_timRemoteUserGet_result&);
  ITim_timRemoteUserGet_result() noexcept {
  }

  virtual ~ITim_timRemoteUserGet_result() noexcept;
  TimRemoteUserBean success;

  _ITim_timRemoteUserGet_result__isset __isset;

  void __set_success(const TimRemoteUserBean& val);

  bool operator == (const ITim_timRemoteUserGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timRemoteUserGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRemoteUserGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRemoteUserGet_presult__isset {
  _ITim_timRemoteUserGet_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timRemoteUserGet_presult__isset;

class ITim_timRemoteUserGet_presult {
 public:


  virtual ~ITim_timRemoteUserGet_presult() noexcept;
  TimRemoteUserBean* success;

  _ITim_timRemoteUserGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ITim_timRemoteUserEdit_args__isset {
  _ITim_timRemoteUserEdit_args__isset() : tid(false), ub(false), auth(false) {}
  bool tid :1;
  bool ub :1;
  bool auth :1;
} _ITim_timRemoteUserEdit_args__isset;

class ITim_timRemoteUserEdit_args {
 public:

  ITim_timRemoteUserEdit_args(const ITim_timRemoteUserEdit_args&);
  ITim_timRemoteUserEdit_args& operator=(const ITim_timRemoteUserEdit_args&);
  ITim_timRemoteUserEdit_args() noexcept {
  }

  virtual ~ITim_timRemoteUserEdit_args() noexcept;
  Tid tid;
  TimUserBean ub;
  TimAuth auth;

  _ITim_timRemoteUserEdit_args__isset __isset;

  void __set_tid(const Tid& val);

  void __set_ub(const TimUserBean& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timRemoteUserEdit_args & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(ub == rhs.ub))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timRemoteUserEdit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRemoteUserEdit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timRemoteUserEdit_pargs {
 public:


  virtual ~ITim_timRemoteUserEdit_pargs() noexcept;
  const Tid* tid;
  const TimUserBean* ub;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRemoteUserEdit_result__isset {
  _ITim_timRemoteUserEdit_result__isset() : success(false) {}
  bool success :1;
} _ITim_timRemoteUserEdit_result__isset;

class ITim_timRemoteUserEdit_result {
 public:

  ITim_timRemoteUserEdit_result(const ITim_timRemoteUserEdit_result&);
  ITim_timRemoteUserEdit_result& operator=(const ITim_timRemoteUserEdit_result&);
  ITim_timRemoteUserEdit_result() noexcept {
  }

  virtual ~ITim_timRemoteUserEdit_result() noexcept;
  TimRemoteUserBean success;

  _ITim_timRemoteUserEdit_result__isset __isset;

  void __set_success(const TimRemoteUserBean& val);

  bool operator == (const ITim_timRemoteUserEdit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timRemoteUserEdit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timRemoteUserEdit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timRemoteUserEdit_presult__isset {
  _ITim_timRemoteUserEdit_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timRemoteUserEdit_presult__isset;

class ITim_timRemoteUserEdit_presult {
 public:


  virtual ~ITim_timRemoteUserEdit_presult() noexcept;
  TimRemoteUserBean* success;

  _ITim_timRemoteUserEdit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ITim_timResponsePresence_args__isset {
  _ITim_timResponsePresence_args__isset() : pbean(false), auth(false) {}
  bool pbean :1;
  bool auth :1;
} _ITim_timResponsePresence_args__isset;

class ITim_timResponsePresence_args {
 public:

  ITim_timResponsePresence_args(const ITim_timResponsePresence_args&);
  ITim_timResponsePresence_args& operator=(const ITim_timResponsePresence_args&);
  ITim_timResponsePresence_args() noexcept {
  }

  virtual ~ITim_timResponsePresence_args() noexcept;
  TimPBean pbean;
  TimAuth auth;

  _ITim_timResponsePresence_args__isset __isset;

  void __set_pbean(const TimPBean& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timResponsePresence_args & rhs) const
  {
    if (!(pbean == rhs.pbean))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponsePresence_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponsePresence_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timResponsePresence_pargs {
 public:


  virtual ~ITim_timResponsePresence_pargs() noexcept;
  const TimPBean* pbean;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponsePresence_result__isset {
  _ITim_timResponsePresence_result__isset() : success(false) {}
  bool success :1;
} _ITim_timResponsePresence_result__isset;

class ITim_timResponsePresence_result {
 public:

  ITim_timResponsePresence_result(const ITim_timResponsePresence_result&);
  ITim_timResponsePresence_result& operator=(const ITim_timResponsePresence_result&);
  ITim_timResponsePresence_result() noexcept {
  }

  virtual ~ITim_timResponsePresence_result() noexcept;
  TimResponseBean success;

  _ITim_timResponsePresence_result__isset __isset;

  void __set_success(const TimResponseBean& val);

  bool operator == (const ITim_timResponsePresence_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponsePresence_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponsePresence_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponsePresence_presult__isset {
  _ITim_timResponsePresence_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timResponsePresence_presult__isset;

class ITim_timResponsePresence_presult {
 public:


  virtual ~ITim_timResponsePresence_presult() noexcept;
  TimResponseBean* success;

  _ITim_timResponsePresence_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ITim_timResponseMessage_args__isset {
  _ITim_timResponseMessage_args__isset() : mbean(false), auth(false) {}
  bool mbean :1;
  bool auth :1;
} _ITim_timResponseMessage_args__isset;

class ITim_timResponseMessage_args {
 public:

  ITim_timResponseMessage_args(const ITim_timResponseMessage_args&);
  ITim_timResponseMessage_args& operator=(const ITim_timResponseMessage_args&);
  ITim_timResponseMessage_args() noexcept {
  }

  virtual ~ITim_timResponseMessage_args() noexcept;
  TimMBean mbean;
  TimAuth auth;

  _ITim_timResponseMessage_args__isset __isset;

  void __set_mbean(const TimMBean& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timResponseMessage_args & rhs) const
  {
    if (!(mbean == rhs.mbean))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponseMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponseMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timResponseMessage_pargs {
 public:


  virtual ~ITim_timResponseMessage_pargs() noexcept;
  const TimMBean* mbean;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponseMessage_result__isset {
  _ITim_timResponseMessage_result__isset() : success(false) {}
  bool success :1;
} _ITim_timResponseMessage_result__isset;

class ITim_timResponseMessage_result {
 public:

  ITim_timResponseMessage_result(const ITim_timResponseMessage_result&);
  ITim_timResponseMessage_result& operator=(const ITim_timResponseMessage_result&);
  ITim_timResponseMessage_result() noexcept {
  }

  virtual ~ITim_timResponseMessage_result() noexcept;
  TimResponseBean success;

  _ITim_timResponseMessage_result__isset __isset;

  void __set_success(const TimResponseBean& val);

  bool operator == (const ITim_timResponseMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponseMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponseMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponseMessage_presult__isset {
  _ITim_timResponseMessage_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timResponseMessage_presult__isset;

class ITim_timResponseMessage_presult {
 public:


  virtual ~ITim_timResponseMessage_presult() noexcept;
  TimResponseBean* success;

  _ITim_timResponseMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ITim_timResponseMessageIq_args__isset {
  _ITim_timResponseMessageIq_args__isset() : timMsgIq(false), iqType(false), auth(false) {}
  bool timMsgIq :1;
  bool iqType :1;
  bool auth :1;
} _ITim_timResponseMessageIq_args__isset;

class ITim_timResponseMessageIq_args {
 public:

  ITim_timResponseMessageIq_args(const ITim_timResponseMessageIq_args&);
  ITim_timResponseMessageIq_args& operator=(const ITim_timResponseMessageIq_args&);
  ITim_timResponseMessageIq_args() noexcept
                                 : iqType() {
  }

  virtual ~ITim_timResponseMessageIq_args() noexcept;
  TimMessageIq timMsgIq;
  std::string iqType;
  TimAuth auth;

  _ITim_timResponseMessageIq_args__isset __isset;

  void __set_timMsgIq(const TimMessageIq& val);

  void __set_iqType(const std::string& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timResponseMessageIq_args & rhs) const
  {
    if (!(timMsgIq == rhs.timMsgIq))
      return false;
    if (!(iqType == rhs.iqType))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponseMessageIq_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponseMessageIq_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timResponseMessageIq_pargs {
 public:


  virtual ~ITim_timResponseMessageIq_pargs() noexcept;
  const TimMessageIq* timMsgIq;
  const std::string* iqType;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponseMessageIq_result__isset {
  _ITim_timResponseMessageIq_result__isset() : success(false) {}
  bool success :1;
} _ITim_timResponseMessageIq_result__isset;

class ITim_timResponseMessageIq_result {
 public:

  ITim_timResponseMessageIq_result(const ITim_timResponseMessageIq_result&);
  ITim_timResponseMessageIq_result& operator=(const ITim_timResponseMessageIq_result&);
  ITim_timResponseMessageIq_result() noexcept {
  }

  virtual ~ITim_timResponseMessageIq_result() noexcept;
  TimMBeanList success;

  _ITim_timResponseMessageIq_result__isset __isset;

  void __set_success(const TimMBeanList& val);

  bool operator == (const ITim_timResponseMessageIq_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponseMessageIq_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponseMessageIq_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponseMessageIq_presult__isset {
  _ITim_timResponseMessageIq_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timResponseMessageIq_presult__isset;

class ITim_timResponseMessageIq_presult {
 public:


  virtual ~ITim_timResponseMessageIq_presult() noexcept;
  TimMBeanList* success;

  _ITim_timResponseMessageIq_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ITim_timResponsePresenceList_args__isset {
  _ITim_timResponsePresenceList_args__isset() : pbeanList(false), auth(false) {}
  bool pbeanList :1;
  bool auth :1;
} _ITim_timResponsePresenceList_args__isset;

class ITim_timResponsePresenceList_args {
 public:

  ITim_timResponsePresenceList_args(const ITim_timResponsePresenceList_args&);
  ITim_timResponsePresenceList_args& operator=(const ITim_timResponsePresenceList_args&);
  ITim_timResponsePresenceList_args() noexcept {
  }

  virtual ~ITim_timResponsePresenceList_args() noexcept;
  TimPBeanList pbeanList;
  TimAuth auth;

  _ITim_timResponsePresenceList_args__isset __isset;

  void __set_pbeanList(const TimPBeanList& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timResponsePresenceList_args & rhs) const
  {
    if (!(pbeanList == rhs.pbeanList))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponsePresenceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponsePresenceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timResponsePresenceList_pargs {
 public:


  virtual ~ITim_timResponsePresenceList_pargs() noexcept;
  const TimPBeanList* pbeanList;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponsePresenceList_result__isset {
  _ITim_timResponsePresenceList_result__isset() : success(false) {}
  bool success :1;
} _ITim_timResponsePresenceList_result__isset;

class ITim_timResponsePresenceList_result {
 public:

  ITim_timResponsePresenceList_result(const ITim_timResponsePresenceList_result&);
  ITim_timResponsePresenceList_result& operator=(const ITim_timResponsePresenceList_result&);
  ITim_timResponsePresenceList_result() noexcept {
  }

  virtual ~ITim_timResponsePresenceList_result() noexcept;
  TimResponseBean success;

  _ITim_timResponsePresenceList_result__isset __isset;

  void __set_success(const TimResponseBean& val);

  bool operator == (const ITim_timResponsePresenceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponsePresenceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponsePresenceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponsePresenceList_presult__isset {
  _ITim_timResponsePresenceList_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timResponsePresenceList_presult__isset;

class ITim_timResponsePresenceList_presult {
 public:


  virtual ~ITim_timResponsePresenceList_presult() noexcept;
  TimResponseBean* success;

  _ITim_timResponsePresenceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ITim_timResponseMessageList_args__isset {
  _ITim_timResponseMessageList_args__isset() : mbeanList(false), auth(false) {}
  bool mbeanList :1;
  bool auth :1;
} _ITim_timResponseMessageList_args__isset;

class ITim_timResponseMessageList_args {
 public:

  ITim_timResponseMessageList_args(const ITim_timResponseMessageList_args&);
  ITim_timResponseMessageList_args& operator=(const ITim_timResponseMessageList_args&);
  ITim_timResponseMessageList_args() noexcept {
  }

  virtual ~ITim_timResponseMessageList_args() noexcept;
  TimMBeanList mbeanList;
  TimAuth auth;

  _ITim_timResponseMessageList_args__isset __isset;

  void __set_mbeanList(const TimMBeanList& val);

  void __set_auth(const TimAuth& val);

  bool operator == (const ITim_timResponseMessageList_args & rhs) const
  {
    if (!(mbeanList == rhs.mbeanList))
      return false;
    if (!(auth == rhs.auth))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponseMessageList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponseMessageList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ITim_timResponseMessageList_pargs {
 public:


  virtual ~ITim_timResponseMessageList_pargs() noexcept;
  const TimMBeanList* mbeanList;
  const TimAuth* auth;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponseMessageList_result__isset {
  _ITim_timResponseMessageList_result__isset() : success(false) {}
  bool success :1;
} _ITim_timResponseMessageList_result__isset;

class ITim_timResponseMessageList_result {
 public:

  ITim_timResponseMessageList_result(const ITim_timResponseMessageList_result&);
  ITim_timResponseMessageList_result& operator=(const ITim_timResponseMessageList_result&);
  ITim_timResponseMessageList_result() noexcept {
  }

  virtual ~ITim_timResponseMessageList_result() noexcept;
  TimResponseBean success;

  _ITim_timResponseMessageList_result__isset __isset;

  void __set_success(const TimResponseBean& val);

  bool operator == (const ITim_timResponseMessageList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ITim_timResponseMessageList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ITim_timResponseMessageList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ITim_timResponseMessageList_presult__isset {
  _ITim_timResponseMessageList_presult__isset() : success(false) {}
  bool success :1;
} _ITim_timResponseMessageList_presult__isset;

class ITim_timResponseMessageList_presult {
 public:


  virtual ~ITim_timResponseMessageList_presult() noexcept;
  TimResponseBean* success;

  _ITim_timResponseMessageList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ITimClient : virtual public ITimIf {
 public:
  ITimClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ITimClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * 流程开始
   * 
   * @param param
   */
  void timStream(const TimParam& param) override;
  void send_timStream(const TimParam& param);
  /**
   * tls协议
   */
  void timStarttls() override;
  void send_timStarttls();
  /**
   * 登陆协议
   * 
   * @param tid
   * @param pwd
   */
  void timLogin(const Tid& tid, const std::string& pwd) override;
  void send_timLogin(const Tid& tid, const std::string& pwd);
  /**
   * 回执信息
   * 
   * @param ab
   */
  void timAck(const TimAckBean& ab) override;
  void send_timAck(const TimAckBean& ab);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   */
  void timPresence(const TimPBean& pbean) override;
  void send_timPresence(const TimPBean& pbean);
  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   */
  void timMessage(const TimMBean& mbean) override;
  void send_timMessage(const TimMBean& mbean);
  /**
   * ping 心跳协议
   * 
   * @param threadId
   */
  void timPing(const std::string& threadId) override;
  void send_timPing(const std::string& threadId);
  /**
   * 错误通知
   * 
   * @param e
   */
  void timError(const TimError& e) override;
  void send_timError(const TimError& e);
  /**
   * 登出协议
   */
  void timLogout() override;
  void send_timLogout();
  /**
   * 注册协议
   * 
   * @param tid
   * @param auth
   */
  void timRegist(const Tid& tid, const std::string& auth) override;
  void send_timRegist(const Tid& tid, const std::string& auth);
  /**
   * 花名册
   * 
   * @param roster
   */
  void timRoser(const TimRoster& roster) override;
  void send_timRoser(const TimRoster& roster);
  /**
   * 发送信息或接收信息列表（合流）
   * 
   * @param mbeanList
   */
  void timMessageList(const TimMBeanList& mbeanList) override;
  void send_timMessageList(const TimMBeanList& mbeanList);
  /**
   * 发送状态信息列表（合流）
   * 
   * @param pbeanList
   */
  void timPresenceList(const TimPBeanList& pbeanList) override;
  void send_timPresenceList(const TimPBeanList& pbeanList);
  /**
   * 信息请求 get请求数据 del删除
   * 
   * @param timMsgIq
   * @param iqType
   */
  void timMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType) override;
  void send_timMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType);
  /**
   * 信息请求
   * 
   * @param mbean
   */
  void timMessageResult(const TimMBean& mbean) override;
  void send_timMessageResult(const TimMBean& mbean);
  /**
   * 用户协议属性请求
   * 
   * @param tpb
   */
  void timProperty(const TimPropertyBean& tpb) override;
  void send_timProperty(const TimPropertyBean& tpb);
  /**
   * 请求远程验证信息
   * 
   * @param tid
   * @param pwd
   * @param auth
   */
  void timRemoteUserAuth(TimRemoteUserBean& _return, const Tid& tid, const std::string& pwd, const TimAuth& auth) override;
  void send_timRemoteUserAuth(const Tid& tid, const std::string& pwd, const TimAuth& auth);
  void recv_timRemoteUserAuth(TimRemoteUserBean& _return);
  /**
   * 请求远程用户信息
   * 
   * @param tid
   * @param auth
   */
  void timRemoteUserGet(TimRemoteUserBean& _return, const Tid& tid, const TimAuth& auth) override;
  void send_timRemoteUserGet(const Tid& tid, const TimAuth& auth);
  void recv_timRemoteUserGet(TimRemoteUserBean& _return);
  /**
   * 编辑远程用户信息
   * 
   * @param tid
   * @param ub
   * @param auth
   */
  void timRemoteUserEdit(TimRemoteUserBean& _return, const Tid& tid, const TimUserBean& ub, const TimAuth& auth) override;
  void send_timRemoteUserEdit(const Tid& tid, const TimUserBean& ub, const TimAuth& auth);
  void recv_timRemoteUserEdit(TimRemoteUserBean& _return);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   * @param auth
   */
  void timResponsePresence(TimResponseBean& _return, const TimPBean& pbean, const TimAuth& auth) override;
  void send_timResponsePresence(const TimPBean& pbean, const TimAuth& auth);
  void recv_timResponsePresence(TimResponseBean& _return);
  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   * @param auth
   */
  void timResponseMessage(TimResponseBean& _return, const TimMBean& mbean, const TimAuth& auth) override;
  void send_timResponseMessage(const TimMBean& mbean, const TimAuth& auth);
  void recv_timResponseMessage(TimResponseBean& _return);
  /**
   * 信息请求 get请求数据 del删除（辅助接口）
   * 
   * @param timMsgIq
   * @param iqType
   * @param auth
   */
  void timResponseMessageIq(TimMBeanList& _return, const TimMessageIq& timMsgIq, const std::string& iqType, const TimAuth& auth) override;
  void send_timResponseMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType, const TimAuth& auth);
  void recv_timResponseMessageIq(TimMBeanList& _return);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbeanList
   * @param auth
   */
  void timResponsePresenceList(TimResponseBean& _return, const TimPBeanList& pbeanList, const TimAuth& auth) override;
  void send_timResponsePresenceList(const TimPBeanList& pbeanList, const TimAuth& auth);
  void recv_timResponsePresenceList(TimResponseBean& _return);
  /**
   * 发送信息或接收信息
   * 
   * @param mbeanList
   * @param auth
   */
  void timResponseMessageList(TimResponseBean& _return, const TimMBeanList& mbeanList, const TimAuth& auth) override;
  void send_timResponseMessageList(const TimMBeanList& mbeanList, const TimAuth& auth);
  void recv_timResponseMessageList(TimResponseBean& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ITimProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ITimIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ITimProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_timStream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timStarttls(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timAck(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timPresence(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timPing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timLogout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timRegist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timRoser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timMessageList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timPresenceList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timMessageIq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timMessageResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timRemoteUserAuth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timRemoteUserGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timRemoteUserEdit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timResponsePresence(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timResponseMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timResponseMessageIq(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timResponsePresenceList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_timResponseMessageList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ITimProcessor(::std::shared_ptr<ITimIf> iface) :
    iface_(iface) {
    processMap_["timStream"] = &ITimProcessor::process_timStream;
    processMap_["timStarttls"] = &ITimProcessor::process_timStarttls;
    processMap_["timLogin"] = &ITimProcessor::process_timLogin;
    processMap_["timAck"] = &ITimProcessor::process_timAck;
    processMap_["timPresence"] = &ITimProcessor::process_timPresence;
    processMap_["timMessage"] = &ITimProcessor::process_timMessage;
    processMap_["timPing"] = &ITimProcessor::process_timPing;
    processMap_["timError"] = &ITimProcessor::process_timError;
    processMap_["timLogout"] = &ITimProcessor::process_timLogout;
    processMap_["timRegist"] = &ITimProcessor::process_timRegist;
    processMap_["timRoser"] = &ITimProcessor::process_timRoser;
    processMap_["timMessageList"] = &ITimProcessor::process_timMessageList;
    processMap_["timPresenceList"] = &ITimProcessor::process_timPresenceList;
    processMap_["timMessageIq"] = &ITimProcessor::process_timMessageIq;
    processMap_["timMessageResult"] = &ITimProcessor::process_timMessageResult;
    processMap_["timProperty"] = &ITimProcessor::process_timProperty;
    processMap_["timRemoteUserAuth"] = &ITimProcessor::process_timRemoteUserAuth;
    processMap_["timRemoteUserGet"] = &ITimProcessor::process_timRemoteUserGet;
    processMap_["timRemoteUserEdit"] = &ITimProcessor::process_timRemoteUserEdit;
    processMap_["timResponsePresence"] = &ITimProcessor::process_timResponsePresence;
    processMap_["timResponseMessage"] = &ITimProcessor::process_timResponseMessage;
    processMap_["timResponseMessageIq"] = &ITimProcessor::process_timResponseMessageIq;
    processMap_["timResponsePresenceList"] = &ITimProcessor::process_timResponsePresenceList;
    processMap_["timResponseMessageList"] = &ITimProcessor::process_timResponseMessageList;
  }

  virtual ~ITimProcessor() {}
};

class ITimProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ITimProcessorFactory(const ::std::shared_ptr< ITimIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ITimIfFactory > handlerFactory_;
};

class ITimMultiface : virtual public ITimIf {
 public:
  ITimMultiface(std::vector<std::shared_ptr<ITimIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ITimMultiface() {}
 protected:
  std::vector<std::shared_ptr<ITimIf> > ifaces_;
  ITimMultiface() {}
  void add(::std::shared_ptr<ITimIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  /**
   * 流程开始
   * 
   * @param param
   */
  void timStream(const TimParam& param) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timStream(param);
    }
    ifaces_[i]->timStream(param);
  }

  /**
   * tls协议
   */
  void timStarttls() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timStarttls();
    }
    ifaces_[i]->timStarttls();
  }

  /**
   * 登陆协议
   * 
   * @param tid
   * @param pwd
   */
  void timLogin(const Tid& tid, const std::string& pwd) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timLogin(tid, pwd);
    }
    ifaces_[i]->timLogin(tid, pwd);
  }

  /**
   * 回执信息
   * 
   * @param ab
   */
  void timAck(const TimAckBean& ab) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timAck(ab);
    }
    ifaces_[i]->timAck(ab);
  }

  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   */
  void timPresence(const TimPBean& pbean) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timPresence(pbean);
    }
    ifaces_[i]->timPresence(pbean);
  }

  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   */
  void timMessage(const TimMBean& mbean) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timMessage(mbean);
    }
    ifaces_[i]->timMessage(mbean);
  }

  /**
   * ping 心跳协议
   * 
   * @param threadId
   */
  void timPing(const std::string& threadId) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timPing(threadId);
    }
    ifaces_[i]->timPing(threadId);
  }

  /**
   * 错误通知
   * 
   * @param e
   */
  void timError(const TimError& e) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timError(e);
    }
    ifaces_[i]->timError(e);
  }

  /**
   * 登出协议
   */
  void timLogout() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timLogout();
    }
    ifaces_[i]->timLogout();
  }

  /**
   * 注册协议
   * 
   * @param tid
   * @param auth
   */
  void timRegist(const Tid& tid, const std::string& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timRegist(tid, auth);
    }
    ifaces_[i]->timRegist(tid, auth);
  }

  /**
   * 花名册
   * 
   * @param roster
   */
  void timRoser(const TimRoster& roster) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timRoser(roster);
    }
    ifaces_[i]->timRoser(roster);
  }

  /**
   * 发送信息或接收信息列表（合流）
   * 
   * @param mbeanList
   */
  void timMessageList(const TimMBeanList& mbeanList) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timMessageList(mbeanList);
    }
    ifaces_[i]->timMessageList(mbeanList);
  }

  /**
   * 发送状态信息列表（合流）
   * 
   * @param pbeanList
   */
  void timPresenceList(const TimPBeanList& pbeanList) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timPresenceList(pbeanList);
    }
    ifaces_[i]->timPresenceList(pbeanList);
  }

  /**
   * 信息请求 get请求数据 del删除
   * 
   * @param timMsgIq
   * @param iqType
   */
  void timMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timMessageIq(timMsgIq, iqType);
    }
    ifaces_[i]->timMessageIq(timMsgIq, iqType);
  }

  /**
   * 信息请求
   * 
   * @param mbean
   */
  void timMessageResult(const TimMBean& mbean) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timMessageResult(mbean);
    }
    ifaces_[i]->timMessageResult(mbean);
  }

  /**
   * 用户协议属性请求
   * 
   * @param tpb
   */
  void timProperty(const TimPropertyBean& tpb) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timProperty(tpb);
    }
    ifaces_[i]->timProperty(tpb);
  }

  /**
   * 请求远程验证信息
   * 
   * @param tid
   * @param pwd
   * @param auth
   */
  void timRemoteUserAuth(TimRemoteUserBean& _return, const Tid& tid, const std::string& pwd, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timRemoteUserAuth(_return, tid, pwd, auth);
    }
    ifaces_[i]->timRemoteUserAuth(_return, tid, pwd, auth);
    return;
  }

  /**
   * 请求远程用户信息
   * 
   * @param tid
   * @param auth
   */
  void timRemoteUserGet(TimRemoteUserBean& _return, const Tid& tid, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timRemoteUserGet(_return, tid, auth);
    }
    ifaces_[i]->timRemoteUserGet(_return, tid, auth);
    return;
  }

  /**
   * 编辑远程用户信息
   * 
   * @param tid
   * @param ub
   * @param auth
   */
  void timRemoteUserEdit(TimRemoteUserBean& _return, const Tid& tid, const TimUserBean& ub, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timRemoteUserEdit(_return, tid, ub, auth);
    }
    ifaces_[i]->timRemoteUserEdit(_return, tid, ub, auth);
    return;
  }

  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   * @param auth
   */
  void timResponsePresence(TimResponseBean& _return, const TimPBean& pbean, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timResponsePresence(_return, pbean, auth);
    }
    ifaces_[i]->timResponsePresence(_return, pbean, auth);
    return;
  }

  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   * @param auth
   */
  void timResponseMessage(TimResponseBean& _return, const TimMBean& mbean, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timResponseMessage(_return, mbean, auth);
    }
    ifaces_[i]->timResponseMessage(_return, mbean, auth);
    return;
  }

  /**
   * 信息请求 get请求数据 del删除（辅助接口）
   * 
   * @param timMsgIq
   * @param iqType
   * @param auth
   */
  void timResponseMessageIq(TimMBeanList& _return, const TimMessageIq& timMsgIq, const std::string& iqType, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timResponseMessageIq(_return, timMsgIq, iqType, auth);
    }
    ifaces_[i]->timResponseMessageIq(_return, timMsgIq, iqType, auth);
    return;
  }

  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbeanList
   * @param auth
   */
  void timResponsePresenceList(TimResponseBean& _return, const TimPBeanList& pbeanList, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timResponsePresenceList(_return, pbeanList, auth);
    }
    ifaces_[i]->timResponsePresenceList(_return, pbeanList, auth);
    return;
  }

  /**
   * 发送信息或接收信息
   * 
   * @param mbeanList
   * @param auth
   */
  void timResponseMessageList(TimResponseBean& _return, const TimMBeanList& mbeanList, const TimAuth& auth) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->timResponseMessageList(_return, mbeanList, auth);
    }
    ifaces_[i]->timResponseMessageList(_return, mbeanList, auth);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ITimConcurrentClient : virtual public ITimIf {
 public:
  ITimConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ITimConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * 流程开始
   * 
   * @param param
   */
  void timStream(const TimParam& param) override;
  void send_timStream(const TimParam& param);
  /**
   * tls协议
   */
  void timStarttls() override;
  void send_timStarttls();
  /**
   * 登陆协议
   * 
   * @param tid
   * @param pwd
   */
  void timLogin(const Tid& tid, const std::string& pwd) override;
  void send_timLogin(const Tid& tid, const std::string& pwd);
  /**
   * 回执信息
   * 
   * @param ab
   */
  void timAck(const TimAckBean& ab) override;
  void send_timAck(const TimAckBean& ab);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   */
  void timPresence(const TimPBean& pbean) override;
  void send_timPresence(const TimPBean& pbean);
  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   */
  void timMessage(const TimMBean& mbean) override;
  void send_timMessage(const TimMBean& mbean);
  /**
   * ping 心跳协议
   * 
   * @param threadId
   */
  void timPing(const std::string& threadId) override;
  void send_timPing(const std::string& threadId);
  /**
   * 错误通知
   * 
   * @param e
   */
  void timError(const TimError& e) override;
  void send_timError(const TimError& e);
  /**
   * 登出协议
   */
  void timLogout() override;
  void send_timLogout();
  /**
   * 注册协议
   * 
   * @param tid
   * @param auth
   */
  void timRegist(const Tid& tid, const std::string& auth) override;
  void send_timRegist(const Tid& tid, const std::string& auth);
  /**
   * 花名册
   * 
   * @param roster
   */
  void timRoser(const TimRoster& roster) override;
  void send_timRoser(const TimRoster& roster);
  /**
   * 发送信息或接收信息列表（合流）
   * 
   * @param mbeanList
   */
  void timMessageList(const TimMBeanList& mbeanList) override;
  void send_timMessageList(const TimMBeanList& mbeanList);
  /**
   * 发送状态信息列表（合流）
   * 
   * @param pbeanList
   */
  void timPresenceList(const TimPBeanList& pbeanList) override;
  void send_timPresenceList(const TimPBeanList& pbeanList);
  /**
   * 信息请求 get请求数据 del删除
   * 
   * @param timMsgIq
   * @param iqType
   */
  void timMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType) override;
  void send_timMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType);
  /**
   * 信息请求
   * 
   * @param mbean
   */
  void timMessageResult(const TimMBean& mbean) override;
  void send_timMessageResult(const TimMBean& mbean);
  /**
   * 用户协议属性请求
   * 
   * @param tpb
   */
  void timProperty(const TimPropertyBean& tpb) override;
  void send_timProperty(const TimPropertyBean& tpb);
  /**
   * 请求远程验证信息
   * 
   * @param tid
   * @param pwd
   * @param auth
   */
  void timRemoteUserAuth(TimRemoteUserBean& _return, const Tid& tid, const std::string& pwd, const TimAuth& auth) override;
  int32_t send_timRemoteUserAuth(const Tid& tid, const std::string& pwd, const TimAuth& auth);
  void recv_timRemoteUserAuth(TimRemoteUserBean& _return, const int32_t seqid);
  /**
   * 请求远程用户信息
   * 
   * @param tid
   * @param auth
   */
  void timRemoteUserGet(TimRemoteUserBean& _return, const Tid& tid, const TimAuth& auth) override;
  int32_t send_timRemoteUserGet(const Tid& tid, const TimAuth& auth);
  void recv_timRemoteUserGet(TimRemoteUserBean& _return, const int32_t seqid);
  /**
   * 编辑远程用户信息
   * 
   * @param tid
   * @param ub
   * @param auth
   */
  void timRemoteUserEdit(TimRemoteUserBean& _return, const Tid& tid, const TimUserBean& ub, const TimAuth& auth) override;
  int32_t send_timRemoteUserEdit(const Tid& tid, const TimUserBean& ub, const TimAuth& auth);
  void recv_timRemoteUserEdit(TimRemoteUserBean& _return, const int32_t seqid);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbean
   * @param auth
   */
  void timResponsePresence(TimResponseBean& _return, const TimPBean& pbean, const TimAuth& auth) override;
  int32_t send_timResponsePresence(const TimPBean& pbean, const TimAuth& auth);
  void recv_timResponsePresence(TimResponseBean& _return, const int32_t seqid);
  /**
   * 发送信息或接收信息
   * 
   * @param mbean
   * @param auth
   */
  void timResponseMessage(TimResponseBean& _return, const TimMBean& mbean, const TimAuth& auth) override;
  int32_t send_timResponseMessage(const TimMBean& mbean, const TimAuth& auth);
  void recv_timResponseMessage(TimResponseBean& _return, const int32_t seqid);
  /**
   * 信息请求 get请求数据 del删除（辅助接口）
   * 
   * @param timMsgIq
   * @param iqType
   * @param auth
   */
  void timResponseMessageIq(TimMBeanList& _return, const TimMessageIq& timMsgIq, const std::string& iqType, const TimAuth& auth) override;
  int32_t send_timResponseMessageIq(const TimMessageIq& timMsgIq, const std::string& iqType, const TimAuth& auth);
  void recv_timResponseMessageIq(TimMBeanList& _return, const int32_t seqid);
  /**
   * 广播出席协议或接收广播协议
   * 
   * @param pbeanList
   * @param auth
   */
  void timResponsePresenceList(TimResponseBean& _return, const TimPBeanList& pbeanList, const TimAuth& auth) override;
  int32_t send_timResponsePresenceList(const TimPBeanList& pbeanList, const TimAuth& auth);
  void recv_timResponsePresenceList(TimResponseBean& _return, const int32_t seqid);
  /**
   * 发送信息或接收信息
   * 
   * @param mbeanList
   * @param auth
   */
  void timResponseMessageList(TimResponseBean& _return, const TimMBeanList& mbeanList, const TimAuth& auth) override;
  int32_t send_timResponseMessageList(const TimMBeanList& mbeanList, const TimAuth& auth);
  void recv_timResponseMessageList(TimResponseBean& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
