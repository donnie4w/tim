/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
module ITim;

import thrift.base;
import thrift.codegen.base;
import thrift.util.hashset;

import tim_types;

interface ITim {
  /**
    流程开始
  */
  void timStream(ref const(TimParam) param);
  /**
    tls协议
  */
  void timStarttls();
  /**
    登陆协议
  */
  void timLogin(ref const(Tid) tid, string pwd);
  /**
    回执信息
  */
  void timAck(ref const(TimAckBean) ab);
  /**
    广播出席协议或接收广播协议
  */
  void timPresence(ref const(TimPBean) pbean);
  /**
    发送信息或接收信息
  */
  void timMessage(ref const(TimMBean) mbean);
  /**
    ping 心跳协议
  */
  void timPing(string threadId);
  /**
    错误通知
  */
  void timError(ref const(TimError) e);
  /**
    登出协议
  */
  void timLogout();
  /**
    注册协议
  */
  void timRegist(ref const(Tid) tid, string auth);
  /**
    花名册
  */
  void timRoser(ref const(TimRoster) roster);
  /**
    发送信息或接收信息列表（合流）
  */
  void timMessageList(ref const(TimMBeanList) mbeanList);
  /**
    发送状态信息列表（合流）
  */
  void timPresenceList(ref const(TimPBeanList) pbeanList);
  /**
    信息请求 get请求数据 del删除
  */
  void timMessageIq(ref const(TimMessageIq) timMsgIq, string iqType);
  /**
    信息请求
  */
  void timMessageResult(ref const(TimMBean) mbean);
  /**
    用户协议属性请求
  */
  void timProperty(ref const(TimPropertyBean) tpb);
  /**
    请求远程验证信息
  */
  TimRemoteUserBean timRemoteUserAuth(ref const(Tid) tid, string pwd, ref const(TimAuth) auth);
  /**
    请求远程用户信息
  */
  TimRemoteUserBean timRemoteUserGet(ref const(Tid) tid, ref const(TimAuth) auth);
  /**
    编辑远程用户信息
  */
  TimRemoteUserBean timRemoteUserEdit(ref const(Tid) tid, ref const(TimUserBean) ub, ref const(TimAuth) auth);
  /**
    广播出席协议或接收广播协议
  */
  TimResponseBean timResponsePresence(ref const(TimPBean) pbean, ref const(TimAuth) auth);
  /**
    发送信息或接收信息
  */
  TimResponseBean timResponseMessage(ref const(TimMBean) mbean, ref const(TimAuth) auth);
  /**
    信息请求 get请求数据 del删除（辅助接口）
  */
  TimMBeanList timResponseMessageIq(ref const(TimMessageIq) timMsgIq, string iqType, ref const(TimAuth) auth);
  /**
    广播出席协议或接收广播协议
  */
  TimResponseBean timResponsePresenceList(ref const(TimPBeanList) pbeanList, ref const(TimAuth) auth);
  /**
    发送信息或接收信息
  */
  TimResponseBean timResponseMessageList(ref const(TimMBeanList) mbeanList, ref const(TimAuth) auth);

  enum methodMeta = [
    TMethodMeta(`timStream`, 
      [TParamMeta(`param`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timStarttls`, 
      [],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timLogin`, 
      [TParamMeta(`tid`, 1), TParamMeta(`pwd`, 2)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timAck`, 
      [TParamMeta(`ab`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timPresence`, 
      [TParamMeta(`pbean`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timMessage`, 
      [TParamMeta(`mbean`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timPing`, 
      [TParamMeta(`threadId`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timError`, 
      [TParamMeta(`e`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timLogout`, 
      [],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timRegist`, 
      [TParamMeta(`tid`, 1), TParamMeta(`auth`, 2)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timRoser`, 
      [TParamMeta(`roster`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timMessageList`, 
      [TParamMeta(`mbeanList`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timPresenceList`, 
      [TParamMeta(`pbeanList`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timMessageIq`, 
      [TParamMeta(`timMsgIq`, 1), TParamMeta(`iqType`, 2)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timMessageResult`, 
      [TParamMeta(`mbean`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timProperty`, 
      [TParamMeta(`tpb`, 1)],
      [],
      TMethodType.ONEWAY
    ),
    TMethodMeta(`timRemoteUserAuth`, 
      [TParamMeta(`tid`, 1), TParamMeta(`pwd`, 2), TParamMeta(`auth`, 3)]
    ),
    TMethodMeta(`timRemoteUserGet`, 
      [TParamMeta(`tid`, 1), TParamMeta(`auth`, 2)]
    ),
    TMethodMeta(`timRemoteUserEdit`, 
      [TParamMeta(`tid`, 1), TParamMeta(`ub`, 2), TParamMeta(`auth`, 3)]
    ),
    TMethodMeta(`timResponsePresence`, 
      [TParamMeta(`pbean`, 1), TParamMeta(`auth`, 2)]
    ),
    TMethodMeta(`timResponseMessage`, 
      [TParamMeta(`mbean`, 1), TParamMeta(`auth`, 2)]
    ),
    TMethodMeta(`timResponseMessageIq`, 
      [TParamMeta(`timMsgIq`, 1), TParamMeta(`iqType`, 2), TParamMeta(`auth`, 3)]
    ),
    TMethodMeta(`timResponsePresenceList`, 
      [TParamMeta(`pbeanList`, 1), TParamMeta(`auth`, 2)]
    ),
    TMethodMeta(`timResponseMessageList`, 
      [TParamMeta(`mbeanList`, 1), TParamMeta(`auth`, 2)]
    )
  ];
}
