#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'tim_types'

module ITim
  class Client
    include ::Thrift::Client

    def timStream(param)
      send_timStream(param)
    end

    def send_timStream(param)
      send_oneway_message('timStream', TimStream_args, :param => param)
    end
    def timStarttls()
      send_timStarttls()
    end

    def send_timStarttls()
      send_oneway_message('timStarttls', TimStarttls_args)
    end
    def timLogin(tid, pwd)
      send_timLogin(tid, pwd)
    end

    def send_timLogin(tid, pwd)
      send_oneway_message('timLogin', TimLogin_args, :tid => tid, :pwd => pwd)
    end
    def timAck(ab)
      send_timAck(ab)
    end

    def send_timAck(ab)
      send_oneway_message('timAck', TimAck_args, :ab => ab)
    end
    def timPresence(pbean)
      send_timPresence(pbean)
    end

    def send_timPresence(pbean)
      send_oneway_message('timPresence', TimPresence_args, :pbean => pbean)
    end
    def timMessage(mbean)
      send_timMessage(mbean)
    end

    def send_timMessage(mbean)
      send_oneway_message('timMessage', TimMessage_args, :mbean => mbean)
    end
    def timPing(threadId)
      send_timPing(threadId)
    end

    def send_timPing(threadId)
      send_oneway_message('timPing', TimPing_args, :threadId => threadId)
    end
    def timError(e)
      send_timError(e)
    end

    def send_timError(e)
      send_oneway_message('timError', TimError_args, :e => e)
    end
    def timLogout()
      send_timLogout()
    end

    def send_timLogout()
      send_oneway_message('timLogout', TimLogout_args)
    end
    def timRegist(tid, auth)
      send_timRegist(tid, auth)
    end

    def send_timRegist(tid, auth)
      send_oneway_message('timRegist', TimRegist_args, :tid => tid, :auth => auth)
    end
    def timRoser(roster)
      send_timRoser(roster)
    end

    def send_timRoser(roster)
      send_oneway_message('timRoser', TimRoser_args, :roster => roster)
    end
    def timMessageList(mbeanList)
      send_timMessageList(mbeanList)
    end

    def send_timMessageList(mbeanList)
      send_oneway_message('timMessageList', TimMessageList_args, :mbeanList => mbeanList)
    end
    def timPresenceList(pbeanList)
      send_timPresenceList(pbeanList)
    end

    def send_timPresenceList(pbeanList)
      send_oneway_message('timPresenceList', TimPresenceList_args, :pbeanList => pbeanList)
    end
    def timMessageIq(timMsgIq, iqType)
      send_timMessageIq(timMsgIq, iqType)
    end

    def send_timMessageIq(timMsgIq, iqType)
      send_oneway_message('timMessageIq', TimMessageIq_args, :timMsgIq => timMsgIq, :iqType => iqType)
    end
    def timMessageResult(mbean)
      send_timMessageResult(mbean)
    end

    def send_timMessageResult(mbean)
      send_oneway_message('timMessageResult', TimMessageResult_args, :mbean => mbean)
    end
    def timProperty(tpb)
      send_timProperty(tpb)
    end

    def send_timProperty(tpb)
      send_oneway_message('timProperty', TimProperty_args, :tpb => tpb)
    end
    def timRemoteUserAuth(tid, pwd, auth)
      send_timRemoteUserAuth(tid, pwd, auth)
      return recv_timRemoteUserAuth()
    end

    def send_timRemoteUserAuth(tid, pwd, auth)
      send_message('timRemoteUserAuth', TimRemoteUserAuth_args, :tid => tid, :pwd => pwd, :auth => auth)
    end

    def recv_timRemoteUserAuth()
      result = receive_message(TimRemoteUserAuth_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timRemoteUserAuth failed: unknown result')
    end

    def timRemoteUserGet(tid, auth)
      send_timRemoteUserGet(tid, auth)
      return recv_timRemoteUserGet()
    end

    def send_timRemoteUserGet(tid, auth)
      send_message('timRemoteUserGet', TimRemoteUserGet_args, :tid => tid, :auth => auth)
    end

    def recv_timRemoteUserGet()
      result = receive_message(TimRemoteUserGet_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timRemoteUserGet failed: unknown result')
    end

    def timRemoteUserEdit(tid, ub, auth)
      send_timRemoteUserEdit(tid, ub, auth)
      return recv_timRemoteUserEdit()
    end

    def send_timRemoteUserEdit(tid, ub, auth)
      send_message('timRemoteUserEdit', TimRemoteUserEdit_args, :tid => tid, :ub => ub, :auth => auth)
    end

    def recv_timRemoteUserEdit()
      result = receive_message(TimRemoteUserEdit_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timRemoteUserEdit failed: unknown result')
    end

    def timResponsePresence(pbean, auth)
      send_timResponsePresence(pbean, auth)
      return recv_timResponsePresence()
    end

    def send_timResponsePresence(pbean, auth)
      send_message('timResponsePresence', TimResponsePresence_args, :pbean => pbean, :auth => auth)
    end

    def recv_timResponsePresence()
      result = receive_message(TimResponsePresence_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timResponsePresence failed: unknown result')
    end

    def timResponseMessage(mbean, auth)
      send_timResponseMessage(mbean, auth)
      return recv_timResponseMessage()
    end

    def send_timResponseMessage(mbean, auth)
      send_message('timResponseMessage', TimResponseMessage_args, :mbean => mbean, :auth => auth)
    end

    def recv_timResponseMessage()
      result = receive_message(TimResponseMessage_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timResponseMessage failed: unknown result')
    end

    def timResponseMessageIq(timMsgIq, iqType, auth)
      send_timResponseMessageIq(timMsgIq, iqType, auth)
      return recv_timResponseMessageIq()
    end

    def send_timResponseMessageIq(timMsgIq, iqType, auth)
      send_message('timResponseMessageIq', TimResponseMessageIq_args, :timMsgIq => timMsgIq, :iqType => iqType, :auth => auth)
    end

    def recv_timResponseMessageIq()
      result = receive_message(TimResponseMessageIq_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timResponseMessageIq failed: unknown result')
    end

    def timResponsePresenceList(pbeanList, auth)
      send_timResponsePresenceList(pbeanList, auth)
      return recv_timResponsePresenceList()
    end

    def send_timResponsePresenceList(pbeanList, auth)
      send_message('timResponsePresenceList', TimResponsePresenceList_args, :pbeanList => pbeanList, :auth => auth)
    end

    def recv_timResponsePresenceList()
      result = receive_message(TimResponsePresenceList_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timResponsePresenceList failed: unknown result')
    end

    def timResponseMessageList(mbeanList, auth)
      send_timResponseMessageList(mbeanList, auth)
      return recv_timResponseMessageList()
    end

    def send_timResponseMessageList(mbeanList, auth)
      send_message('timResponseMessageList', TimResponseMessageList_args, :mbeanList => mbeanList, :auth => auth)
    end

    def recv_timResponseMessageList()
      result = receive_message(TimResponseMessageList_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'timResponseMessageList failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_timStream(seqid, iprot, oprot)
      args = read_args(iprot, TimStream_args)
      @handler.timStream(args.param)
      return
    end

    def process_timStarttls(seqid, iprot, oprot)
      args = read_args(iprot, TimStarttls_args)
      @handler.timStarttls()
      return
    end

    def process_timLogin(seqid, iprot, oprot)
      args = read_args(iprot, TimLogin_args)
      @handler.timLogin(args.tid, args.pwd)
      return
    end

    def process_timAck(seqid, iprot, oprot)
      args = read_args(iprot, TimAck_args)
      @handler.timAck(args.ab)
      return
    end

    def process_timPresence(seqid, iprot, oprot)
      args = read_args(iprot, TimPresence_args)
      @handler.timPresence(args.pbean)
      return
    end

    def process_timMessage(seqid, iprot, oprot)
      args = read_args(iprot, TimMessage_args)
      @handler.timMessage(args.mbean)
      return
    end

    def process_timPing(seqid, iprot, oprot)
      args = read_args(iprot, TimPing_args)
      @handler.timPing(args.threadId)
      return
    end

    def process_timError(seqid, iprot, oprot)
      args = read_args(iprot, TimError_args)
      @handler.timError(args.e)
      return
    end

    def process_timLogout(seqid, iprot, oprot)
      args = read_args(iprot, TimLogout_args)
      @handler.timLogout()
      return
    end

    def process_timRegist(seqid, iprot, oprot)
      args = read_args(iprot, TimRegist_args)
      @handler.timRegist(args.tid, args.auth)
      return
    end

    def process_timRoser(seqid, iprot, oprot)
      args = read_args(iprot, TimRoser_args)
      @handler.timRoser(args.roster)
      return
    end

    def process_timMessageList(seqid, iprot, oprot)
      args = read_args(iprot, TimMessageList_args)
      @handler.timMessageList(args.mbeanList)
      return
    end

    def process_timPresenceList(seqid, iprot, oprot)
      args = read_args(iprot, TimPresenceList_args)
      @handler.timPresenceList(args.pbeanList)
      return
    end

    def process_timMessageIq(seqid, iprot, oprot)
      args = read_args(iprot, TimMessageIq_args)
      @handler.timMessageIq(args.timMsgIq, args.iqType)
      return
    end

    def process_timMessageResult(seqid, iprot, oprot)
      args = read_args(iprot, TimMessageResult_args)
      @handler.timMessageResult(args.mbean)
      return
    end

    def process_timProperty(seqid, iprot, oprot)
      args = read_args(iprot, TimProperty_args)
      @handler.timProperty(args.tpb)
      return
    end

    def process_timRemoteUserAuth(seqid, iprot, oprot)
      args = read_args(iprot, TimRemoteUserAuth_args)
      result = TimRemoteUserAuth_result.new()
      result.success = @handler.timRemoteUserAuth(args.tid, args.pwd, args.auth)
      write_result(result, oprot, 'timRemoteUserAuth', seqid)
    end

    def process_timRemoteUserGet(seqid, iprot, oprot)
      args = read_args(iprot, TimRemoteUserGet_args)
      result = TimRemoteUserGet_result.new()
      result.success = @handler.timRemoteUserGet(args.tid, args.auth)
      write_result(result, oprot, 'timRemoteUserGet', seqid)
    end

    def process_timRemoteUserEdit(seqid, iprot, oprot)
      args = read_args(iprot, TimRemoteUserEdit_args)
      result = TimRemoteUserEdit_result.new()
      result.success = @handler.timRemoteUserEdit(args.tid, args.ub, args.auth)
      write_result(result, oprot, 'timRemoteUserEdit', seqid)
    end

    def process_timResponsePresence(seqid, iprot, oprot)
      args = read_args(iprot, TimResponsePresence_args)
      result = TimResponsePresence_result.new()
      result.success = @handler.timResponsePresence(args.pbean, args.auth)
      write_result(result, oprot, 'timResponsePresence', seqid)
    end

    def process_timResponseMessage(seqid, iprot, oprot)
      args = read_args(iprot, TimResponseMessage_args)
      result = TimResponseMessage_result.new()
      result.success = @handler.timResponseMessage(args.mbean, args.auth)
      write_result(result, oprot, 'timResponseMessage', seqid)
    end

    def process_timResponseMessageIq(seqid, iprot, oprot)
      args = read_args(iprot, TimResponseMessageIq_args)
      result = TimResponseMessageIq_result.new()
      result.success = @handler.timResponseMessageIq(args.timMsgIq, args.iqType, args.auth)
      write_result(result, oprot, 'timResponseMessageIq', seqid)
    end

    def process_timResponsePresenceList(seqid, iprot, oprot)
      args = read_args(iprot, TimResponsePresenceList_args)
      result = TimResponsePresenceList_result.new()
      result.success = @handler.timResponsePresenceList(args.pbeanList, args.auth)
      write_result(result, oprot, 'timResponsePresenceList', seqid)
    end

    def process_timResponseMessageList(seqid, iprot, oprot)
      args = read_args(iprot, TimResponseMessageList_args)
      result = TimResponseMessageList_result.new()
      result.success = @handler.timResponseMessageList(args.mbeanList, args.auth)
      write_result(result, oprot, 'timResponseMessageList', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class TimStream_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PARAM = 1

    FIELDS = {
      PARAM => {:type => ::Thrift::Types::STRUCT, :name => 'param', :class => ::TimParam}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimStream_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimStarttls_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimStarttls_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimLogin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TID = 1
    PWD = 2

    FIELDS = {
      TID => {:type => ::Thrift::Types::STRUCT, :name => 'tid', :class => ::Tid},
      PWD => {:type => ::Thrift::Types::STRING, :name => 'pwd'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimLogin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimAck_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AB = 1

    FIELDS = {
      AB => {:type => ::Thrift::Types::STRUCT, :name => 'ab', :class => ::TimAckBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimAck_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimPresence_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PBEAN = 1

    FIELDS = {
      PBEAN => {:type => ::Thrift::Types::STRUCT, :name => 'pbean', :class => ::TimPBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimPresence_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MBEAN = 1

    FIELDS = {
      MBEAN => {:type => ::Thrift::Types::STRUCT, :name => 'mbean', :class => ::TimMBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimPing_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    THREADID = 1

    FIELDS = {
      THREADID => {:type => ::Thrift::Types::STRING, :name => 'threadId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimPing_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimError_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TimError}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimError_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimLogout_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimLogout_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRegist_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TID = 1
    AUTH = 2

    FIELDS = {
      TID => {:type => ::Thrift::Types::STRUCT, :name => 'tid', :class => ::Tid},
      AUTH => {:type => ::Thrift::Types::STRING, :name => 'auth'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRegist_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRoser_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROSTER = 1

    FIELDS = {
      ROSTER => {:type => ::Thrift::Types::STRUCT, :name => 'roster', :class => ::TimRoster}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRoser_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessageList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MBEANLIST = 1

    FIELDS = {
      MBEANLIST => {:type => ::Thrift::Types::STRUCT, :name => 'mbeanList', :class => ::TimMBeanList}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessageList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimPresenceList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PBEANLIST = 1

    FIELDS = {
      PBEANLIST => {:type => ::Thrift::Types::STRUCT, :name => 'pbeanList', :class => ::TimPBeanList}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimPresenceList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessageIq_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TIMMSGIQ = 1
    IQTYPE = 2

    FIELDS = {
      TIMMSGIQ => {:type => ::Thrift::Types::STRUCT, :name => 'timMsgIq', :class => ::TimMessageIq},
      IQTYPE => {:type => ::Thrift::Types::STRING, :name => 'iqType'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessageIq_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessageResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MBEAN = 1

    FIELDS = {
      MBEAN => {:type => ::Thrift::Types::STRUCT, :name => 'mbean', :class => ::TimMBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimMessageResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimProperty_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TPB = 1

    FIELDS = {
      TPB => {:type => ::Thrift::Types::STRUCT, :name => 'tpb', :class => ::TimPropertyBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimProperty_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRemoteUserAuth_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TID = 1
    PWD = 2
    AUTH = 3

    FIELDS = {
      TID => {:type => ::Thrift::Types::STRUCT, :name => 'tid', :class => ::Tid},
      PWD => {:type => ::Thrift::Types::STRING, :name => 'pwd'},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRemoteUserAuth_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimRemoteUserBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRemoteUserGet_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TID = 1
    AUTH = 2

    FIELDS = {
      TID => {:type => ::Thrift::Types::STRUCT, :name => 'tid', :class => ::Tid},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRemoteUserGet_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimRemoteUserBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRemoteUserEdit_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TID = 1
    UB = 2
    AUTH = 3

    FIELDS = {
      TID => {:type => ::Thrift::Types::STRUCT, :name => 'tid', :class => ::Tid},
      UB => {:type => ::Thrift::Types::STRUCT, :name => 'ub', :class => ::TimUserBean},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimRemoteUserEdit_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimRemoteUserBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponsePresence_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PBEAN = 1
    AUTH = 2

    FIELDS = {
      PBEAN => {:type => ::Thrift::Types::STRUCT, :name => 'pbean', :class => ::TimPBean},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponsePresence_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimResponseBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponseMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MBEAN = 1
    AUTH = 2

    FIELDS = {
      MBEAN => {:type => ::Thrift::Types::STRUCT, :name => 'mbean', :class => ::TimMBean},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponseMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimResponseBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponseMessageIq_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TIMMSGIQ = 1
    IQTYPE = 2
    AUTH = 3

    FIELDS = {
      TIMMSGIQ => {:type => ::Thrift::Types::STRUCT, :name => 'timMsgIq', :class => ::TimMessageIq},
      IQTYPE => {:type => ::Thrift::Types::STRING, :name => 'iqType'},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponseMessageIq_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimMBeanList}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponsePresenceList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PBEANLIST = 1
    AUTH = 2

    FIELDS = {
      PBEANLIST => {:type => ::Thrift::Types::STRUCT, :name => 'pbeanList', :class => ::TimPBeanList},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponsePresenceList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimResponseBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponseMessageList_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    MBEANLIST = 1
    AUTH = 2

    FIELDS = {
      MBEANLIST => {:type => ::Thrift::Types::STRUCT, :name => 'mbeanList', :class => ::TimMBeanList},
      AUTH => {:type => ::Thrift::Types::STRUCT, :name => 'auth', :class => ::TimAuth}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class TimResponseMessageList_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TimResponseBean}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

