// Code generated by Thrift Compiler (0.20.0). DO NOT EDIT.

package stub

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/donnie4w/gothrift/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Username
//  - Password
//  - Domain
type AuthBean struct {
  Username *string `thrift:"username,1" db:"username" json:"username,omitempty"`
  Password *string `thrift:"password,2" db:"password" json:"password,omitempty"`
  Domain *string `thrift:"domain,3" db:"domain" json:"domain,omitempty"`
}

func NewAuthBean() *AuthBean {
  return &AuthBean{}
}

var AuthBean_Username_DEFAULT string
func (p *AuthBean) GetUsername() string {
  if !p.IsSetUsername() {
    return AuthBean_Username_DEFAULT
  }
  return *p.Username
}
var AuthBean_Password_DEFAULT string
func (p *AuthBean) GetPassword() string {
  if !p.IsSetPassword() {
    return AuthBean_Password_DEFAULT
  }
  return *p.Password
}
var AuthBean_Domain_DEFAULT string
func (p *AuthBean) GetDomain() string {
  if !p.IsSetDomain() {
    return AuthBean_Domain_DEFAULT
  }
  return *p.Domain
}
func (p *AuthBean) IsSetUsername() bool {
  return p.Username != nil
}

func (p *AuthBean) IsSetPassword() bool {
  return p.Password != nil
}

func (p *AuthBean) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *AuthBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Username = &v
}
  return nil
}

func (p *AuthBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = &v
}
  return nil
}

func (p *AuthBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *AuthBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AuthBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUsername() {
    if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Username)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err) }
  }
  return err
}

func (p *AuthBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPassword() {
    if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Password)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  }
  return err
}

func (p *AuthBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err) }
  }
  return err
}

func (p *AuthBean) Equals(other *AuthBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Username != other.Username {
    if p.Username == nil || other.Username == nil {
      return false
    }
    if (*p.Username) != (*other.Username) { return false }
  }
  if p.Password != other.Password {
    if p.Password == nil || other.Password == nil {
      return false
    }
    if (*p.Password) != (*other.Password) { return false }
  }
  if p.Domain != other.Domain {
    if p.Domain == nil || other.Domain == nil {
      return false
    }
    if (*p.Domain) != (*other.Domain) { return false }
  }
  return true
}

func (p *AuthBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthBean(%+v)", *p)
}

func (p *AuthBean) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AuthBean",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AuthBean)(nil)

func (p *AuthBean) Validate() error {
  return nil
}
// Attributes:
//  - Node
//  - Domain
//  - Resource
//  - Termtyp
//  - Extend
type AdmTid struct {
  Node string `thrift:"node,1,required" db:"node" json:"node"`
  Domain *string `thrift:"domain,2" db:"domain" json:"domain,omitempty"`
  Resource *string `thrift:"resource,3" db:"resource" json:"resource,omitempty"`
  Termtyp *int8 `thrift:"termtyp,4" db:"termtyp" json:"termtyp,omitempty"`
  Extend map[string]string `thrift:"extend,5" db:"extend" json:"extend,omitempty"`
}

func NewAdmTid() *AdmTid {
  return &AdmTid{}
}


func (p *AdmTid) GetNode() string {
  return p.Node
}
var AdmTid_Domain_DEFAULT string
func (p *AdmTid) GetDomain() string {
  if !p.IsSetDomain() {
    return AdmTid_Domain_DEFAULT
  }
  return *p.Domain
}
var AdmTid_Resource_DEFAULT string
func (p *AdmTid) GetResource() string {
  if !p.IsSetResource() {
    return AdmTid_Resource_DEFAULT
  }
  return *p.Resource
}
var AdmTid_Termtyp_DEFAULT int8
func (p *AdmTid) GetTermtyp() int8 {
  if !p.IsSetTermtyp() {
    return AdmTid_Termtyp_DEFAULT
  }
  return *p.Termtyp
}
var AdmTid_Extend_DEFAULT map[string]string

func (p *AdmTid) GetExtend() map[string]string {
  return p.Extend
}
func (p *AdmTid) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *AdmTid) IsSetResource() bool {
  return p.Resource != nil
}

func (p *AdmTid) IsSetTermtyp() bool {
  return p.Termtyp != nil
}

func (p *AdmTid) IsSetExtend() bool {
  return p.Extend != nil
}

func (p *AdmTid) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetNode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Node is not set"));
  }
  return nil
}

func (p *AdmTid)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Node = v
}
  return nil
}

func (p *AdmTid)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *AdmTid)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Resource = &v
}
  return nil
}

func (p *AdmTid)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.Termtyp = &temp
}
  return nil
}

func (p *AdmTid)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Extend[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmTid) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmTid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmTid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Node)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *AdmTid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err) }
  }
  return err
}

func (p *AdmTid) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResource() {
    if err := oprot.WriteFieldBegin(ctx, "resource", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resource: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Resource)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resource (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resource: ", p), err) }
  }
  return err
}

func (p *AdmTid) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTermtyp() {
    if err := oprot.WriteFieldBegin(ctx, "termtyp", thrift.BYTE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:termtyp: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.Termtyp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.termtyp (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:termtyp: ", p), err) }
  }
  return err
}

func (p *AdmTid) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtend() {
    if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extend: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extend {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extend: ", p), err) }
  }
  return err
}

func (p *AdmTid) Equals(other *AdmTid) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Node != other.Node { return false }
  if p.Domain != other.Domain {
    if p.Domain == nil || other.Domain == nil {
      return false
    }
    if (*p.Domain) != (*other.Domain) { return false }
  }
  if p.Resource != other.Resource {
    if p.Resource == nil || other.Resource == nil {
      return false
    }
    if (*p.Resource) != (*other.Resource) { return false }
  }
  if p.Termtyp != other.Termtyp {
    if p.Termtyp == nil || other.Termtyp == nil {
      return false
    }
    if (*p.Termtyp) != (*other.Termtyp) { return false }
  }
  if len(p.Extend) != len(other.Extend) { return false }
  for k, _tgt := range p.Extend {
    _src2 := other.Extend[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *AdmTid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmTid(%+v)", *p)
}

func (p *AdmTid) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmTid",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmTid)(nil)

func (p *AdmTid) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - Password
//  - Domain
type AdmToken struct {
  Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
  Password *string `thrift:"password,2" db:"password" json:"password,omitempty"`
  Domain *string `thrift:"domain,3" db:"domain" json:"domain,omitempty"`
}

func NewAdmToken() *AdmToken {
  return &AdmToken{}
}

var AdmToken_Name_DEFAULT string
func (p *AdmToken) GetName() string {
  if !p.IsSetName() {
    return AdmToken_Name_DEFAULT
  }
  return *p.Name
}
var AdmToken_Password_DEFAULT string
func (p *AdmToken) GetPassword() string {
  if !p.IsSetPassword() {
    return AdmToken_Password_DEFAULT
  }
  return *p.Password
}
var AdmToken_Domain_DEFAULT string
func (p *AdmToken) GetDomain() string {
  if !p.IsSetDomain() {
    return AdmToken_Domain_DEFAULT
  }
  return *p.Domain
}
func (p *AdmToken) IsSetName() bool {
  return p.Name != nil
}

func (p *AdmToken) IsSetPassword() bool {
  return p.Password != nil
}

func (p *AdmToken) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *AdmToken) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmToken)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *AdmToken)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Password = &v
}
  return nil
}

func (p *AdmToken)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *AdmToken) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmToken"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmToken) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *AdmToken) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPassword() {
    if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Password)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err) }
  }
  return err
}

func (p *AdmToken) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err) }
  }
  return err
}

func (p *AdmToken) Equals(other *AdmToken) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name {
    if p.Name == nil || other.Name == nil {
      return false
    }
    if (*p.Name) != (*other.Name) { return false }
  }
  if p.Password != other.Password {
    if p.Password == nil || other.Password == nil {
      return false
    }
    if (*p.Password) != (*other.Password) { return false }
  }
  if p.Domain != other.Domain {
    if p.Domain == nil || other.Domain == nil {
      return false
    }
    if (*p.Domain) != (*other.Domain) { return false }
  }
  return true
}

func (p *AdmToken) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmToken(%+v)", *p)
}

func (p *AdmToken) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmToken",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmToken)(nil)

func (p *AdmToken) Validate() error {
  return nil
}
// Attributes:
//  - MsType
//  - OdType
//  - ID
//  - Mid
//  - BnType
//  - FromNode
//  - ToNode
//  - RoomNode
//  - DataBinary
//  - DataString
//  - Udtype
//  - Udshow
//  - Extend
//  - Extra
type AdmMessageBean struct {
  MsType int8 `thrift:"msType,1,required" db:"msType" json:"msType"`
  OdType int8 `thrift:"odType,2,required" db:"odType" json:"odType"`
  ID *int64 `thrift:"id,3" db:"id" json:"id,omitempty"`
  Mid *int64 `thrift:"mid,4" db:"mid" json:"mid,omitempty"`
  BnType *int32 `thrift:"bnType,5" db:"bnType" json:"bnType,omitempty"`
  FromNode *string `thrift:"fromNode,6" db:"fromNode" json:"fromNode,omitempty"`
  ToNode *string `thrift:"toNode,7" db:"toNode" json:"toNode,omitempty"`
  RoomNode *string `thrift:"roomNode,8" db:"roomNode" json:"roomNode,omitempty"`
  DataBinary []byte `thrift:"dataBinary,9" db:"dataBinary" json:"dataBinary,omitempty"`
  DataString *string `thrift:"dataString,10" db:"dataString" json:"dataString,omitempty"`
  Udtype *int16 `thrift:"udtype,11" db:"udtype" json:"udtype,omitempty"`
  Udshow *int16 `thrift:"udshow,12" db:"udshow" json:"udshow,omitempty"`
  Extend map[string]string `thrift:"extend,13" db:"extend" json:"extend,omitempty"`
  Extra map[string][]byte `thrift:"extra,14" db:"extra" json:"extra,omitempty"`
}

func NewAdmMessageBean() *AdmMessageBean {
  return &AdmMessageBean{}
}


func (p *AdmMessageBean) GetMsType() int8 {
  return p.MsType
}

func (p *AdmMessageBean) GetOdType() int8 {
  return p.OdType
}
var AdmMessageBean_ID_DEFAULT int64
func (p *AdmMessageBean) GetID() int64 {
  if !p.IsSetID() {
    return AdmMessageBean_ID_DEFAULT
  }
  return *p.ID
}
var AdmMessageBean_Mid_DEFAULT int64
func (p *AdmMessageBean) GetMid() int64 {
  if !p.IsSetMid() {
    return AdmMessageBean_Mid_DEFAULT
  }
  return *p.Mid
}
var AdmMessageBean_BnType_DEFAULT int32
func (p *AdmMessageBean) GetBnType() int32 {
  if !p.IsSetBnType() {
    return AdmMessageBean_BnType_DEFAULT
  }
  return *p.BnType
}
var AdmMessageBean_FromNode_DEFAULT string
func (p *AdmMessageBean) GetFromNode() string {
  if !p.IsSetFromNode() {
    return AdmMessageBean_FromNode_DEFAULT
  }
  return *p.FromNode
}
var AdmMessageBean_ToNode_DEFAULT string
func (p *AdmMessageBean) GetToNode() string {
  if !p.IsSetToNode() {
    return AdmMessageBean_ToNode_DEFAULT
  }
  return *p.ToNode
}
var AdmMessageBean_RoomNode_DEFAULT string
func (p *AdmMessageBean) GetRoomNode() string {
  if !p.IsSetRoomNode() {
    return AdmMessageBean_RoomNode_DEFAULT
  }
  return *p.RoomNode
}
var AdmMessageBean_DataBinary_DEFAULT []byte

func (p *AdmMessageBean) GetDataBinary() []byte {
  return p.DataBinary
}
var AdmMessageBean_DataString_DEFAULT string
func (p *AdmMessageBean) GetDataString() string {
  if !p.IsSetDataString() {
    return AdmMessageBean_DataString_DEFAULT
  }
  return *p.DataString
}
var AdmMessageBean_Udtype_DEFAULT int16
func (p *AdmMessageBean) GetUdtype() int16 {
  if !p.IsSetUdtype() {
    return AdmMessageBean_Udtype_DEFAULT
  }
  return *p.Udtype
}
var AdmMessageBean_Udshow_DEFAULT int16
func (p *AdmMessageBean) GetUdshow() int16 {
  if !p.IsSetUdshow() {
    return AdmMessageBean_Udshow_DEFAULT
  }
  return *p.Udshow
}
var AdmMessageBean_Extend_DEFAULT map[string]string

func (p *AdmMessageBean) GetExtend() map[string]string {
  return p.Extend
}
var AdmMessageBean_Extra_DEFAULT map[string][]byte

func (p *AdmMessageBean) GetExtra() map[string][]byte {
  return p.Extra
}
func (p *AdmMessageBean) IsSetID() bool {
  return p.ID != nil
}

func (p *AdmMessageBean) IsSetMid() bool {
  return p.Mid != nil
}

func (p *AdmMessageBean) IsSetBnType() bool {
  return p.BnType != nil
}

func (p *AdmMessageBean) IsSetFromNode() bool {
  return p.FromNode != nil
}

func (p *AdmMessageBean) IsSetToNode() bool {
  return p.ToNode != nil
}

func (p *AdmMessageBean) IsSetRoomNode() bool {
  return p.RoomNode != nil
}

func (p *AdmMessageBean) IsSetDataBinary() bool {
  return p.DataBinary != nil
}

func (p *AdmMessageBean) IsSetDataString() bool {
  return p.DataString != nil
}

func (p *AdmMessageBean) IsSetUdtype() bool {
  return p.Udtype != nil
}

func (p *AdmMessageBean) IsSetUdshow() bool {
  return p.Udshow != nil
}

func (p *AdmMessageBean) IsSetExtend() bool {
  return p.Extend != nil
}

func (p *AdmMessageBean) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *AdmMessageBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMsType bool = false;
  var issetOdType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMsType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetOdType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMsType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MsType is not set"));
  }
  if !issetOdType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OdType is not set"));
  }
  return nil
}

func (p *AdmMessageBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.MsType = temp
}
  return nil
}

func (p *AdmMessageBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.OdType = temp
}
  return nil
}

func (p *AdmMessageBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mid = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BnType = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.FromNode = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ToNode = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RoomNode = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DataBinary = v
}
  return nil
}

func (p *AdmMessageBean)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DataString = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Udtype = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Udshow = &v
}
  return nil
}

func (p *AdmMessageBean)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.Extend[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmMessageBean)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
var _val6 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val6 = v
}
    p.Extra[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmMessageBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmMessageBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmMessageBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "msType", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msType: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.MsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msType: ", p), err) }
  return err
}

func (p *AdmMessageBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "odType", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:odType: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.OdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.odType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:odType: ", p), err) }
  return err
}

func (p *AdmMessageBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMid() {
    if err := oprot.WriteFieldBegin(ctx, "mid", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Mid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mid (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mid: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBnType() {
    if err := oprot.WriteFieldBegin(ctx, "bnType", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bnType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.BnType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bnType (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bnType: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromNode() {
    if err := oprot.WriteFieldBegin(ctx, "fromNode", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fromNode: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.FromNode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fromNode (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fromNode: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToNode() {
    if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:toNode: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ToNode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.toNode (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:toNode: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRoomNode() {
    if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:roomNode: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RoomNode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.roomNode (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:roomNode: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDataBinary() {
    if err := oprot.WriteFieldBegin(ctx, "dataBinary", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:dataBinary: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.DataBinary); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataBinary (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:dataBinary: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDataString() {
    if err := oprot.WriteFieldBegin(ctx, "dataString", thrift.STRING, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:dataString: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DataString)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataString (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:dataString: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUdtype() {
    if err := oprot.WriteFieldBegin(ctx, "udtype", thrift.I16, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:udtype: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.Udtype)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.udtype (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:udtype: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUdshow() {
    if err := oprot.WriteFieldBegin(ctx, "udshow", thrift.I16, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:udshow: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.Udshow)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.udshow (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:udshow: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtend() {
    if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:extend: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extend {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:extend: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:extra: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:extra: ", p), err) }
  }
  return err
}

func (p *AdmMessageBean) Equals(other *AdmMessageBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MsType != other.MsType { return false }
  if p.OdType != other.OdType { return false }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if p.Mid != other.Mid {
    if p.Mid == nil || other.Mid == nil {
      return false
    }
    if (*p.Mid) != (*other.Mid) { return false }
  }
  if p.BnType != other.BnType {
    if p.BnType == nil || other.BnType == nil {
      return false
    }
    if (*p.BnType) != (*other.BnType) { return false }
  }
  if p.FromNode != other.FromNode {
    if p.FromNode == nil || other.FromNode == nil {
      return false
    }
    if (*p.FromNode) != (*other.FromNode) { return false }
  }
  if p.ToNode != other.ToNode {
    if p.ToNode == nil || other.ToNode == nil {
      return false
    }
    if (*p.ToNode) != (*other.ToNode) { return false }
  }
  if p.RoomNode != other.RoomNode {
    if p.RoomNode == nil || other.RoomNode == nil {
      return false
    }
    if (*p.RoomNode) != (*other.RoomNode) { return false }
  }
  if bytes.Compare(p.DataBinary, other.DataBinary) != 0 { return false }
  if p.DataString != other.DataString {
    if p.DataString == nil || other.DataString == nil {
      return false
    }
    if (*p.DataString) != (*other.DataString) { return false }
  }
  if p.Udtype != other.Udtype {
    if p.Udtype == nil || other.Udtype == nil {
      return false
    }
    if (*p.Udtype) != (*other.Udtype) { return false }
  }
  if p.Udshow != other.Udshow {
    if p.Udshow == nil || other.Udshow == nil {
      return false
    }
    if (*p.Udshow) != (*other.Udshow) { return false }
  }
  if len(p.Extend) != len(other.Extend) { return false }
  for k, _tgt := range p.Extend {
    _src7 := other.Extend[k]
    if _tgt != _src7 { return false }
  }
  if len(p.Extra) != len(other.Extra) { return false }
  for k, _tgt := range p.Extra {
    _src8 := other.Extra[k]
    if bytes.Compare(_tgt, _src8) != 0 { return false }
  }
  return true
}

func (p *AdmMessageBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmMessageBean(%+v)", *p)
}

func (p *AdmMessageBean) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmMessageBean",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmMessageBean)(nil)

func (p *AdmMessageBean) Validate() error {
  return nil
}
// Attributes:
//  - Nodes
//  - Msgbean
type AdmMessage struct {
  Nodes []string `thrift:"nodes,1" db:"nodes" json:"nodes,omitempty"`
  Msgbean *AdmMessageBean `thrift:"msgbean,2" db:"msgbean" json:"msgbean,omitempty"`
}

func NewAdmMessage() *AdmMessage {
  return &AdmMessage{}
}

var AdmMessage_Nodes_DEFAULT []string

func (p *AdmMessage) GetNodes() []string {
  return p.Nodes
}
var AdmMessage_Msgbean_DEFAULT *AdmMessageBean
func (p *AdmMessage) GetMsgbean() *AdmMessageBean {
  if !p.IsSetMsgbean() {
    return AdmMessage_Msgbean_DEFAULT
  }
  return p.Msgbean
}
func (p *AdmMessage) IsSetNodes() bool {
  return p.Nodes != nil
}

func (p *AdmMessage) IsSetMsgbean() bool {
  return p.Msgbean != nil
}

func (p *AdmMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.Nodes = append(p.Nodes, _elem9)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdmMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Msgbean = &AdmMessageBean{}
  if err := p.Msgbean.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Msgbean), err)
  }
  return nil
}

func (p *AdmMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNodes() {
    if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodes: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nodes {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodes: ", p), err) }
  }
  return err
}

func (p *AdmMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMsgbean() {
    if err := oprot.WriteFieldBegin(ctx, "msgbean", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msgbean: ", p), err) }
    if err := p.Msgbean.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Msgbean), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msgbean: ", p), err) }
  }
  return err
}

func (p *AdmMessage) Equals(other *AdmMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Nodes) != len(other.Nodes) { return false }
  for i, _tgt := range p.Nodes {
    _src10 := other.Nodes[i]
    if _tgt != _src10 { return false }
  }
  if !p.Msgbean.Equals(other.Msgbean) { return false }
  return true
}

func (p *AdmMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmMessage(%+v)", *p)
}

func (p *AdmMessage) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmMessage",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmMessage)(nil)

func (p *AdmMessage) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - NickName
//  - Brithday
//  - Gender
//  - Cover
//  - Area
//  - Createtime
//  - PhotoTidAlbum
//  - Extend
//  - Extra
type AdmUserBean struct {
  Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
  NickName *string `thrift:"nickName,2" db:"nickName" json:"nickName,omitempty"`
  // unused field # 3
  Brithday *string `thrift:"brithday,4" db:"brithday" json:"brithday,omitempty"`
  Gender *int8 `thrift:"gender,5" db:"gender" json:"gender,omitempty"`
  Cover *string `thrift:"cover,6" db:"cover" json:"cover,omitempty"`
  Area *string `thrift:"area,7" db:"area" json:"area,omitempty"`
  Createtime *int64 `thrift:"createtime,8" db:"createtime" json:"createtime,omitempty"`
  PhotoTidAlbum []string `thrift:"photoTidAlbum,9" db:"photoTidAlbum" json:"photoTidAlbum,omitempty"`
  Extend map[string]string `thrift:"extend,10" db:"extend" json:"extend,omitempty"`
  Extra map[string][]byte `thrift:"extra,11" db:"extra" json:"extra,omitempty"`
}

func NewAdmUserBean() *AdmUserBean {
  return &AdmUserBean{}
}

var AdmUserBean_Name_DEFAULT string
func (p *AdmUserBean) GetName() string {
  if !p.IsSetName() {
    return AdmUserBean_Name_DEFAULT
  }
  return *p.Name
}
var AdmUserBean_NickName_DEFAULT string
func (p *AdmUserBean) GetNickName() string {
  if !p.IsSetNickName() {
    return AdmUserBean_NickName_DEFAULT
  }
  return *p.NickName
}
var AdmUserBean_Brithday_DEFAULT string
func (p *AdmUserBean) GetBrithday() string {
  if !p.IsSetBrithday() {
    return AdmUserBean_Brithday_DEFAULT
  }
  return *p.Brithday
}
var AdmUserBean_Gender_DEFAULT int8
func (p *AdmUserBean) GetGender() int8 {
  if !p.IsSetGender() {
    return AdmUserBean_Gender_DEFAULT
  }
  return *p.Gender
}
var AdmUserBean_Cover_DEFAULT string
func (p *AdmUserBean) GetCover() string {
  if !p.IsSetCover() {
    return AdmUserBean_Cover_DEFAULT
  }
  return *p.Cover
}
var AdmUserBean_Area_DEFAULT string
func (p *AdmUserBean) GetArea() string {
  if !p.IsSetArea() {
    return AdmUserBean_Area_DEFAULT
  }
  return *p.Area
}
var AdmUserBean_Createtime_DEFAULT int64
func (p *AdmUserBean) GetCreatetime() int64 {
  if !p.IsSetCreatetime() {
    return AdmUserBean_Createtime_DEFAULT
  }
  return *p.Createtime
}
var AdmUserBean_PhotoTidAlbum_DEFAULT []string

func (p *AdmUserBean) GetPhotoTidAlbum() []string {
  return p.PhotoTidAlbum
}
var AdmUserBean_Extend_DEFAULT map[string]string

func (p *AdmUserBean) GetExtend() map[string]string {
  return p.Extend
}
var AdmUserBean_Extra_DEFAULT map[string][]byte

func (p *AdmUserBean) GetExtra() map[string][]byte {
  return p.Extra
}
func (p *AdmUserBean) IsSetName() bool {
  return p.Name != nil
}

func (p *AdmUserBean) IsSetNickName() bool {
  return p.NickName != nil
}

func (p *AdmUserBean) IsSetBrithday() bool {
  return p.Brithday != nil
}

func (p *AdmUserBean) IsSetGender() bool {
  return p.Gender != nil
}

func (p *AdmUserBean) IsSetCover() bool {
  return p.Cover != nil
}

func (p *AdmUserBean) IsSetArea() bool {
  return p.Area != nil
}

func (p *AdmUserBean) IsSetCreatetime() bool {
  return p.Createtime != nil
}

func (p *AdmUserBean) IsSetPhotoTidAlbum() bool {
  return p.PhotoTidAlbum != nil
}

func (p *AdmUserBean) IsSetExtend() bool {
  return p.Extend != nil
}

func (p *AdmUserBean) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *AdmUserBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmUserBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *AdmUserBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NickName = &v
}
  return nil
}

func (p *AdmUserBean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Brithday = &v
}
  return nil
}

func (p *AdmUserBean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.Gender = &temp
}
  return nil
}

func (p *AdmUserBean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Cover = &v
}
  return nil
}

func (p *AdmUserBean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Area = &v
}
  return nil
}

func (p *AdmUserBean)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Createtime = &v
}
  return nil
}

func (p *AdmUserBean)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PhotoTidAlbum =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.PhotoTidAlbum = append(p.PhotoTidAlbum, _elem11)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdmUserBean)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
var _val13 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val13 = v
}
    p.Extend[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmUserBean)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
var _val15 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val15 = v
}
    p.Extra[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmUserBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmUserBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmUserBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNickName() {
    if err := oprot.WriteFieldBegin(ctx, "nickName", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.NickName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nickName (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickName: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBrithday() {
    if err := oprot.WriteFieldBegin(ctx, "brithday", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:brithday: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Brithday)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.brithday (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:brithday: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGender() {
    if err := oprot.WriteFieldBegin(ctx, "gender", thrift.BYTE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gender: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.Gender)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gender (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gender: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCover() {
    if err := oprot.WriteFieldBegin(ctx, "cover", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cover: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Cover)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cover (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cover: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetArea() {
    if err := oprot.WriteFieldBegin(ctx, "area", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:area: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Area)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.area (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:area: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatetime() {
    if err := oprot.WriteFieldBegin(ctx, "createtime", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createtime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Createtime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createtime (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createtime: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPhotoTidAlbum() {
    if err := oprot.WriteFieldBegin(ctx, "photoTidAlbum", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:photoTidAlbum: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhotoTidAlbum)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.PhotoTidAlbum {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:photoTidAlbum: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtend() {
    if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extend: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extend {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extend: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extra: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extra: ", p), err) }
  }
  return err
}

func (p *AdmUserBean) Equals(other *AdmUserBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name {
    if p.Name == nil || other.Name == nil {
      return false
    }
    if (*p.Name) != (*other.Name) { return false }
  }
  if p.NickName != other.NickName {
    if p.NickName == nil || other.NickName == nil {
      return false
    }
    if (*p.NickName) != (*other.NickName) { return false }
  }
  if p.Brithday != other.Brithday {
    if p.Brithday == nil || other.Brithday == nil {
      return false
    }
    if (*p.Brithday) != (*other.Brithday) { return false }
  }
  if p.Gender != other.Gender {
    if p.Gender == nil || other.Gender == nil {
      return false
    }
    if (*p.Gender) != (*other.Gender) { return false }
  }
  if p.Cover != other.Cover {
    if p.Cover == nil || other.Cover == nil {
      return false
    }
    if (*p.Cover) != (*other.Cover) { return false }
  }
  if p.Area != other.Area {
    if p.Area == nil || other.Area == nil {
      return false
    }
    if (*p.Area) != (*other.Area) { return false }
  }
  if p.Createtime != other.Createtime {
    if p.Createtime == nil || other.Createtime == nil {
      return false
    }
    if (*p.Createtime) != (*other.Createtime) { return false }
  }
  if len(p.PhotoTidAlbum) != len(other.PhotoTidAlbum) { return false }
  for i, _tgt := range p.PhotoTidAlbum {
    _src16 := other.PhotoTidAlbum[i]
    if _tgt != _src16 { return false }
  }
  if len(p.Extend) != len(other.Extend) { return false }
  for k, _tgt := range p.Extend {
    _src17 := other.Extend[k]
    if _tgt != _src17 { return false }
  }
  if len(p.Extra) != len(other.Extra) { return false }
  for k, _tgt := range p.Extra {
    _src18 := other.Extra[k]
    if bytes.Compare(_tgt, _src18) != 0 { return false }
  }
  return true
}

func (p *AdmUserBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmUserBean(%+v)", *p)
}

func (p *AdmUserBean) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmUserBean",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmUserBean)(nil)

func (p *AdmUserBean) Validate() error {
  return nil
}
// Attributes:
//  - Node
//  - Userbean
type AdmModifyUserInfo struct {
  Node *string `thrift:"node,1" db:"node" json:"node,omitempty"`
  Userbean *AdmUserBean `thrift:"userbean,2" db:"userbean" json:"userbean,omitempty"`
}

func NewAdmModifyUserInfo() *AdmModifyUserInfo {
  return &AdmModifyUserInfo{}
}

var AdmModifyUserInfo_Node_DEFAULT string
func (p *AdmModifyUserInfo) GetNode() string {
  if !p.IsSetNode() {
    return AdmModifyUserInfo_Node_DEFAULT
  }
  return *p.Node
}
var AdmModifyUserInfo_Userbean_DEFAULT *AdmUserBean
func (p *AdmModifyUserInfo) GetUserbean() *AdmUserBean {
  if !p.IsSetUserbean() {
    return AdmModifyUserInfo_Userbean_DEFAULT
  }
  return p.Userbean
}
func (p *AdmModifyUserInfo) IsSetNode() bool {
  return p.Node != nil
}

func (p *AdmModifyUserInfo) IsSetUserbean() bool {
  return p.Userbean != nil
}

func (p *AdmModifyUserInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmModifyUserInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Node = &v
}
  return nil
}

func (p *AdmModifyUserInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Userbean = &AdmUserBean{}
  if err := p.Userbean.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Userbean), err)
  }
  return nil
}

func (p *AdmModifyUserInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmModifyUserInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmModifyUserInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNode() {
    if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  }
  return err
}

func (p *AdmModifyUserInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserbean() {
    if err := oprot.WriteFieldBegin(ctx, "userbean", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userbean: ", p), err) }
    if err := p.Userbean.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Userbean), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userbean: ", p), err) }
  }
  return err
}

func (p *AdmModifyUserInfo) Equals(other *AdmModifyUserInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Node != other.Node {
    if p.Node == nil || other.Node == nil {
      return false
    }
    if (*p.Node) != (*other.Node) { return false }
  }
  if !p.Userbean.Equals(other.Userbean) { return false }
  return true
}

func (p *AdmModifyUserInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmModifyUserInfo(%+v)", *p)
}

func (p *AdmModifyUserInfo) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmModifyUserInfo",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmModifyUserInfo)(nil)

func (p *AdmModifyUserInfo) Validate() error {
  return nil
}
type AdmModifyRoomInfo struct {
}

func NewAdmModifyRoomInfo() *AdmModifyRoomInfo {
  return &AdmModifyRoomInfo{}
}

func (p *AdmModifyRoomInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmModifyRoomInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmModifyRoomInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmModifyRoomInfo) Equals(other *AdmModifyRoomInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *AdmModifyRoomInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmModifyRoomInfo(%+v)", *p)
}

func (p *AdmModifyRoomInfo) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmModifyRoomInfo",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmModifyRoomInfo)(nil)

func (p *AdmModifyRoomInfo) Validate() error {
  return nil
}
// Attributes:
//  - Nodelist
type AdmNodeList struct {
  Nodelist []string `thrift:"nodelist,1" db:"nodelist" json:"nodelist,omitempty"`
}

func NewAdmNodeList() *AdmNodeList {
  return &AdmNodeList{}
}

var AdmNodeList_Nodelist_DEFAULT []string

func (p *AdmNodeList) GetNodelist() []string {
  return p.Nodelist
}
func (p *AdmNodeList) IsSetNodelist() bool {
  return p.Nodelist != nil
}

func (p *AdmNodeList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmNodeList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Nodelist =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.Nodelist = append(p.Nodelist, _elem19)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdmNodeList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmNodeList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmNodeList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNodelist() {
    if err := oprot.WriteFieldBegin(ctx, "nodelist", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodelist: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodelist)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nodelist {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodelist: ", p), err) }
  }
  return err
}

func (p *AdmNodeList) Equals(other *AdmNodeList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Nodelist) != len(other.Nodelist) { return false }
  for i, _tgt := range p.Nodelist {
    _src20 := other.Nodelist[i]
    if _tgt != _src20 { return false }
  }
  return true
}

func (p *AdmNodeList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmNodeList(%+v)", *p)
}

func (p *AdmNodeList) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmNodeList",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmNodeList)(nil)

func (p *AdmNodeList) Validate() error {
  return nil
}
// Attributes:
//  - Node
//  - Rtype
type AdmVroomBean struct {
  Node *string `thrift:"node,1" db:"node" json:"node,omitempty"`
  Rtype *int8 `thrift:"rtype,2" db:"rtype" json:"rtype,omitempty"`
}

func NewAdmVroomBean() *AdmVroomBean {
  return &AdmVroomBean{}
}

var AdmVroomBean_Node_DEFAULT string
func (p *AdmVroomBean) GetNode() string {
  if !p.IsSetNode() {
    return AdmVroomBean_Node_DEFAULT
  }
  return *p.Node
}
var AdmVroomBean_Rtype_DEFAULT int8
func (p *AdmVroomBean) GetRtype() int8 {
  if !p.IsSetRtype() {
    return AdmVroomBean_Rtype_DEFAULT
  }
  return *p.Rtype
}
func (p *AdmVroomBean) IsSetNode() bool {
  return p.Node != nil
}

func (p *AdmVroomBean) IsSetRtype() bool {
  return p.Rtype != nil
}

func (p *AdmVroomBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmVroomBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Node = &v
}
  return nil
}

func (p *AdmVroomBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.Rtype = &temp
}
  return nil
}

func (p *AdmVroomBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmVroomBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmVroomBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNode() {
    if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  }
  return err
}

func (p *AdmVroomBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRtype() {
    if err := oprot.WriteFieldBegin(ctx, "rtype", thrift.BYTE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rtype: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.Rtype)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rtype (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rtype: ", p), err) }
  }
  return err
}

func (p *AdmVroomBean) Equals(other *AdmVroomBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Node != other.Node {
    if p.Node == nil || other.Node == nil {
      return false
    }
    if (*p.Node) != (*other.Node) { return false }
  }
  if p.Rtype != other.Rtype {
    if p.Rtype == nil || other.Rtype == nil {
      return false
    }
    if (*p.Rtype) != (*other.Rtype) { return false }
  }
  return true
}

func (p *AdmVroomBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmVroomBean(%+v)", *p)
}

func (p *AdmVroomBean) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmVroomBean",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmVroomBean)(nil)

func (p *AdmVroomBean) Validate() error {
  return nil
}
// Attributes:
//  - Node
//  - Topic
//  - Domain
//  - Gtype
type AdmRoomReq struct {
  Node *string `thrift:"node,1" db:"node" json:"node,omitempty"`
  Topic *string `thrift:"topic,2" db:"topic" json:"topic,omitempty"`
  Domain *string `thrift:"domain,3" db:"domain" json:"domain,omitempty"`
  Gtype *int8 `thrift:"gtype,4" db:"gtype" json:"gtype,omitempty"`
}

func NewAdmRoomReq() *AdmRoomReq {
  return &AdmRoomReq{}
}

var AdmRoomReq_Node_DEFAULT string
func (p *AdmRoomReq) GetNode() string {
  if !p.IsSetNode() {
    return AdmRoomReq_Node_DEFAULT
  }
  return *p.Node
}
var AdmRoomReq_Topic_DEFAULT string
func (p *AdmRoomReq) GetTopic() string {
  if !p.IsSetTopic() {
    return AdmRoomReq_Topic_DEFAULT
  }
  return *p.Topic
}
var AdmRoomReq_Domain_DEFAULT string
func (p *AdmRoomReq) GetDomain() string {
  if !p.IsSetDomain() {
    return AdmRoomReq_Domain_DEFAULT
  }
  return *p.Domain
}
var AdmRoomReq_Gtype_DEFAULT int8
func (p *AdmRoomReq) GetGtype() int8 {
  if !p.IsSetGtype() {
    return AdmRoomReq_Gtype_DEFAULT
  }
  return *p.Gtype
}
func (p *AdmRoomReq) IsSetNode() bool {
  return p.Node != nil
}

func (p *AdmRoomReq) IsSetTopic() bool {
  return p.Topic != nil
}

func (p *AdmRoomReq) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *AdmRoomReq) IsSetGtype() bool {
  return p.Gtype != nil
}

func (p *AdmRoomReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmRoomReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Node = &v
}
  return nil
}

func (p *AdmRoomReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Topic = &v
}
  return nil
}

func (p *AdmRoomReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *AdmRoomReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.Gtype = &temp
}
  return nil
}

func (p *AdmRoomReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmRoomReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmRoomReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNode() {
    if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  }
  return err
}

func (p *AdmRoomReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTopic() {
    if err := oprot.WriteFieldBegin(ctx, "topic", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topic: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Topic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.topic (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topic: ", p), err) }
  }
  return err
}

func (p *AdmRoomReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err) }
  }
  return err
}

func (p *AdmRoomReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGtype() {
    if err := oprot.WriteFieldBegin(ctx, "gtype", thrift.BYTE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gtype: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.Gtype)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gtype (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gtype: ", p), err) }
  }
  return err
}

func (p *AdmRoomReq) Equals(other *AdmRoomReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Node != other.Node {
    if p.Node == nil || other.Node == nil {
      return false
    }
    if (*p.Node) != (*other.Node) { return false }
  }
  if p.Topic != other.Topic {
    if p.Topic == nil || other.Topic == nil {
      return false
    }
    if (*p.Topic) != (*other.Topic) { return false }
  }
  if p.Domain != other.Domain {
    if p.Domain == nil || other.Domain == nil {
      return false
    }
    if (*p.Domain) != (*other.Domain) { return false }
  }
  if p.Gtype != other.Gtype {
    if p.Gtype == nil || other.Gtype == nil {
      return false
    }
    if (*p.Gtype) != (*other.Gtype) { return false }
  }
  return true
}

func (p *AdmRoomReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmRoomReq(%+v)", *p)
}

func (p *AdmRoomReq) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmRoomReq",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmRoomReq)(nil)

func (p *AdmRoomReq) Validate() error {
  return nil
}
// Attributes:
//  - Founder
//  - Managers
//  - Cover
//  - Topic
//  - Label
//  - Gtype
//  - Kind
//  - Createtime
//  - Extend
//  - Extra
type AdmTimRoom struct {
  Founder *string `thrift:"founder,1" db:"founder" json:"founder,omitempty"`
  Managers []string `thrift:"managers,2" db:"managers" json:"managers,omitempty"`
  Cover *string `thrift:"cover,3" db:"cover" json:"cover,omitempty"`
  Topic *string `thrift:"topic,4" db:"topic" json:"topic,omitempty"`
  Label *string `thrift:"label,5" db:"label" json:"label,omitempty"`
  Gtype *int8 `thrift:"gtype,6" db:"gtype" json:"gtype,omitempty"`
  Kind *int64 `thrift:"kind,7" db:"kind" json:"kind,omitempty"`
  Createtime *int64 `thrift:"createtime,8" db:"createtime" json:"createtime,omitempty"`
  Extend map[string]string `thrift:"extend,9" db:"extend" json:"extend,omitempty"`
  Extra map[string][]byte `thrift:"extra,10" db:"extra" json:"extra,omitempty"`
}

func NewAdmTimRoom() *AdmTimRoom {
  return &AdmTimRoom{}
}

var AdmTimRoom_Founder_DEFAULT string
func (p *AdmTimRoom) GetFounder() string {
  if !p.IsSetFounder() {
    return AdmTimRoom_Founder_DEFAULT
  }
  return *p.Founder
}
var AdmTimRoom_Managers_DEFAULT []string

func (p *AdmTimRoom) GetManagers() []string {
  return p.Managers
}
var AdmTimRoom_Cover_DEFAULT string
func (p *AdmTimRoom) GetCover() string {
  if !p.IsSetCover() {
    return AdmTimRoom_Cover_DEFAULT
  }
  return *p.Cover
}
var AdmTimRoom_Topic_DEFAULT string
func (p *AdmTimRoom) GetTopic() string {
  if !p.IsSetTopic() {
    return AdmTimRoom_Topic_DEFAULT
  }
  return *p.Topic
}
var AdmTimRoom_Label_DEFAULT string
func (p *AdmTimRoom) GetLabel() string {
  if !p.IsSetLabel() {
    return AdmTimRoom_Label_DEFAULT
  }
  return *p.Label
}
var AdmTimRoom_Gtype_DEFAULT int8
func (p *AdmTimRoom) GetGtype() int8 {
  if !p.IsSetGtype() {
    return AdmTimRoom_Gtype_DEFAULT
  }
  return *p.Gtype
}
var AdmTimRoom_Kind_DEFAULT int64
func (p *AdmTimRoom) GetKind() int64 {
  if !p.IsSetKind() {
    return AdmTimRoom_Kind_DEFAULT
  }
  return *p.Kind
}
var AdmTimRoom_Createtime_DEFAULT int64
func (p *AdmTimRoom) GetCreatetime() int64 {
  if !p.IsSetCreatetime() {
    return AdmTimRoom_Createtime_DEFAULT
  }
  return *p.Createtime
}
var AdmTimRoom_Extend_DEFAULT map[string]string

func (p *AdmTimRoom) GetExtend() map[string]string {
  return p.Extend
}
var AdmTimRoom_Extra_DEFAULT map[string][]byte

func (p *AdmTimRoom) GetExtra() map[string][]byte {
  return p.Extra
}
func (p *AdmTimRoom) IsSetFounder() bool {
  return p.Founder != nil
}

func (p *AdmTimRoom) IsSetManagers() bool {
  return p.Managers != nil
}

func (p *AdmTimRoom) IsSetCover() bool {
  return p.Cover != nil
}

func (p *AdmTimRoom) IsSetTopic() bool {
  return p.Topic != nil
}

func (p *AdmTimRoom) IsSetLabel() bool {
  return p.Label != nil
}

func (p *AdmTimRoom) IsSetGtype() bool {
  return p.Gtype != nil
}

func (p *AdmTimRoom) IsSetKind() bool {
  return p.Kind != nil
}

func (p *AdmTimRoom) IsSetCreatetime() bool {
  return p.Createtime != nil
}

func (p *AdmTimRoom) IsSetExtend() bool {
  return p.Extend != nil
}

func (p *AdmTimRoom) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *AdmTimRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmTimRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Founder = &v
}
  return nil
}

func (p *AdmTimRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Managers =  tSlice
  for i := 0; i < size; i ++ {
var _elem21 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem21 = v
}
    p.Managers = append(p.Managers, _elem21)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdmTimRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cover = &v
}
  return nil
}

func (p *AdmTimRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Topic = &v
}
  return nil
}

func (p *AdmTimRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Label = &v
}
  return nil
}

func (p *AdmTimRoom)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := int8(v)
  p.Gtype = &temp
}
  return nil
}

func (p *AdmTimRoom)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Kind = &v
}
  return nil
}

func (p *AdmTimRoom)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Createtime = &v
}
  return nil
}

func (p *AdmTimRoom)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
var _val23 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.Extend[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmTimRoom)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.Extra =  tMap
  for i := 0; i < size; i ++ {
var _key24 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key24 = v
}
var _val25 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val25 = v
}
    p.Extra[_key24] = _val25
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmTimRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmTimRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmTimRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFounder() {
    if err := oprot.WriteFieldBegin(ctx, "founder", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:founder: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Founder)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.founder (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:founder: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetManagers() {
    if err := oprot.WriteFieldBegin(ctx, "managers", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:managers: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Managers)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Managers {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:managers: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCover() {
    if err := oprot.WriteFieldBegin(ctx, "cover", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cover: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Cover)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cover (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cover: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTopic() {
    if err := oprot.WriteFieldBegin(ctx, "topic", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topic: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Topic)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.topic (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topic: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLabel() {
    if err := oprot.WriteFieldBegin(ctx, "label", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:label: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Label)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.label (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:label: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGtype() {
    if err := oprot.WriteFieldBegin(ctx, "gtype", thrift.BYTE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gtype: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.Gtype)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gtype (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gtype: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetKind() {
    if err := oprot.WriteFieldBegin(ctx, "kind", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:kind: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Kind)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.kind (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:kind: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatetime() {
    if err := oprot.WriteFieldBegin(ctx, "createtime", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createtime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Createtime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createtime (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createtime: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtend() {
    if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extend: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extend {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extend: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extra: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extra {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extra: ", p), err) }
  }
  return err
}

func (p *AdmTimRoom) Equals(other *AdmTimRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Founder != other.Founder {
    if p.Founder == nil || other.Founder == nil {
      return false
    }
    if (*p.Founder) != (*other.Founder) { return false }
  }
  if len(p.Managers) != len(other.Managers) { return false }
  for i, _tgt := range p.Managers {
    _src26 := other.Managers[i]
    if _tgt != _src26 { return false }
  }
  if p.Cover != other.Cover {
    if p.Cover == nil || other.Cover == nil {
      return false
    }
    if (*p.Cover) != (*other.Cover) { return false }
  }
  if p.Topic != other.Topic {
    if p.Topic == nil || other.Topic == nil {
      return false
    }
    if (*p.Topic) != (*other.Topic) { return false }
  }
  if p.Label != other.Label {
    if p.Label == nil || other.Label == nil {
      return false
    }
    if (*p.Label) != (*other.Label) { return false }
  }
  if p.Gtype != other.Gtype {
    if p.Gtype == nil || other.Gtype == nil {
      return false
    }
    if (*p.Gtype) != (*other.Gtype) { return false }
  }
  if p.Kind != other.Kind {
    if p.Kind == nil || other.Kind == nil {
      return false
    }
    if (*p.Kind) != (*other.Kind) { return false }
  }
  if p.Createtime != other.Createtime {
    if p.Createtime == nil || other.Createtime == nil {
      return false
    }
    if (*p.Createtime) != (*other.Createtime) { return false }
  }
  if len(p.Extend) != len(other.Extend) { return false }
  for k, _tgt := range p.Extend {
    _src27 := other.Extend[k]
    if _tgt != _src27 { return false }
  }
  if len(p.Extra) != len(other.Extra) { return false }
  for k, _tgt := range p.Extra {
    _src28 := other.Extra[k]
    if bytes.Compare(_tgt, _src28) != 0 { return false }
  }
  return true
}

func (p *AdmTimRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmTimRoom(%+v)", *p)
}

func (p *AdmTimRoom) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmTimRoom",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmTimRoom)(nil)

func (p *AdmTimRoom) Validate() error {
  return nil
}
// Attributes:
//  - Unode
//  - Gnode
//  - Atr
type AdmRoomBean struct {
  Unode *string `thrift:"unode,1" db:"unode" json:"unode,omitempty"`
  Gnode *string `thrift:"gnode,2" db:"gnode" json:"gnode,omitempty"`
  Atr *AdmTimRoom `thrift:"atr,3" db:"atr" json:"atr,omitempty"`
}

func NewAdmRoomBean() *AdmRoomBean {
  return &AdmRoomBean{}
}

var AdmRoomBean_Unode_DEFAULT string
func (p *AdmRoomBean) GetUnode() string {
  if !p.IsSetUnode() {
    return AdmRoomBean_Unode_DEFAULT
  }
  return *p.Unode
}
var AdmRoomBean_Gnode_DEFAULT string
func (p *AdmRoomBean) GetGnode() string {
  if !p.IsSetGnode() {
    return AdmRoomBean_Gnode_DEFAULT
  }
  return *p.Gnode
}
var AdmRoomBean_Atr_DEFAULT *AdmTimRoom
func (p *AdmRoomBean) GetAtr() *AdmTimRoom {
  if !p.IsSetAtr() {
    return AdmRoomBean_Atr_DEFAULT
  }
  return p.Atr
}
func (p *AdmRoomBean) IsSetUnode() bool {
  return p.Unode != nil
}

func (p *AdmRoomBean) IsSetGnode() bool {
  return p.Gnode != nil
}

func (p *AdmRoomBean) IsSetAtr() bool {
  return p.Atr != nil
}

func (p *AdmRoomBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmRoomBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Unode = &v
}
  return nil
}

func (p *AdmRoomBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Gnode = &v
}
  return nil
}

func (p *AdmRoomBean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Atr = &AdmTimRoom{}
  if err := p.Atr.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Atr), err)
  }
  return nil
}

func (p *AdmRoomBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmRoomBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmRoomBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUnode() {
    if err := oprot.WriteFieldBegin(ctx, "unode", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unode: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Unode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unode (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unode: ", p), err) }
  }
  return err
}

func (p *AdmRoomBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGnode() {
    if err := oprot.WriteFieldBegin(ctx, "gnode", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gnode: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Gnode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gnode (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gnode: ", p), err) }
  }
  return err
}

func (p *AdmRoomBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAtr() {
    if err := oprot.WriteFieldBegin(ctx, "atr", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:atr: ", p), err) }
    if err := p.Atr.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Atr), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:atr: ", p), err) }
  }
  return err
}

func (p *AdmRoomBean) Equals(other *AdmRoomBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Unode != other.Unode {
    if p.Unode == nil || other.Unode == nil {
      return false
    }
    if (*p.Unode) != (*other.Unode) { return false }
  }
  if p.Gnode != other.Gnode {
    if p.Gnode == nil || other.Gnode == nil {
      return false
    }
    if (*p.Gnode) != (*other.Gnode) { return false }
  }
  if !p.Atr.Equals(other.Atr) { return false }
  return true
}

func (p *AdmRoomBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmRoomBean(%+v)", *p)
}

func (p *AdmRoomBean) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmRoomBean",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmRoomBean)(nil)

func (p *AdmRoomBean) Validate() error {
  return nil
}
// Attributes:
//  - Nodes
type AdmDetectBean struct {
  Nodes []string `thrift:"nodes,1" db:"nodes" json:"nodes,omitempty"`
}

func NewAdmDetectBean() *AdmDetectBean {
  return &AdmDetectBean{}
}

var AdmDetectBean_Nodes_DEFAULT []string

func (p *AdmDetectBean) GetNodes() []string {
  return p.Nodes
}
func (p *AdmDetectBean) IsSetNodes() bool {
  return p.Nodes != nil
}

func (p *AdmDetectBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmDetectBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
var _elem29 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem29 = v
}
    p.Nodes = append(p.Nodes, _elem29)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdmDetectBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmDetectBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmDetectBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNodes() {
    if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodes: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nodes {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodes: ", p), err) }
  }
  return err
}

func (p *AdmDetectBean) Equals(other *AdmDetectBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Nodes) != len(other.Nodes) { return false }
  for i, _tgt := range p.Nodes {
    _src30 := other.Nodes[i]
    if _tgt != _src30 { return false }
  }
  return true
}

func (p *AdmDetectBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmDetectBean(%+v)", *p)
}

func (p *AdmDetectBean) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmDetectBean",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmDetectBean)(nil)

func (p *AdmDetectBean) Validate() error {
  return nil
}
// Attributes:
//  - Stype
//  - Bs
type AdmSubBean struct {
  Stype *int32 `thrift:"stype,1" db:"stype" json:"stype,omitempty"`
  Bs []byte `thrift:"bs,2" db:"bs" json:"bs,omitempty"`
}

func NewAdmSubBean() *AdmSubBean {
  return &AdmSubBean{}
}

var AdmSubBean_Stype_DEFAULT int32
func (p *AdmSubBean) GetStype() int32 {
  if !p.IsSetStype() {
    return AdmSubBean_Stype_DEFAULT
  }
  return *p.Stype
}
var AdmSubBean_Bs_DEFAULT []byte

func (p *AdmSubBean) GetBs() []byte {
  return p.Bs
}
func (p *AdmSubBean) IsSetStype() bool {
  return p.Stype != nil
}

func (p *AdmSubBean) IsSetBs() bool {
  return p.Bs != nil
}

func (p *AdmSubBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmSubBean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Stype = &v
}
  return nil
}

func (p *AdmSubBean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Bs = v
}
  return nil
}

func (p *AdmSubBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmSubBean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmSubBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStype() {
    if err := oprot.WriteFieldBegin(ctx, "stype", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stype: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Stype)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stype (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stype: ", p), err) }
  }
  return err
}

func (p *AdmSubBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBs() {
    if err := oprot.WriteFieldBegin(ctx, "bs", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bs: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Bs); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bs (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bs: ", p), err) }
  }
  return err
}

func (p *AdmSubBean) Equals(other *AdmSubBean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Stype != other.Stype {
    if p.Stype == nil || other.Stype == nil {
      return false
    }
    if (*p.Stype) != (*other.Stype) { return false }
  }
  if bytes.Compare(p.Bs, other.Bs) != 0 { return false }
  return true
}

func (p *AdmSubBean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmSubBean(%+v)", *p)
}

func (p *AdmSubBean) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmSubBean",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmSubBean)(nil)

func (p *AdmSubBean) Validate() error {
  return nil
}
// Attributes:
//  - Ok
//  - TimType
//  - Errcode
//  - T
//  - N
//  - T2
//  - N2
//  - Asb
type AdmAck struct {
  Ok *bool `thrift:"ok,1" db:"ok" json:"ok,omitempty"`
  TimType *int8 `thrift:"timType,2" db:"timType" json:"timType,omitempty"`
  Errcode *int32 `thrift:"errcode,3" db:"errcode" json:"errcode,omitempty"`
  T *int64 `thrift:"t,4" db:"t" json:"t,omitempty"`
  N *string `thrift:"n,5" db:"n" json:"n,omitempty"`
  T2 *int64 `thrift:"t2,6" db:"t2" json:"t2,omitempty"`
  N2 *string `thrift:"n2,7" db:"n2" json:"n2,omitempty"`
  Asb *AdmSubBean `thrift:"asb,8" db:"asb" json:"asb,omitempty"`
}

func NewAdmAck() *AdmAck {
  return &AdmAck{}
}

var AdmAck_Ok_DEFAULT bool
func (p *AdmAck) GetOk() bool {
  if !p.IsSetOk() {
    return AdmAck_Ok_DEFAULT
  }
  return *p.Ok
}
var AdmAck_TimType_DEFAULT int8
func (p *AdmAck) GetTimType() int8 {
  if !p.IsSetTimType() {
    return AdmAck_TimType_DEFAULT
  }
  return *p.TimType
}
var AdmAck_Errcode_DEFAULT int32
func (p *AdmAck) GetErrcode() int32 {
  if !p.IsSetErrcode() {
    return AdmAck_Errcode_DEFAULT
  }
  return *p.Errcode
}
var AdmAck_T_DEFAULT int64
func (p *AdmAck) GetT() int64 {
  if !p.IsSetT() {
    return AdmAck_T_DEFAULT
  }
  return *p.T
}
var AdmAck_N_DEFAULT string
func (p *AdmAck) GetN() string {
  if !p.IsSetN() {
    return AdmAck_N_DEFAULT
  }
  return *p.N
}
var AdmAck_T2_DEFAULT int64
func (p *AdmAck) GetT2() int64 {
  if !p.IsSetT2() {
    return AdmAck_T2_DEFAULT
  }
  return *p.T2
}
var AdmAck_N2_DEFAULT string
func (p *AdmAck) GetN2() string {
  if !p.IsSetN2() {
    return AdmAck_N2_DEFAULT
  }
  return *p.N2
}
var AdmAck_Asb_DEFAULT *AdmSubBean
func (p *AdmAck) GetAsb() *AdmSubBean {
  if !p.IsSetAsb() {
    return AdmAck_Asb_DEFAULT
  }
  return p.Asb
}
func (p *AdmAck) IsSetOk() bool {
  return p.Ok != nil
}

func (p *AdmAck) IsSetTimType() bool {
  return p.TimType != nil
}

func (p *AdmAck) IsSetErrcode() bool {
  return p.Errcode != nil
}

func (p *AdmAck) IsSetT() bool {
  return p.T != nil
}

func (p *AdmAck) IsSetN() bool {
  return p.N != nil
}

func (p *AdmAck) IsSetT2() bool {
  return p.T2 != nil
}

func (p *AdmAck) IsSetN2() bool {
  return p.N2 != nil
}

func (p *AdmAck) IsSetAsb() bool {
  return p.Asb != nil
}

func (p *AdmAck) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmAck)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ok = &v
}
  return nil
}

func (p *AdmAck)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.TimType = &temp
}
  return nil
}

func (p *AdmAck)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Errcode = &v
}
  return nil
}

func (p *AdmAck)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.T = &v
}
  return nil
}

func (p *AdmAck)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.N = &v
}
  return nil
}

func (p *AdmAck)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.T2 = &v
}
  return nil
}

func (p *AdmAck)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.N2 = &v
}
  return nil
}

func (p *AdmAck)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Asb = &AdmSubBean{}
  if err := p.Asb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Asb), err)
  }
  return nil
}

func (p *AdmAck) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmAck"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmAck) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOk() {
    if err := oprot.WriteFieldBegin(ctx, "ok", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ok: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Ok)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ok (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ok: ", p), err) }
  }
  return err
}

func (p *AdmAck) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimType() {
    if err := oprot.WriteFieldBegin(ctx, "timType", thrift.BYTE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timType: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.TimType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timType (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timType: ", p), err) }
  }
  return err
}

func (p *AdmAck) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrcode() {
    if err := oprot.WriteFieldBegin(ctx, "errcode", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errcode: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Errcode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errcode (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errcode: ", p), err) }
  }
  return err
}

func (p *AdmAck) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetT() {
    if err := oprot.WriteFieldBegin(ctx, "t", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:t: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.T)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.t (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:t: ", p), err) }
  }
  return err
}

func (p *AdmAck) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetN() {
    if err := oprot.WriteFieldBegin(ctx, "n", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:n: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.N)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.n (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:n: ", p), err) }
  }
  return err
}

func (p *AdmAck) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetT2() {
    if err := oprot.WriteFieldBegin(ctx, "t2", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:t2: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.T2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.t2 (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:t2: ", p), err) }
  }
  return err
}

func (p *AdmAck) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetN2() {
    if err := oprot.WriteFieldBegin(ctx, "n2", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:n2: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.N2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.n2 (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:n2: ", p), err) }
  }
  return err
}

func (p *AdmAck) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAsb() {
    if err := oprot.WriteFieldBegin(ctx, "asb", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:asb: ", p), err) }
    if err := p.Asb.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Asb), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:asb: ", p), err) }
  }
  return err
}

func (p *AdmAck) Equals(other *AdmAck) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ok != other.Ok {
    if p.Ok == nil || other.Ok == nil {
      return false
    }
    if (*p.Ok) != (*other.Ok) { return false }
  }
  if p.TimType != other.TimType {
    if p.TimType == nil || other.TimType == nil {
      return false
    }
    if (*p.TimType) != (*other.TimType) { return false }
  }
  if p.Errcode != other.Errcode {
    if p.Errcode == nil || other.Errcode == nil {
      return false
    }
    if (*p.Errcode) != (*other.Errcode) { return false }
  }
  if p.T != other.T {
    if p.T == nil || other.T == nil {
      return false
    }
    if (*p.T) != (*other.T) { return false }
  }
  if p.N != other.N {
    if p.N == nil || other.N == nil {
      return false
    }
    if (*p.N) != (*other.N) { return false }
  }
  if p.T2 != other.T2 {
    if p.T2 == nil || other.T2 == nil {
      return false
    }
    if (*p.T2) != (*other.T2) { return false }
  }
  if p.N2 != other.N2 {
    if p.N2 == nil || other.N2 == nil {
      return false
    }
    if (*p.N2) != (*other.N2) { return false }
  }
  if !p.Asb.Equals(other.Asb) { return false }
  return true
}

func (p *AdmAck) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmAck(%+v)", *p)
}

func (p *AdmAck) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmAck",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmAck)(nil)

func (p *AdmAck) Validate() error {
  return nil
}
// Attributes:
//  - Connectid
//  - Amb
type AdmProxyMessage struct {
  Connectid *int64 `thrift:"connectid,1" db:"connectid" json:"connectid,omitempty"`
  Amb *AdmMessageBean `thrift:"amb,2" db:"amb" json:"amb,omitempty"`
}

func NewAdmProxyMessage() *AdmProxyMessage {
  return &AdmProxyMessage{}
}

var AdmProxyMessage_Connectid_DEFAULT int64
func (p *AdmProxyMessage) GetConnectid() int64 {
  if !p.IsSetConnectid() {
    return AdmProxyMessage_Connectid_DEFAULT
  }
  return *p.Connectid
}
var AdmProxyMessage_Amb_DEFAULT *AdmMessageBean
func (p *AdmProxyMessage) GetAmb() *AdmMessageBean {
  if !p.IsSetAmb() {
    return AdmProxyMessage_Amb_DEFAULT
  }
  return p.Amb
}
func (p *AdmProxyMessage) IsSetConnectid() bool {
  return p.Connectid != nil
}

func (p *AdmProxyMessage) IsSetAmb() bool {
  return p.Amb != nil
}

func (p *AdmProxyMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmProxyMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Connectid = &v
}
  return nil
}

func (p *AdmProxyMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Amb = &AdmMessageBean{}
  if err := p.Amb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Amb), err)
  }
  return nil
}

func (p *AdmProxyMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmProxyMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmProxyMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetConnectid() {
    if err := oprot.WriteFieldBegin(ctx, "connectid", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connectid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Connectid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.connectid (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connectid: ", p), err) }
  }
  return err
}

func (p *AdmProxyMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAmb() {
    if err := oprot.WriteFieldBegin(ctx, "amb", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amb: ", p), err) }
    if err := p.Amb.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Amb), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amb: ", p), err) }
  }
  return err
}

func (p *AdmProxyMessage) Equals(other *AdmProxyMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Connectid != other.Connectid {
    if p.Connectid == nil || other.Connectid == nil {
      return false
    }
    if (*p.Connectid) != (*other.Connectid) { return false }
  }
  if !p.Amb.Equals(other.Amb) { return false }
  return true
}

func (p *AdmProxyMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmProxyMessage(%+v)", *p)
}

func (p *AdmProxyMessage) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmProxyMessage",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmProxyMessage)(nil)

func (p *AdmProxyMessage) Validate() error {
  return nil
}
// Attributes:
//  - Account
//  - Blocktime
type AdmBlockUser struct {
  Account *string `thrift:"account,1" db:"account" json:"account,omitempty"`
  Blocktime *int64 `thrift:"blocktime,2" db:"blocktime" json:"blocktime,omitempty"`
}

func NewAdmBlockUser() *AdmBlockUser {
  return &AdmBlockUser{}
}

var AdmBlockUser_Account_DEFAULT string
func (p *AdmBlockUser) GetAccount() string {
  if !p.IsSetAccount() {
    return AdmBlockUser_Account_DEFAULT
  }
  return *p.Account
}
var AdmBlockUser_Blocktime_DEFAULT int64
func (p *AdmBlockUser) GetBlocktime() int64 {
  if !p.IsSetBlocktime() {
    return AdmBlockUser_Blocktime_DEFAULT
  }
  return *p.Blocktime
}
func (p *AdmBlockUser) IsSetAccount() bool {
  return p.Account != nil
}

func (p *AdmBlockUser) IsSetBlocktime() bool {
  return p.Blocktime != nil
}

func (p *AdmBlockUser) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmBlockUser)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = &v
}
  return nil
}

func (p *AdmBlockUser)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Blocktime = &v
}
  return nil
}

func (p *AdmBlockUser) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmBlockUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmBlockUser) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAccount() {
    if err := oprot.WriteFieldBegin(ctx, "account", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Account)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  }
  return err
}

func (p *AdmBlockUser) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBlocktime() {
    if err := oprot.WriteFieldBegin(ctx, "blocktime", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blocktime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Blocktime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.blocktime (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blocktime: ", p), err) }
  }
  return err
}

func (p *AdmBlockUser) Equals(other *AdmBlockUser) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Account != other.Account {
    if p.Account == nil || other.Account == nil {
      return false
    }
    if (*p.Account) != (*other.Account) { return false }
  }
  if p.Blocktime != other.Blocktime {
    if p.Blocktime == nil || other.Blocktime == nil {
      return false
    }
    if (*p.Blocktime) != (*other.Blocktime) { return false }
  }
  return true
}

func (p *AdmBlockUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmBlockUser(%+v)", *p)
}

func (p *AdmBlockUser) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmBlockUser",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmBlockUser)(nil)

func (p *AdmBlockUser) Validate() error {
  return nil
}
// Attributes:
//  - Index
//  - Limit
type AdmOnlineUser struct {
  Index *int64 `thrift:"index,1" db:"index" json:"index,omitempty"`
  Limit *int64 `thrift:"limit,2" db:"limit" json:"limit,omitempty"`
}

func NewAdmOnlineUser() *AdmOnlineUser {
  return &AdmOnlineUser{}
}

var AdmOnlineUser_Index_DEFAULT int64
func (p *AdmOnlineUser) GetIndex() int64 {
  if !p.IsSetIndex() {
    return AdmOnlineUser_Index_DEFAULT
  }
  return *p.Index
}
var AdmOnlineUser_Limit_DEFAULT int64
func (p *AdmOnlineUser) GetLimit() int64 {
  if !p.IsSetLimit() {
    return AdmOnlineUser_Limit_DEFAULT
  }
  return *p.Limit
}
func (p *AdmOnlineUser) IsSetIndex() bool {
  return p.Index != nil
}

func (p *AdmOnlineUser) IsSetLimit() bool {
  return p.Limit != nil
}

func (p *AdmOnlineUser) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmOnlineUser)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Index = &v
}
  return nil
}

func (p *AdmOnlineUser)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Limit = &v
}
  return nil
}

func (p *AdmOnlineUser) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmOnlineUser"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmOnlineUser) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex() {
    if err := oprot.WriteFieldBegin(ctx, "index", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Index)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err) }
  }
  return err
}

func (p *AdmOnlineUser) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLimit() {
    if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Limit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err) }
  }
  return err
}

func (p *AdmOnlineUser) Equals(other *AdmOnlineUser) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Index != other.Index {
    if p.Index == nil || other.Index == nil {
      return false
    }
    if (*p.Index) != (*other.Index) { return false }
  }
  if p.Limit != other.Limit {
    if p.Limit == nil || other.Limit == nil {
      return false
    }
    if (*p.Limit) != (*other.Limit) { return false }
  }
  return true
}

func (p *AdmOnlineUser) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmOnlineUser(%+v)", *p)
}

func (p *AdmOnlineUser) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmOnlineUser",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmOnlineUser)(nil)

func (p *AdmOnlineUser) Validate() error {
  return nil
}
// Attributes:
//  - Usermap
type AdmBlockList struct {
  Usermap map[string]int64 `thrift:"usermap,1" db:"usermap" json:"usermap,omitempty"`
}

func NewAdmBlockList() *AdmBlockList {
  return &AdmBlockList{}
}

var AdmBlockList_Usermap_DEFAULT map[string]int64

func (p *AdmBlockList) GetUsermap() map[string]int64 {
  return p.Usermap
}
func (p *AdmBlockList) IsSetUsermap() bool {
  return p.Usermap != nil
}

func (p *AdmBlockList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmBlockList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.Usermap =  tMap
  for i := 0; i < size; i ++ {
var _key31 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key31 = v
}
var _val32 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val32 = v
}
    p.Usermap[_key31] = _val32
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AdmBlockList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmBlockList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmBlockList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUsermap() {
    if err := oprot.WriteFieldBegin(ctx, "usermap", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:usermap: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.Usermap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Usermap {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteI64(ctx, int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:usermap: ", p), err) }
  }
  return err
}

func (p *AdmBlockList) Equals(other *AdmBlockList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Usermap) != len(other.Usermap) { return false }
  for k, _tgt := range p.Usermap {
    _src33 := other.Usermap[k]
    if _tgt != _src33 { return false }
  }
  return true
}

func (p *AdmBlockList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmBlockList(%+v)", *p)
}

func (p *AdmBlockList) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmBlockList",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmBlockList)(nil)

func (p *AdmBlockList) Validate() error {
  return nil
}
// Attributes:
//  - Tidlist
//  - Size
type AdmTidList struct {
  Tidlist []*AdmTid `thrift:"tidlist,1" db:"tidlist" json:"tidlist,omitempty"`
  Size *int64 `thrift:"size,2" db:"size" json:"size,omitempty"`
}

func NewAdmTidList() *AdmTidList {
  return &AdmTidList{}
}

var AdmTidList_Tidlist_DEFAULT []*AdmTid

func (p *AdmTidList) GetTidlist() []*AdmTid {
  return p.Tidlist
}
var AdmTidList_Size_DEFAULT int64
func (p *AdmTidList) GetSize() int64 {
  if !p.IsSetSize() {
    return AdmTidList_Size_DEFAULT
  }
  return *p.Size
}
func (p *AdmTidList) IsSetTidlist() bool {
  return p.Tidlist != nil
}

func (p *AdmTidList) IsSetSize() bool {
  return p.Size != nil
}

func (p *AdmTidList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmTidList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AdmTid, 0, size)
  p.Tidlist =  tSlice
  for i := 0; i < size; i ++ {
    _elem34 := &AdmTid{}
    if err := _elem34.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
    }
    p.Tidlist = append(p.Tidlist, _elem34)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AdmTidList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = &v
}
  return nil
}

func (p *AdmTidList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AdmTidList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmTidList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTidlist() {
    if err := oprot.WriteFieldBegin(ctx, "tidlist", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tidlist: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tidlist)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Tidlist {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tidlist: ", p), err) }
  }
  return err
}

func (p *AdmTidList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSize() {
    if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Size)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  }
  return err
}

func (p *AdmTidList) Equals(other *AdmTidList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Tidlist) != len(other.Tidlist) { return false }
  for i, _tgt := range p.Tidlist {
    _src35 := other.Tidlist[i]
    if !_tgt.Equals(_src35) { return false }
  }
  if p.Size != other.Size {
    if p.Size == nil || other.Size == nil {
      return false
    }
    if (*p.Size) != (*other.Size) { return false }
  }
  return true
}

func (p *AdmTidList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmTidList(%+v)", *p)
}

func (p *AdmTidList) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmTidList",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmTidList)(nil)

func (p *AdmTidList) Validate() error {
  return nil
}
type Admiface interface {
  // Parameters:
  //  - Ab
  ResetAuth(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error)
  // Parameters:
  //  - Aa
  Auth(ctx context.Context, aa *AuthBean) (_r *AdmAck, _err error)
  Ping(ctx context.Context) (_r *AdmAck, _err error)
  // Parameters:
  //  - Atoken
  Token(ctx context.Context, atoken *AdmToken) (_r *AdmAck, _err error)
  // Parameters:
  //  - Am
  OsMessage(ctx context.Context, am *AdmMessage) (_r *AdmAck, _err error)
  // Parameters:
  //  - Apm
  ProxyMessage(ctx context.Context, apm *AdmProxyMessage) (_r *AdmAck, _err error)
  // Parameters:
  //  - Ab
  Register(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error)
  // Parameters:
  //  - Amui
  ModifyUserInfo(ctx context.Context, amui *AdmModifyUserInfo) (_r *AdmAck, _err error)
  // Parameters:
  //  - Arb
  ModifyRoomInfo(ctx context.Context, arb *AdmRoomBean) (_r *AdmAck, _err error)
  // Parameters:
  //  - Abu
  BlockUser(ctx context.Context, abu *AdmBlockUser) (_r *AdmAck, _err error)
  BlockList(ctx context.Context) (_r *AdmBlockList, _err error)
  // Parameters:
  //  - Au
  OnlineUser(ctx context.Context, au *AdmOnlineUser) (_r *AdmTidList, _err error)
  // Parameters:
  //  - Avb
  Vroom(ctx context.Context, avb *AdmVroomBean) (_r *AdmAck, _err error)
  // Parameters:
  //  - Arb
  TimRoom(ctx context.Context, arb *AdmRoomReq) (_r *AdmAck, _err error)
  // Parameters:
  //  - Adb
  Detect(ctx context.Context, adb *AdmDetectBean) (_r *AdmAck, _err error)
}

type AdmifaceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewAdmifaceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdmifaceClient {
  return &AdmifaceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewAdmifaceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdmifaceClient {
  return &AdmifaceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAdmifaceClient(c thrift.TClient) *AdmifaceClient {
  return &AdmifaceClient{
    c: c,
  }
}

func (p *AdmifaceClient) Client_() thrift.TClient {
  return p.c
}

func (p *AdmifaceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *AdmifaceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Ab
func (p *AdmifaceClient) ResetAuth(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error) {
  var _args36 AdmifaceResetAuthArgs
  _args36.Ab = ab
  var _result38 AdmifaceResetAuthResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "ResetAuth", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  if _ret39 := _result38.GetSuccess(); _ret39 != nil {
    return _ret39, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ResetAuth failed: unknown result")
}

// Parameters:
//  - Aa
func (p *AdmifaceClient) Auth(ctx context.Context, aa *AuthBean) (_r *AdmAck, _err error) {
  var _args40 AdmifaceAuthArgs
  _args40.Aa = aa
  var _result42 AdmifaceAuthResult
  var _meta41 thrift.ResponseMeta
  _meta41, _err = p.Client_().Call(ctx, "Auth", &_args40, &_result42)
  p.SetLastResponseMeta_(_meta41)
  if _err != nil {
    return
  }
  if _ret43 := _result42.GetSuccess(); _ret43 != nil {
    return _ret43, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Auth failed: unknown result")
}

func (p *AdmifaceClient) Ping(ctx context.Context) (_r *AdmAck, _err error) {
  var _args44 AdmifacePingArgs
  var _result46 AdmifacePingResult
  var _meta45 thrift.ResponseMeta
  _meta45, _err = p.Client_().Call(ctx, "Ping", &_args44, &_result46)
  p.SetLastResponseMeta_(_meta45)
  if _err != nil {
    return
  }
  if _ret47 := _result46.GetSuccess(); _ret47 != nil {
    return _ret47, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Ping failed: unknown result")
}

// Parameters:
//  - Atoken
func (p *AdmifaceClient) Token(ctx context.Context, atoken *AdmToken) (_r *AdmAck, _err error) {
  var _args48 AdmifaceTokenArgs
  _args48.Atoken = atoken
  var _result50 AdmifaceTokenResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "Token", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  if _ret51 := _result50.GetSuccess(); _ret51 != nil {
    return _ret51, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Token failed: unknown result")
}

// Parameters:
//  - Am
func (p *AdmifaceClient) OsMessage(ctx context.Context, am *AdmMessage) (_r *AdmAck, _err error) {
  var _args52 AdmifaceOsMessageArgs
  _args52.Am = am
  var _result54 AdmifaceOsMessageResult
  var _meta53 thrift.ResponseMeta
  _meta53, _err = p.Client_().Call(ctx, "OsMessage", &_args52, &_result54)
  p.SetLastResponseMeta_(_meta53)
  if _err != nil {
    return
  }
  if _ret55 := _result54.GetSuccess(); _ret55 != nil {
    return _ret55, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OsMessage failed: unknown result")
}

// Parameters:
//  - Apm
func (p *AdmifaceClient) ProxyMessage(ctx context.Context, apm *AdmProxyMessage) (_r *AdmAck, _err error) {
  var _args56 AdmifaceProxyMessageArgs
  _args56.Apm = apm
  var _result58 AdmifaceProxyMessageResult
  var _meta57 thrift.ResponseMeta
  _meta57, _err = p.Client_().Call(ctx, "ProxyMessage", &_args56, &_result58)
  p.SetLastResponseMeta_(_meta57)
  if _err != nil {
    return
  }
  if _ret59 := _result58.GetSuccess(); _ret59 != nil {
    return _ret59, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ProxyMessage failed: unknown result")
}

// Parameters:
//  - Ab
func (p *AdmifaceClient) Register(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error) {
  var _args60 AdmifaceRegisterArgs
  _args60.Ab = ab
  var _result62 AdmifaceRegisterResult
  var _meta61 thrift.ResponseMeta
  _meta61, _err = p.Client_().Call(ctx, "Register", &_args60, &_result62)
  p.SetLastResponseMeta_(_meta61)
  if _err != nil {
    return
  }
  if _ret63 := _result62.GetSuccess(); _ret63 != nil {
    return _ret63, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Register failed: unknown result")
}

// Parameters:
//  - Amui
func (p *AdmifaceClient) ModifyUserInfo(ctx context.Context, amui *AdmModifyUserInfo) (_r *AdmAck, _err error) {
  var _args64 AdmifaceModifyUserInfoArgs
  _args64.Amui = amui
  var _result66 AdmifaceModifyUserInfoResult
  var _meta65 thrift.ResponseMeta
  _meta65, _err = p.Client_().Call(ctx, "ModifyUserInfo", &_args64, &_result66)
  p.SetLastResponseMeta_(_meta65)
  if _err != nil {
    return
  }
  if _ret67 := _result66.GetSuccess(); _ret67 != nil {
    return _ret67, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ModifyUserInfo failed: unknown result")
}

// Parameters:
//  - Arb
func (p *AdmifaceClient) ModifyRoomInfo(ctx context.Context, arb *AdmRoomBean) (_r *AdmAck, _err error) {
  var _args68 AdmifaceModifyRoomInfoArgs
  _args68.Arb = arb
  var _result70 AdmifaceModifyRoomInfoResult
  var _meta69 thrift.ResponseMeta
  _meta69, _err = p.Client_().Call(ctx, "ModifyRoomInfo", &_args68, &_result70)
  p.SetLastResponseMeta_(_meta69)
  if _err != nil {
    return
  }
  if _ret71 := _result70.GetSuccess(); _ret71 != nil {
    return _ret71, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ModifyRoomInfo failed: unknown result")
}

// Parameters:
//  - Abu
func (p *AdmifaceClient) BlockUser(ctx context.Context, abu *AdmBlockUser) (_r *AdmAck, _err error) {
  var _args72 AdmifaceBlockUserArgs
  _args72.Abu = abu
  var _result74 AdmifaceBlockUserResult
  var _meta73 thrift.ResponseMeta
  _meta73, _err = p.Client_().Call(ctx, "BlockUser", &_args72, &_result74)
  p.SetLastResponseMeta_(_meta73)
  if _err != nil {
    return
  }
  if _ret75 := _result74.GetSuccess(); _ret75 != nil {
    return _ret75, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "BlockUser failed: unknown result")
}

func (p *AdmifaceClient) BlockList(ctx context.Context) (_r *AdmBlockList, _err error) {
  var _args76 AdmifaceBlockListArgs
  var _result78 AdmifaceBlockListResult
  var _meta77 thrift.ResponseMeta
  _meta77, _err = p.Client_().Call(ctx, "BlockList", &_args76, &_result78)
  p.SetLastResponseMeta_(_meta77)
  if _err != nil {
    return
  }
  if _ret79 := _result78.GetSuccess(); _ret79 != nil {
    return _ret79, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "BlockList failed: unknown result")
}

// Parameters:
//  - Au
func (p *AdmifaceClient) OnlineUser(ctx context.Context, au *AdmOnlineUser) (_r *AdmTidList, _err error) {
  var _args80 AdmifaceOnlineUserArgs
  _args80.Au = au
  var _result82 AdmifaceOnlineUserResult
  var _meta81 thrift.ResponseMeta
  _meta81, _err = p.Client_().Call(ctx, "OnlineUser", &_args80, &_result82)
  p.SetLastResponseMeta_(_meta81)
  if _err != nil {
    return
  }
  if _ret83 := _result82.GetSuccess(); _ret83 != nil {
    return _ret83, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnlineUser failed: unknown result")
}

// Parameters:
//  - Avb
func (p *AdmifaceClient) Vroom(ctx context.Context, avb *AdmVroomBean) (_r *AdmAck, _err error) {
  var _args84 AdmifaceVroomArgs
  _args84.Avb = avb
  var _result86 AdmifaceVroomResult
  var _meta85 thrift.ResponseMeta
  _meta85, _err = p.Client_().Call(ctx, "Vroom", &_args84, &_result86)
  p.SetLastResponseMeta_(_meta85)
  if _err != nil {
    return
  }
  if _ret87 := _result86.GetSuccess(); _ret87 != nil {
    return _ret87, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Vroom failed: unknown result")
}

// Parameters:
//  - Arb
func (p *AdmifaceClient) TimRoom(ctx context.Context, arb *AdmRoomReq) (_r *AdmAck, _err error) {
  var _args88 AdmifaceTimRoomArgs
  _args88.Arb = arb
  var _result90 AdmifaceTimRoomResult
  var _meta89 thrift.ResponseMeta
  _meta89, _err = p.Client_().Call(ctx, "TimRoom", &_args88, &_result90)
  p.SetLastResponseMeta_(_meta89)
  if _err != nil {
    return
  }
  if _ret91 := _result90.GetSuccess(); _ret91 != nil {
    return _ret91, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "TimRoom failed: unknown result")
}

// Parameters:
//  - Adb
func (p *AdmifaceClient) Detect(ctx context.Context, adb *AdmDetectBean) (_r *AdmAck, _err error) {
  var _args92 AdmifaceDetectArgs
  _args92.Adb = adb
  var _result94 AdmifaceDetectResult
  var _meta93 thrift.ResponseMeta
  _meta93, _err = p.Client_().Call(ctx, "Detect", &_args92, &_result94)
  p.SetLastResponseMeta_(_meta93)
  if _err != nil {
    return
  }
  if _ret95 := _result94.GetSuccess(); _ret95 != nil {
    return _ret95, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Detect failed: unknown result")
}

type AdmifaceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Admiface
}

func (p *AdmifaceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AdmifaceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AdmifaceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAdmifaceProcessor(handler Admiface) *AdmifaceProcessor {

  self96 := &AdmifaceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self96.processorMap["ResetAuth"] = &admifaceProcessorResetAuth{handler:handler}
  self96.processorMap["Auth"] = &admifaceProcessorAuth{handler:handler}
  self96.processorMap["Ping"] = &admifaceProcessorPing{handler:handler}
  self96.processorMap["Token"] = &admifaceProcessorToken{handler:handler}
  self96.processorMap["OsMessage"] = &admifaceProcessorOsMessage{handler:handler}
  self96.processorMap["ProxyMessage"] = &admifaceProcessorProxyMessage{handler:handler}
  self96.processorMap["Register"] = &admifaceProcessorRegister{handler:handler}
  self96.processorMap["ModifyUserInfo"] = &admifaceProcessorModifyUserInfo{handler:handler}
  self96.processorMap["ModifyRoomInfo"] = &admifaceProcessorModifyRoomInfo{handler:handler}
  self96.processorMap["BlockUser"] = &admifaceProcessorBlockUser{handler:handler}
  self96.processorMap["BlockList"] = &admifaceProcessorBlockList{handler:handler}
  self96.processorMap["OnlineUser"] = &admifaceProcessorOnlineUser{handler:handler}
  self96.processorMap["Vroom"] = &admifaceProcessorVroom{handler:handler}
  self96.processorMap["TimRoom"] = &admifaceProcessorTimRoom{handler:handler}
  self96.processorMap["Detect"] = &admifaceProcessorDetect{handler:handler}
return self96
}

func (p *AdmifaceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x97 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x97.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x97

}

type admifaceProcessorResetAuth struct {
  handler Admiface
}

func (p *admifaceProcessorResetAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err98 error
  args := AdmifaceResetAuthArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ResetAuth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceResetAuthResult{}
  if retval, err2 := p.handler.ResetAuth(ctx, args.Ab); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc99 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResetAuth: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ResetAuth", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err98 = thrift.WrapTException(err2)
    }
    if err2 := _exc99.Write(ctx, oprot); _write_err98 == nil && err2 != nil {
      _write_err98 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err98 == nil && err2 != nil {
      _write_err98 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err98 == nil && err2 != nil {
      _write_err98 = thrift.WrapTException(err2)
    }
    if _write_err98 != nil {
      return false, thrift.WrapTException(_write_err98)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ResetAuth", thrift.REPLY, seqId); err2 != nil {
    _write_err98 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err98 == nil && err2 != nil {
    _write_err98 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err98 == nil && err2 != nil {
    _write_err98 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err98 == nil && err2 != nil {
    _write_err98 = thrift.WrapTException(err2)
  }
  if _write_err98 != nil {
    return false, thrift.WrapTException(_write_err98)
  }
  return true, err
}

type admifaceProcessorAuth struct {
  handler Admiface
}

func (p *admifaceProcessorAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err100 error
  args := AdmifaceAuthArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Auth", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceAuthResult{}
  if retval, err2 := p.handler.Auth(ctx, args.Aa); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc101 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Auth: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Auth", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err100 = thrift.WrapTException(err2)
    }
    if err2 := _exc101.Write(ctx, oprot); _write_err100 == nil && err2 != nil {
      _write_err100 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err100 == nil && err2 != nil {
      _write_err100 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err100 == nil && err2 != nil {
      _write_err100 = thrift.WrapTException(err2)
    }
    if _write_err100 != nil {
      return false, thrift.WrapTException(_write_err100)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Auth", thrift.REPLY, seqId); err2 != nil {
    _write_err100 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err100 == nil && err2 != nil {
    _write_err100 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err100 == nil && err2 != nil {
    _write_err100 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err100 == nil && err2 != nil {
    _write_err100 = thrift.WrapTException(err2)
  }
  if _write_err100 != nil {
    return false, thrift.WrapTException(_write_err100)
  }
  return true, err
}

type admifaceProcessorPing struct {
  handler Admiface
}

func (p *admifaceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err102 error
  args := AdmifacePingArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Ping", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifacePingResult{}
  if retval, err2 := p.handler.Ping(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc103 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Ping", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err102 = thrift.WrapTException(err2)
    }
    if err2 := _exc103.Write(ctx, oprot); _write_err102 == nil && err2 != nil {
      _write_err102 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err102 == nil && err2 != nil {
      _write_err102 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err102 == nil && err2 != nil {
      _write_err102 = thrift.WrapTException(err2)
    }
    if _write_err102 != nil {
      return false, thrift.WrapTException(_write_err102)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Ping", thrift.REPLY, seqId); err2 != nil {
    _write_err102 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err102 == nil && err2 != nil {
    _write_err102 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err102 == nil && err2 != nil {
    _write_err102 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err102 == nil && err2 != nil {
    _write_err102 = thrift.WrapTException(err2)
  }
  if _write_err102 != nil {
    return false, thrift.WrapTException(_write_err102)
  }
  return true, err
}

type admifaceProcessorToken struct {
  handler Admiface
}

func (p *admifaceProcessorToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err104 error
  args := AdmifaceTokenArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Token", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceTokenResult{}
  if retval, err2 := p.handler.Token(ctx, args.Atoken); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc105 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Token: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Token", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err104 = thrift.WrapTException(err2)
    }
    if err2 := _exc105.Write(ctx, oprot); _write_err104 == nil && err2 != nil {
      _write_err104 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err104 == nil && err2 != nil {
      _write_err104 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err104 == nil && err2 != nil {
      _write_err104 = thrift.WrapTException(err2)
    }
    if _write_err104 != nil {
      return false, thrift.WrapTException(_write_err104)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Token", thrift.REPLY, seqId); err2 != nil {
    _write_err104 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err104 == nil && err2 != nil {
    _write_err104 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err104 == nil && err2 != nil {
    _write_err104 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err104 == nil && err2 != nil {
    _write_err104 = thrift.WrapTException(err2)
  }
  if _write_err104 != nil {
    return false, thrift.WrapTException(_write_err104)
  }
  return true, err
}

type admifaceProcessorOsMessage struct {
  handler Admiface
}

func (p *admifaceProcessorOsMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err106 error
  args := AdmifaceOsMessageArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OsMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceOsMessageResult{}
  if retval, err2 := p.handler.OsMessage(ctx, args.Am); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc107 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OsMessage: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OsMessage", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err106 = thrift.WrapTException(err2)
    }
    if err2 := _exc107.Write(ctx, oprot); _write_err106 == nil && err2 != nil {
      _write_err106 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err106 == nil && err2 != nil {
      _write_err106 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err106 == nil && err2 != nil {
      _write_err106 = thrift.WrapTException(err2)
    }
    if _write_err106 != nil {
      return false, thrift.WrapTException(_write_err106)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OsMessage", thrift.REPLY, seqId); err2 != nil {
    _write_err106 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err106 == nil && err2 != nil {
    _write_err106 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err106 == nil && err2 != nil {
    _write_err106 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err106 == nil && err2 != nil {
    _write_err106 = thrift.WrapTException(err2)
  }
  if _write_err106 != nil {
    return false, thrift.WrapTException(_write_err106)
  }
  return true, err
}

type admifaceProcessorProxyMessage struct {
  handler Admiface
}

func (p *admifaceProcessorProxyMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err108 error
  args := AdmifaceProxyMessageArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ProxyMessage", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceProxyMessageResult{}
  if retval, err2 := p.handler.ProxyMessage(ctx, args.Apm); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc109 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ProxyMessage: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ProxyMessage", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err108 = thrift.WrapTException(err2)
    }
    if err2 := _exc109.Write(ctx, oprot); _write_err108 == nil && err2 != nil {
      _write_err108 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err108 == nil && err2 != nil {
      _write_err108 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err108 == nil && err2 != nil {
      _write_err108 = thrift.WrapTException(err2)
    }
    if _write_err108 != nil {
      return false, thrift.WrapTException(_write_err108)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ProxyMessage", thrift.REPLY, seqId); err2 != nil {
    _write_err108 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err108 == nil && err2 != nil {
    _write_err108 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err108 == nil && err2 != nil {
    _write_err108 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err108 == nil && err2 != nil {
    _write_err108 = thrift.WrapTException(err2)
  }
  if _write_err108 != nil {
    return false, thrift.WrapTException(_write_err108)
  }
  return true, err
}

type admifaceProcessorRegister struct {
  handler Admiface
}

func (p *admifaceProcessorRegister) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err110 error
  args := AdmifaceRegisterArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Register", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceRegisterResult{}
  if retval, err2 := p.handler.Register(ctx, args.Ab); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc111 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Register: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Register", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err110 = thrift.WrapTException(err2)
    }
    if err2 := _exc111.Write(ctx, oprot); _write_err110 == nil && err2 != nil {
      _write_err110 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err110 == nil && err2 != nil {
      _write_err110 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err110 == nil && err2 != nil {
      _write_err110 = thrift.WrapTException(err2)
    }
    if _write_err110 != nil {
      return false, thrift.WrapTException(_write_err110)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Register", thrift.REPLY, seqId); err2 != nil {
    _write_err110 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err110 == nil && err2 != nil {
    _write_err110 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err110 == nil && err2 != nil {
    _write_err110 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err110 == nil && err2 != nil {
    _write_err110 = thrift.WrapTException(err2)
  }
  if _write_err110 != nil {
    return false, thrift.WrapTException(_write_err110)
  }
  return true, err
}

type admifaceProcessorModifyUserInfo struct {
  handler Admiface
}

func (p *admifaceProcessorModifyUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err112 error
  args := AdmifaceModifyUserInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ModifyUserInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceModifyUserInfoResult{}
  if retval, err2 := p.handler.ModifyUserInfo(ctx, args.Amui); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc113 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyUserInfo: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ModifyUserInfo", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err112 = thrift.WrapTException(err2)
    }
    if err2 := _exc113.Write(ctx, oprot); _write_err112 == nil && err2 != nil {
      _write_err112 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err112 == nil && err2 != nil {
      _write_err112 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err112 == nil && err2 != nil {
      _write_err112 = thrift.WrapTException(err2)
    }
    if _write_err112 != nil {
      return false, thrift.WrapTException(_write_err112)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ModifyUserInfo", thrift.REPLY, seqId); err2 != nil {
    _write_err112 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err112 == nil && err2 != nil {
    _write_err112 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err112 == nil && err2 != nil {
    _write_err112 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err112 == nil && err2 != nil {
    _write_err112 = thrift.WrapTException(err2)
  }
  if _write_err112 != nil {
    return false, thrift.WrapTException(_write_err112)
  }
  return true, err
}

type admifaceProcessorModifyRoomInfo struct {
  handler Admiface
}

func (p *admifaceProcessorModifyRoomInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err114 error
  args := AdmifaceModifyRoomInfoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "ModifyRoomInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceModifyRoomInfoResult{}
  if retval, err2 := p.handler.ModifyRoomInfo(ctx, args.Arb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc115 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyRoomInfo: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "ModifyRoomInfo", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err114 = thrift.WrapTException(err2)
    }
    if err2 := _exc115.Write(ctx, oprot); _write_err114 == nil && err2 != nil {
      _write_err114 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err114 == nil && err2 != nil {
      _write_err114 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err114 == nil && err2 != nil {
      _write_err114 = thrift.WrapTException(err2)
    }
    if _write_err114 != nil {
      return false, thrift.WrapTException(_write_err114)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "ModifyRoomInfo", thrift.REPLY, seqId); err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err114 == nil && err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err114 == nil && err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err114 == nil && err2 != nil {
    _write_err114 = thrift.WrapTException(err2)
  }
  if _write_err114 != nil {
    return false, thrift.WrapTException(_write_err114)
  }
  return true, err
}

type admifaceProcessorBlockUser struct {
  handler Admiface
}

func (p *admifaceProcessorBlockUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err116 error
  args := AdmifaceBlockUserArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "BlockUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceBlockUserResult{}
  if retval, err2 := p.handler.BlockUser(ctx, args.Abu); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc117 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BlockUser: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "BlockUser", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err116 = thrift.WrapTException(err2)
    }
    if err2 := _exc117.Write(ctx, oprot); _write_err116 == nil && err2 != nil {
      _write_err116 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err116 == nil && err2 != nil {
      _write_err116 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err116 == nil && err2 != nil {
      _write_err116 = thrift.WrapTException(err2)
    }
    if _write_err116 != nil {
      return false, thrift.WrapTException(_write_err116)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "BlockUser", thrift.REPLY, seqId); err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err116 == nil && err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err116 == nil && err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err116 == nil && err2 != nil {
    _write_err116 = thrift.WrapTException(err2)
  }
  if _write_err116 != nil {
    return false, thrift.WrapTException(_write_err116)
  }
  return true, err
}

type admifaceProcessorBlockList struct {
  handler Admiface
}

func (p *admifaceProcessorBlockList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err118 error
  args := AdmifaceBlockListArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "BlockList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceBlockListResult{}
  if retval, err2 := p.handler.BlockList(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc119 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BlockList: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "BlockList", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err118 = thrift.WrapTException(err2)
    }
    if err2 := _exc119.Write(ctx, oprot); _write_err118 == nil && err2 != nil {
      _write_err118 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err118 == nil && err2 != nil {
      _write_err118 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err118 == nil && err2 != nil {
      _write_err118 = thrift.WrapTException(err2)
    }
    if _write_err118 != nil {
      return false, thrift.WrapTException(_write_err118)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "BlockList", thrift.REPLY, seqId); err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err118 == nil && err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err118 == nil && err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err118 == nil && err2 != nil {
    _write_err118 = thrift.WrapTException(err2)
  }
  if _write_err118 != nil {
    return false, thrift.WrapTException(_write_err118)
  }
  return true, err
}

type admifaceProcessorOnlineUser struct {
  handler Admiface
}

func (p *admifaceProcessorOnlineUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err120 error
  args := AdmifaceOnlineUserArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "OnlineUser", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceOnlineUserResult{}
  if retval, err2 := p.handler.OnlineUser(ctx, args.Au); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc121 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnlineUser: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "OnlineUser", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err120 = thrift.WrapTException(err2)
    }
    if err2 := _exc121.Write(ctx, oprot); _write_err120 == nil && err2 != nil {
      _write_err120 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err120 == nil && err2 != nil {
      _write_err120 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err120 == nil && err2 != nil {
      _write_err120 = thrift.WrapTException(err2)
    }
    if _write_err120 != nil {
      return false, thrift.WrapTException(_write_err120)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "OnlineUser", thrift.REPLY, seqId); err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err120 == nil && err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err120 == nil && err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err120 == nil && err2 != nil {
    _write_err120 = thrift.WrapTException(err2)
  }
  if _write_err120 != nil {
    return false, thrift.WrapTException(_write_err120)
  }
  return true, err
}

type admifaceProcessorVroom struct {
  handler Admiface
}

func (p *admifaceProcessorVroom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err122 error
  args := AdmifaceVroomArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Vroom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceVroomResult{}
  if retval, err2 := p.handler.Vroom(ctx, args.Avb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc123 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Vroom: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Vroom", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err122 = thrift.WrapTException(err2)
    }
    if err2 := _exc123.Write(ctx, oprot); _write_err122 == nil && err2 != nil {
      _write_err122 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err122 == nil && err2 != nil {
      _write_err122 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err122 == nil && err2 != nil {
      _write_err122 = thrift.WrapTException(err2)
    }
    if _write_err122 != nil {
      return false, thrift.WrapTException(_write_err122)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Vroom", thrift.REPLY, seqId); err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err122 == nil && err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err122 == nil && err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err122 == nil && err2 != nil {
    _write_err122 = thrift.WrapTException(err2)
  }
  if _write_err122 != nil {
    return false, thrift.WrapTException(_write_err122)
  }
  return true, err
}

type admifaceProcessorTimRoom struct {
  handler Admiface
}

func (p *admifaceProcessorTimRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err124 error
  args := AdmifaceTimRoomArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "TimRoom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceTimRoomResult{}
  if retval, err2 := p.handler.TimRoom(ctx, args.Arb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc125 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TimRoom: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "TimRoom", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err124 = thrift.WrapTException(err2)
    }
    if err2 := _exc125.Write(ctx, oprot); _write_err124 == nil && err2 != nil {
      _write_err124 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err124 == nil && err2 != nil {
      _write_err124 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err124 == nil && err2 != nil {
      _write_err124 = thrift.WrapTException(err2)
    }
    if _write_err124 != nil {
      return false, thrift.WrapTException(_write_err124)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "TimRoom", thrift.REPLY, seqId); err2 != nil {
    _write_err124 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err124 == nil && err2 != nil {
    _write_err124 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err124 == nil && err2 != nil {
    _write_err124 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err124 == nil && err2 != nil {
    _write_err124 = thrift.WrapTException(err2)
  }
  if _write_err124 != nil {
    return false, thrift.WrapTException(_write_err124)
  }
  return true, err
}

type admifaceProcessorDetect struct {
  handler Admiface
}

func (p *admifaceProcessorDetect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err126 error
  args := AdmifaceDetectArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Detect", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AdmifaceDetectResult{}
  if retval, err2 := p.handler.Detect(ctx, args.Adb); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc127 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Detect: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Detect", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err126 = thrift.WrapTException(err2)
    }
    if err2 := _exc127.Write(ctx, oprot); _write_err126 == nil && err2 != nil {
      _write_err126 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err126 == nil && err2 != nil {
      _write_err126 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err126 == nil && err2 != nil {
      _write_err126 = thrift.WrapTException(err2)
    }
    if _write_err126 != nil {
      return false, thrift.WrapTException(_write_err126)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Detect", thrift.REPLY, seqId); err2 != nil {
    _write_err126 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err126 == nil && err2 != nil {
    _write_err126 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err126 == nil && err2 != nil {
    _write_err126 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err126 == nil && err2 != nil {
    _write_err126 = thrift.WrapTException(err2)
  }
  if _write_err126 != nil {
    return false, thrift.WrapTException(_write_err126)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Ab
type AdmifaceResetAuthArgs struct {
  Ab *AuthBean `thrift:"ab,1" db:"ab" json:"ab"`
}

func NewAdmifaceResetAuthArgs() *AdmifaceResetAuthArgs {
  return &AdmifaceResetAuthArgs{}
}

var AdmifaceResetAuthArgs_Ab_DEFAULT *AuthBean
func (p *AdmifaceResetAuthArgs) GetAb() *AuthBean {
  if !p.IsSetAb() {
    return AdmifaceResetAuthArgs_Ab_DEFAULT
  }
  return p.Ab
}
func (p *AdmifaceResetAuthArgs) IsSetAb() bool {
  return p.Ab != nil
}

func (p *AdmifaceResetAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceResetAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ab = &AuthBean{}
  if err := p.Ab.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
  }
  return nil
}

func (p *AdmifaceResetAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ResetAuth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceResetAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ab", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ab: ", p), err) }
  if err := p.Ab.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ab: ", p), err) }
  return err
}

func (p *AdmifaceResetAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceResetAuthArgs(%+v)", *p)
}

func (p *AdmifaceResetAuthArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceResetAuthArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceResetAuthArgs)(nil)

// Attributes:
//  - Success
type AdmifaceResetAuthResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceResetAuthResult() *AdmifaceResetAuthResult {
  return &AdmifaceResetAuthResult{}
}

var AdmifaceResetAuthResult_Success_DEFAULT *AdmAck
func (p *AdmifaceResetAuthResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceResetAuthResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceResetAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceResetAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceResetAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceResetAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ResetAuth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceResetAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceResetAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceResetAuthResult(%+v)", *p)
}

func (p *AdmifaceResetAuthResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceResetAuthResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceResetAuthResult)(nil)

// Attributes:
//  - Aa
type AdmifaceAuthArgs struct {
  Aa *AuthBean `thrift:"aa,1" db:"aa" json:"aa"`
}

func NewAdmifaceAuthArgs() *AdmifaceAuthArgs {
  return &AdmifaceAuthArgs{}
}

var AdmifaceAuthArgs_Aa_DEFAULT *AuthBean
func (p *AdmifaceAuthArgs) GetAa() *AuthBean {
  if !p.IsSetAa() {
    return AdmifaceAuthArgs_Aa_DEFAULT
  }
  return p.Aa
}
func (p *AdmifaceAuthArgs) IsSetAa() bool {
  return p.Aa != nil
}

func (p *AdmifaceAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceAuthArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Aa = &AuthBean{}
  if err := p.Aa.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aa), err)
  }
  return nil
}

func (p *AdmifaceAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Auth_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "aa", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:aa: ", p), err) }
  if err := p.Aa.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aa), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:aa: ", p), err) }
  return err
}

func (p *AdmifaceAuthArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceAuthArgs(%+v)", *p)
}

func (p *AdmifaceAuthArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceAuthArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthArgs)(nil)

// Attributes:
//  - Success
type AdmifaceAuthResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceAuthResult() *AdmifaceAuthResult {
  return &AdmifaceAuthResult{}
}

var AdmifaceAuthResult_Success_DEFAULT *AdmAck
func (p *AdmifaceAuthResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceAuthResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceAuthResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceAuthResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Auth_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceAuthResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceAuthResult(%+v)", *p)
}

func (p *AdmifaceAuthResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceAuthResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthResult)(nil)

type AdmifacePingArgs struct {
}

func NewAdmifacePingArgs() *AdmifacePingArgs {
  return &AdmifacePingArgs{}
}

func (p *AdmifacePingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifacePingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifacePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifacePingArgs(%+v)", *p)
}

func (p *AdmifacePingArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifacePingArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePingArgs)(nil)

// Attributes:
//  - Success
type AdmifacePingResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifacePingResult() *AdmifacePingResult {
  return &AdmifacePingResult{}
}

var AdmifacePingResult_Success_DEFAULT *AdmAck
func (p *AdmifacePingResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifacePingResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifacePingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifacePingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifacePingResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifacePingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifacePingResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifacePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifacePingResult(%+v)", *p)
}

func (p *AdmifacePingResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifacePingResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePingResult)(nil)

// Attributes:
//  - Atoken
type AdmifaceTokenArgs struct {
  Atoken *AdmToken `thrift:"atoken,1" db:"atoken" json:"atoken"`
}

func NewAdmifaceTokenArgs() *AdmifaceTokenArgs {
  return &AdmifaceTokenArgs{}
}

var AdmifaceTokenArgs_Atoken_DEFAULT *AdmToken
func (p *AdmifaceTokenArgs) GetAtoken() *AdmToken {
  if !p.IsSetAtoken() {
    return AdmifaceTokenArgs_Atoken_DEFAULT
  }
  return p.Atoken
}
func (p *AdmifaceTokenArgs) IsSetAtoken() bool {
  return p.Atoken != nil
}

func (p *AdmifaceTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceTokenArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Atoken = &AdmToken{}
  if err := p.Atoken.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Atoken), err)
  }
  return nil
}

func (p *AdmifaceTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Token_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "atoken", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:atoken: ", p), err) }
  if err := p.Atoken.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Atoken), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:atoken: ", p), err) }
  return err
}

func (p *AdmifaceTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceTokenArgs(%+v)", *p)
}

func (p *AdmifaceTokenArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceTokenArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTokenArgs)(nil)

// Attributes:
//  - Success
type AdmifaceTokenResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceTokenResult() *AdmifaceTokenResult {
  return &AdmifaceTokenResult{}
}

var AdmifaceTokenResult_Success_DEFAULT *AdmAck
func (p *AdmifaceTokenResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceTokenResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceTokenResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Token_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceTokenResult(%+v)", *p)
}

func (p *AdmifaceTokenResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceTokenResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTokenResult)(nil)

// Attributes:
//  - Am
type AdmifaceOsMessageArgs struct {
  Am *AdmMessage `thrift:"am,1" db:"am" json:"am"`
}

func NewAdmifaceOsMessageArgs() *AdmifaceOsMessageArgs {
  return &AdmifaceOsMessageArgs{}
}

var AdmifaceOsMessageArgs_Am_DEFAULT *AdmMessage
func (p *AdmifaceOsMessageArgs) GetAm() *AdmMessage {
  if !p.IsSetAm() {
    return AdmifaceOsMessageArgs_Am_DEFAULT
  }
  return p.Am
}
func (p *AdmifaceOsMessageArgs) IsSetAm() bool {
  return p.Am != nil
}

func (p *AdmifaceOsMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceOsMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Am = &AdmMessage{}
  if err := p.Am.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Am), err)
  }
  return nil
}

func (p *AdmifaceOsMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OsMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceOsMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "am", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:am: ", p), err) }
  if err := p.Am.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Am), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:am: ", p), err) }
  return err
}

func (p *AdmifaceOsMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceOsMessageArgs(%+v)", *p)
}

func (p *AdmifaceOsMessageArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceOsMessageArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOsMessageArgs)(nil)

// Attributes:
//  - Success
type AdmifaceOsMessageResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceOsMessageResult() *AdmifaceOsMessageResult {
  return &AdmifaceOsMessageResult{}
}

var AdmifaceOsMessageResult_Success_DEFAULT *AdmAck
func (p *AdmifaceOsMessageResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceOsMessageResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceOsMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceOsMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceOsMessageResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceOsMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OsMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceOsMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceOsMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceOsMessageResult(%+v)", *p)
}

func (p *AdmifaceOsMessageResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceOsMessageResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOsMessageResult)(nil)

// Attributes:
//  - Apm
type AdmifaceProxyMessageArgs struct {
  Apm *AdmProxyMessage `thrift:"apm,1" db:"apm" json:"apm"`
}

func NewAdmifaceProxyMessageArgs() *AdmifaceProxyMessageArgs {
  return &AdmifaceProxyMessageArgs{}
}

var AdmifaceProxyMessageArgs_Apm_DEFAULT *AdmProxyMessage
func (p *AdmifaceProxyMessageArgs) GetApm() *AdmProxyMessage {
  if !p.IsSetApm() {
    return AdmifaceProxyMessageArgs_Apm_DEFAULT
  }
  return p.Apm
}
func (p *AdmifaceProxyMessageArgs) IsSetApm() bool {
  return p.Apm != nil
}

func (p *AdmifaceProxyMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceProxyMessageArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Apm = &AdmProxyMessage{}
  if err := p.Apm.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Apm), err)
  }
  return nil
}

func (p *AdmifaceProxyMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProxyMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceProxyMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apm", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:apm: ", p), err) }
  if err := p.Apm.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Apm), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:apm: ", p), err) }
  return err
}

func (p *AdmifaceProxyMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceProxyMessageArgs(%+v)", *p)
}

func (p *AdmifaceProxyMessageArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceProxyMessageArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceProxyMessageArgs)(nil)

// Attributes:
//  - Success
type AdmifaceProxyMessageResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceProxyMessageResult() *AdmifaceProxyMessageResult {
  return &AdmifaceProxyMessageResult{}
}

var AdmifaceProxyMessageResult_Success_DEFAULT *AdmAck
func (p *AdmifaceProxyMessageResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceProxyMessageResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceProxyMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceProxyMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceProxyMessageResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceProxyMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ProxyMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceProxyMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceProxyMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceProxyMessageResult(%+v)", *p)
}

func (p *AdmifaceProxyMessageResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceProxyMessageResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceProxyMessageResult)(nil)

// Attributes:
//  - Ab
type AdmifaceRegisterArgs struct {
  Ab *AuthBean `thrift:"ab,1" db:"ab" json:"ab"`
}

func NewAdmifaceRegisterArgs() *AdmifaceRegisterArgs {
  return &AdmifaceRegisterArgs{}
}

var AdmifaceRegisterArgs_Ab_DEFAULT *AuthBean
func (p *AdmifaceRegisterArgs) GetAb() *AuthBean {
  if !p.IsSetAb() {
    return AdmifaceRegisterArgs_Ab_DEFAULT
  }
  return p.Ab
}
func (p *AdmifaceRegisterArgs) IsSetAb() bool {
  return p.Ab != nil
}

func (p *AdmifaceRegisterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceRegisterArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Ab = &AuthBean{}
  if err := p.Ab.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
  }
  return nil
}

func (p *AdmifaceRegisterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Register_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceRegisterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ab", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ab: ", p), err) }
  if err := p.Ab.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ab: ", p), err) }
  return err
}

func (p *AdmifaceRegisterArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceRegisterArgs(%+v)", *p)
}

func (p *AdmifaceRegisterArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceRegisterArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRegisterArgs)(nil)

// Attributes:
//  - Success
type AdmifaceRegisterResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceRegisterResult() *AdmifaceRegisterResult {
  return &AdmifaceRegisterResult{}
}

var AdmifaceRegisterResult_Success_DEFAULT *AdmAck
func (p *AdmifaceRegisterResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceRegisterResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceRegisterResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceRegisterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceRegisterResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceRegisterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Register_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceRegisterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceRegisterResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceRegisterResult(%+v)", *p)
}

func (p *AdmifaceRegisterResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceRegisterResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRegisterResult)(nil)

// Attributes:
//  - Amui
type AdmifaceModifyUserInfoArgs struct {
  Amui *AdmModifyUserInfo `thrift:"amui,1" db:"amui" json:"amui"`
}

func NewAdmifaceModifyUserInfoArgs() *AdmifaceModifyUserInfoArgs {
  return &AdmifaceModifyUserInfoArgs{}
}

var AdmifaceModifyUserInfoArgs_Amui_DEFAULT *AdmModifyUserInfo
func (p *AdmifaceModifyUserInfoArgs) GetAmui() *AdmModifyUserInfo {
  if !p.IsSetAmui() {
    return AdmifaceModifyUserInfoArgs_Amui_DEFAULT
  }
  return p.Amui
}
func (p *AdmifaceModifyUserInfoArgs) IsSetAmui() bool {
  return p.Amui != nil
}

func (p *AdmifaceModifyUserInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceModifyUserInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Amui = &AdmModifyUserInfo{}
  if err := p.Amui.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Amui), err)
  }
  return nil
}

func (p *AdmifaceModifyUserInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ModifyUserInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceModifyUserInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "amui", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amui: ", p), err) }
  if err := p.Amui.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Amui), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amui: ", p), err) }
  return err
}

func (p *AdmifaceModifyUserInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceModifyUserInfoArgs(%+v)", *p)
}

func (p *AdmifaceModifyUserInfoArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceModifyUserInfoArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyUserInfoArgs)(nil)

// Attributes:
//  - Success
type AdmifaceModifyUserInfoResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceModifyUserInfoResult() *AdmifaceModifyUserInfoResult {
  return &AdmifaceModifyUserInfoResult{}
}

var AdmifaceModifyUserInfoResult_Success_DEFAULT *AdmAck
func (p *AdmifaceModifyUserInfoResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceModifyUserInfoResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceModifyUserInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceModifyUserInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceModifyUserInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceModifyUserInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ModifyUserInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceModifyUserInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceModifyUserInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceModifyUserInfoResult(%+v)", *p)
}

func (p *AdmifaceModifyUserInfoResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceModifyUserInfoResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyUserInfoResult)(nil)

// Attributes:
//  - Arb
type AdmifaceModifyRoomInfoArgs struct {
  Arb *AdmRoomBean `thrift:"arb,1" db:"arb" json:"arb"`
}

func NewAdmifaceModifyRoomInfoArgs() *AdmifaceModifyRoomInfoArgs {
  return &AdmifaceModifyRoomInfoArgs{}
}

var AdmifaceModifyRoomInfoArgs_Arb_DEFAULT *AdmRoomBean
func (p *AdmifaceModifyRoomInfoArgs) GetArb() *AdmRoomBean {
  if !p.IsSetArb() {
    return AdmifaceModifyRoomInfoArgs_Arb_DEFAULT
  }
  return p.Arb
}
func (p *AdmifaceModifyRoomInfoArgs) IsSetArb() bool {
  return p.Arb != nil
}

func (p *AdmifaceModifyRoomInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceModifyRoomInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Arb = &AdmRoomBean{}
  if err := p.Arb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arb), err)
  }
  return nil
}

func (p *AdmifaceModifyRoomInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ModifyRoomInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceModifyRoomInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arb: ", p), err) }
  if err := p.Arb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arb: ", p), err) }
  return err
}

func (p *AdmifaceModifyRoomInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceModifyRoomInfoArgs(%+v)", *p)
}

func (p *AdmifaceModifyRoomInfoArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceModifyRoomInfoArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyRoomInfoArgs)(nil)

// Attributes:
//  - Success
type AdmifaceModifyRoomInfoResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceModifyRoomInfoResult() *AdmifaceModifyRoomInfoResult {
  return &AdmifaceModifyRoomInfoResult{}
}

var AdmifaceModifyRoomInfoResult_Success_DEFAULT *AdmAck
func (p *AdmifaceModifyRoomInfoResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceModifyRoomInfoResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceModifyRoomInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceModifyRoomInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceModifyRoomInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceModifyRoomInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ModifyRoomInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceModifyRoomInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceModifyRoomInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceModifyRoomInfoResult(%+v)", *p)
}

func (p *AdmifaceModifyRoomInfoResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceModifyRoomInfoResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyRoomInfoResult)(nil)

// Attributes:
//  - Abu
type AdmifaceBlockUserArgs struct {
  Abu *AdmBlockUser `thrift:"abu,1" db:"abu" json:"abu"`
}

func NewAdmifaceBlockUserArgs() *AdmifaceBlockUserArgs {
  return &AdmifaceBlockUserArgs{}
}

var AdmifaceBlockUserArgs_Abu_DEFAULT *AdmBlockUser
func (p *AdmifaceBlockUserArgs) GetAbu() *AdmBlockUser {
  if !p.IsSetAbu() {
    return AdmifaceBlockUserArgs_Abu_DEFAULT
  }
  return p.Abu
}
func (p *AdmifaceBlockUserArgs) IsSetAbu() bool {
  return p.Abu != nil
}

func (p *AdmifaceBlockUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceBlockUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Abu = &AdmBlockUser{}
  if err := p.Abu.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Abu), err)
  }
  return nil
}

func (p *AdmifaceBlockUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BlockUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceBlockUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "abu", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:abu: ", p), err) }
  if err := p.Abu.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Abu), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:abu: ", p), err) }
  return err
}

func (p *AdmifaceBlockUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceBlockUserArgs(%+v)", *p)
}

func (p *AdmifaceBlockUserArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceBlockUserArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockUserArgs)(nil)

// Attributes:
//  - Success
type AdmifaceBlockUserResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockUserResult() *AdmifaceBlockUserResult {
  return &AdmifaceBlockUserResult{}
}

var AdmifaceBlockUserResult_Success_DEFAULT *AdmAck
func (p *AdmifaceBlockUserResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceBlockUserResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceBlockUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceBlockUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceBlockUserResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceBlockUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BlockUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceBlockUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceBlockUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceBlockUserResult(%+v)", *p)
}

func (p *AdmifaceBlockUserResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceBlockUserResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockUserResult)(nil)

type AdmifaceBlockListArgs struct {
}

func NewAdmifaceBlockListArgs() *AdmifaceBlockListArgs {
  return &AdmifaceBlockListArgs{}
}

func (p *AdmifaceBlockListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceBlockListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BlockList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceBlockListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceBlockListArgs(%+v)", *p)
}

func (p *AdmifaceBlockListArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceBlockListArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockListArgs)(nil)

// Attributes:
//  - Success
type AdmifaceBlockListResult struct {
  Success *AdmBlockList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockListResult() *AdmifaceBlockListResult {
  return &AdmifaceBlockListResult{}
}

var AdmifaceBlockListResult_Success_DEFAULT *AdmBlockList
func (p *AdmifaceBlockListResult) GetSuccess() *AdmBlockList {
  if !p.IsSetSuccess() {
    return AdmifaceBlockListResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceBlockListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceBlockListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceBlockListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmBlockList{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceBlockListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BlockList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceBlockListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceBlockListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceBlockListResult(%+v)", *p)
}

func (p *AdmifaceBlockListResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceBlockListResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockListResult)(nil)

// Attributes:
//  - Au
type AdmifaceOnlineUserArgs struct {
  Au *AdmOnlineUser `thrift:"au,1" db:"au" json:"au"`
}

func NewAdmifaceOnlineUserArgs() *AdmifaceOnlineUserArgs {
  return &AdmifaceOnlineUserArgs{}
}

var AdmifaceOnlineUserArgs_Au_DEFAULT *AdmOnlineUser
func (p *AdmifaceOnlineUserArgs) GetAu() *AdmOnlineUser {
  if !p.IsSetAu() {
    return AdmifaceOnlineUserArgs_Au_DEFAULT
  }
  return p.Au
}
func (p *AdmifaceOnlineUserArgs) IsSetAu() bool {
  return p.Au != nil
}

func (p *AdmifaceOnlineUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceOnlineUserArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Au = &AdmOnlineUser{}
  if err := p.Au.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Au), err)
  }
  return nil
}

func (p *AdmifaceOnlineUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnlineUser_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceOnlineUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "au", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:au: ", p), err) }
  if err := p.Au.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Au), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:au: ", p), err) }
  return err
}

func (p *AdmifaceOnlineUserArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceOnlineUserArgs(%+v)", *p)
}

func (p *AdmifaceOnlineUserArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceOnlineUserArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOnlineUserArgs)(nil)

// Attributes:
//  - Success
type AdmifaceOnlineUserResult struct {
  Success *AdmTidList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceOnlineUserResult() *AdmifaceOnlineUserResult {
  return &AdmifaceOnlineUserResult{}
}

var AdmifaceOnlineUserResult_Success_DEFAULT *AdmTidList
func (p *AdmifaceOnlineUserResult) GetSuccess() *AdmTidList {
  if !p.IsSetSuccess() {
    return AdmifaceOnlineUserResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceOnlineUserResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceOnlineUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceOnlineUserResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmTidList{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceOnlineUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "OnlineUser_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceOnlineUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceOnlineUserResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceOnlineUserResult(%+v)", *p)
}

func (p *AdmifaceOnlineUserResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceOnlineUserResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOnlineUserResult)(nil)

// Attributes:
//  - Avb
type AdmifaceVroomArgs struct {
  Avb *AdmVroomBean `thrift:"avb,1" db:"avb" json:"avb"`
}

func NewAdmifaceVroomArgs() *AdmifaceVroomArgs {
  return &AdmifaceVroomArgs{}
}

var AdmifaceVroomArgs_Avb_DEFAULT *AdmVroomBean
func (p *AdmifaceVroomArgs) GetAvb() *AdmVroomBean {
  if !p.IsSetAvb() {
    return AdmifaceVroomArgs_Avb_DEFAULT
  }
  return p.Avb
}
func (p *AdmifaceVroomArgs) IsSetAvb() bool {
  return p.Avb != nil
}

func (p *AdmifaceVroomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceVroomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Avb = &AdmVroomBean{}
  if err := p.Avb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Avb), err)
  }
  return nil
}

func (p *AdmifaceVroomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Vroom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceVroomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:avb: ", p), err) }
  if err := p.Avb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Avb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:avb: ", p), err) }
  return err
}

func (p *AdmifaceVroomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceVroomArgs(%+v)", *p)
}

func (p *AdmifaceVroomArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceVroomArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVroomArgs)(nil)

// Attributes:
//  - Success
type AdmifaceVroomResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVroomResult() *AdmifaceVroomResult {
  return &AdmifaceVroomResult{}
}

var AdmifaceVroomResult_Success_DEFAULT *AdmAck
func (p *AdmifaceVroomResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceVroomResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceVroomResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceVroomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceVroomResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceVroomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Vroom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceVroomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceVroomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceVroomResult(%+v)", *p)
}

func (p *AdmifaceVroomResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceVroomResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVroomResult)(nil)

// Attributes:
//  - Arb
type AdmifaceTimRoomArgs struct {
  Arb *AdmRoomReq `thrift:"arb,1" db:"arb" json:"arb"`
}

func NewAdmifaceTimRoomArgs() *AdmifaceTimRoomArgs {
  return &AdmifaceTimRoomArgs{}
}

var AdmifaceTimRoomArgs_Arb_DEFAULT *AdmRoomReq
func (p *AdmifaceTimRoomArgs) GetArb() *AdmRoomReq {
  if !p.IsSetArb() {
    return AdmifaceTimRoomArgs_Arb_DEFAULT
  }
  return p.Arb
}
func (p *AdmifaceTimRoomArgs) IsSetArb() bool {
  return p.Arb != nil
}

func (p *AdmifaceTimRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceTimRoomArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Arb = &AdmRoomReq{}
  if err := p.Arb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arb), err)
  }
  return nil
}

func (p *AdmifaceTimRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceTimRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "arb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arb: ", p), err) }
  if err := p.Arb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arb: ", p), err) }
  return err
}

func (p *AdmifaceTimRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceTimRoomArgs(%+v)", *p)
}

func (p *AdmifaceTimRoomArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceTimRoomArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTimRoomArgs)(nil)

// Attributes:
//  - Success
type AdmifaceTimRoomResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceTimRoomResult() *AdmifaceTimRoomResult {
  return &AdmifaceTimRoomResult{}
}

var AdmifaceTimRoomResult_Success_DEFAULT *AdmAck
func (p *AdmifaceTimRoomResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceTimRoomResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceTimRoomResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceTimRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceTimRoomResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceTimRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceTimRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceTimRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceTimRoomResult(%+v)", *p)
}

func (p *AdmifaceTimRoomResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceTimRoomResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTimRoomResult)(nil)

// Attributes:
//  - Adb
type AdmifaceDetectArgs struct {
  Adb *AdmDetectBean `thrift:"adb,1" db:"adb" json:"adb"`
}

func NewAdmifaceDetectArgs() *AdmifaceDetectArgs {
  return &AdmifaceDetectArgs{}
}

var AdmifaceDetectArgs_Adb_DEFAULT *AdmDetectBean
func (p *AdmifaceDetectArgs) GetAdb() *AdmDetectBean {
  if !p.IsSetAdb() {
    return AdmifaceDetectArgs_Adb_DEFAULT
  }
  return p.Adb
}
func (p *AdmifaceDetectArgs) IsSetAdb() bool {
  return p.Adb != nil
}

func (p *AdmifaceDetectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceDetectArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Adb = &AdmDetectBean{}
  if err := p.Adb.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Adb), err)
  }
  return nil
}

func (p *AdmifaceDetectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Detect_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceDetectArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "adb", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:adb: ", p), err) }
  if err := p.Adb.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Adb), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:adb: ", p), err) }
  return err
}

func (p *AdmifaceDetectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceDetectArgs(%+v)", *p)
}

func (p *AdmifaceDetectArgs) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceDetectArgs",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceDetectArgs)(nil)

// Attributes:
//  - Success
type AdmifaceDetectResult struct {
  Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceDetectResult() *AdmifaceDetectResult {
  return &AdmifaceDetectResult{}
}

var AdmifaceDetectResult_Success_DEFAULT *AdmAck
func (p *AdmifaceDetectResult) GetSuccess() *AdmAck {
  if !p.IsSetSuccess() {
    return AdmifaceDetectResult_Success_DEFAULT
  }
  return p.Success
}
func (p *AdmifaceDetectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AdmifaceDetectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AdmifaceDetectResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AdmAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AdmifaceDetectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Detect_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AdmifaceDetectResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AdmifaceDetectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AdmifaceDetectResult(%+v)", *p)
}

func (p *AdmifaceDetectResult) LogValue() slog.Value {
  if p == nil {
    return slog.AnyValue(nil)
  }
  v := thrift.SlogTStructWrapper{
    Type: "*stub.AdmifaceDetectResult",
    Value: p,
  }
  return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceDetectResult)(nil)


