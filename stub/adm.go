// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

package stub

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/donnie4w/gothrift/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Username
//  - Password
//  - Domain
// 
type AuthBean struct {
	Username *string `thrift:"username,1" db:"username" json:"username,omitempty"`
	Password *string `thrift:"password,2" db:"password" json:"password,omitempty"`
	Domain *string `thrift:"domain,3" db:"domain" json:"domain,omitempty"`
}

func NewAuthBean() *AuthBean {
	return &AuthBean{}
}

var AuthBean_Username_DEFAULT string

func (p *AuthBean) GetUsername() string {
	if !p.IsSetUsername() {
		return AuthBean_Username_DEFAULT
	}
	return *p.Username
}

var AuthBean_Password_DEFAULT string

func (p *AuthBean) GetPassword() string {
	if !p.IsSetPassword() {
		return AuthBean_Password_DEFAULT
	}
	return *p.Password
}

var AuthBean_Domain_DEFAULT string

func (p *AuthBean) GetDomain() string {
	if !p.IsSetDomain() {
		return AuthBean_Domain_DEFAULT
	}
	return *p.Domain
}

func (p *AuthBean) IsSetUsername() bool {
	return p.Username != nil
}

func (p *AuthBean) IsSetPassword() bool {
	return p.Password != nil
}

func (p *AuthBean) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *AuthBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuthBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *AuthBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Password = &v
	}
	return nil
}

func (p *AuthBean) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *AuthBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AuthBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin(ctx, "username", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
		}
	}
	return err
}

func (p *AuthBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Password)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err)
		}
	}
	return err
}

func (p *AuthBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err)
		}
	}
	return err
}

func (p *AuthBean) Equals(other *AuthBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Username != other.Username {
		if p.Username == nil || other.Username == nil {
			return false
		}
		if (*p.Username) != (*other.Username) { return false }
	}
	if p.Password != other.Password {
		if p.Password == nil || other.Password == nil {
			return false
		}
		if (*p.Password) != (*other.Password) { return false }
	}
	if p.Domain != other.Domain {
		if p.Domain == nil || other.Domain == nil {
			return false
		}
		if (*p.Domain) != (*other.Domain) { return false }
	}
	return true
}

func (p *AuthBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthBean(%+v)", *p)
}

func (p *AuthBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AuthBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AuthBean)(nil)

func (p *AuthBean) Validate() error {
	return nil
}

// Attributes:
//  - Node
//  - Domain
//  - Resource
//  - Termtyp
//  - Extend
// 
type AdmTid struct {
	Node string `thrift:"node,1,required" db:"node" json:"node"`
	Domain *string `thrift:"domain,2" db:"domain" json:"domain,omitempty"`
	Resource *string `thrift:"resource,3" db:"resource" json:"resource,omitempty"`
	Termtyp *int8 `thrift:"termtyp,4" db:"termtyp" json:"termtyp,omitempty"`
	Extend map[string]string `thrift:"extend,5" db:"extend" json:"extend,omitempty"`
}

func NewAdmTid() *AdmTid {
	return &AdmTid{}
}



func (p *AdmTid) GetNode() string {
	return p.Node
}

var AdmTid_Domain_DEFAULT string

func (p *AdmTid) GetDomain() string {
	if !p.IsSetDomain() {
		return AdmTid_Domain_DEFAULT
	}
	return *p.Domain
}

var AdmTid_Resource_DEFAULT string

func (p *AdmTid) GetResource() string {
	if !p.IsSetResource() {
		return AdmTid_Resource_DEFAULT
	}
	return *p.Resource
}

var AdmTid_Termtyp_DEFAULT int8

func (p *AdmTid) GetTermtyp() int8 {
	if !p.IsSetTermtyp() {
		return AdmTid_Termtyp_DEFAULT
	}
	return *p.Termtyp
}

var AdmTid_Extend_DEFAULT map[string]string


func (p *AdmTid) GetExtend() map[string]string {
	return p.Extend
}

func (p *AdmTid) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *AdmTid) IsSetResource() bool {
	return p.Resource != nil
}

func (p *AdmTid) IsSetTermtyp() bool {
	return p.Termtyp != nil
}

func (p *AdmTid) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *AdmTid) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNode bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetNode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNode{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Node is not set"));
	}
	return nil
}

func (p *AdmTid) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Node = v
	}
	return nil
}

func (p *AdmTid) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *AdmTid) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Resource = &v
	}
	return nil
}

func (p *AdmTid) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Termtyp = &temp
	}
	return nil
}

func (p *AdmTid) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Extend[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmTid) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmTid"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmTid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Node)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err)
	}
	return err
}

func (p *AdmTid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
		}
	}
	return err
}

func (p *AdmTid) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err := oprot.WriteFieldBegin(ctx, "resource", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resource: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Resource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resource (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resource: ", p), err)
		}
	}
	return err
}

func (p *AdmTid) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTermtyp() {
		if err := oprot.WriteFieldBegin(ctx, "termtyp", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:termtyp: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Termtyp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.termtyp (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:termtyp: ", p), err)
		}
	}
	return err
}

func (p *AdmTid) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extend: ", p), err)
		}
	}
	return err
}

func (p *AdmTid) Equals(other *AdmTid) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Node != other.Node { return false }
	if p.Domain != other.Domain {
		if p.Domain == nil || other.Domain == nil {
			return false
		}
		if (*p.Domain) != (*other.Domain) { return false }
	}
	if p.Resource != other.Resource {
		if p.Resource == nil || other.Resource == nil {
			return false
		}
		if (*p.Resource) != (*other.Resource) { return false }
	}
	if p.Termtyp != other.Termtyp {
		if p.Termtyp == nil || other.Termtyp == nil {
			return false
		}
		if (*p.Termtyp) != (*other.Termtyp) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src2 := other.Extend[k]
		if _tgt != _src2 { return false }
	}
	return true
}

func (p *AdmTid) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmTid(%+v)", *p)
}

func (p *AdmTid) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmTid",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmTid)(nil)

func (p *AdmTid) Validate() error {
	return nil
}

// Attributes:
//  - Name
//  - Password
//  - Domain
// 
type AdmToken struct {
	Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
	Password *string `thrift:"password,2" db:"password" json:"password,omitempty"`
	Domain *string `thrift:"domain,3" db:"domain" json:"domain,omitempty"`
}

func NewAdmToken() *AdmToken {
	return &AdmToken{}
}

var AdmToken_Name_DEFAULT string

func (p *AdmToken) GetName() string {
	if !p.IsSetName() {
		return AdmToken_Name_DEFAULT
	}
	return *p.Name
}

var AdmToken_Password_DEFAULT string

func (p *AdmToken) GetPassword() string {
	if !p.IsSetPassword() {
		return AdmToken_Password_DEFAULT
	}
	return *p.Password
}

var AdmToken_Domain_DEFAULT string

func (p *AdmToken) GetDomain() string {
	if !p.IsSetDomain() {
		return AdmToken_Domain_DEFAULT
	}
	return *p.Domain
}

func (p *AdmToken) IsSetName() bool {
	return p.Name != nil
}

func (p *AdmToken) IsSetPassword() bool {
	return p.Password != nil
}

func (p *AdmToken) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *AdmToken) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmToken) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *AdmToken) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Password = &v
	}
	return nil
}

func (p *AdmToken) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *AdmToken) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmToken"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmToken) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
		}
	}
	return err
}

func (p *AdmToken) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPassword() {
		if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:password: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Password)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.password (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:password: ", p), err)
		}
	}
	return err
}

func (p *AdmToken) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err)
		}
	}
	return err
}

func (p *AdmToken) Equals(other *AdmToken) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		if p.Name == nil || other.Name == nil {
			return false
		}
		if (*p.Name) != (*other.Name) { return false }
	}
	if p.Password != other.Password {
		if p.Password == nil || other.Password == nil {
			return false
		}
		if (*p.Password) != (*other.Password) { return false }
	}
	if p.Domain != other.Domain {
		if p.Domain == nil || other.Domain == nil {
			return false
		}
		if (*p.Domain) != (*other.Domain) { return false }
	}
	return true
}

func (p *AdmToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmToken(%+v)", *p)
}

func (p *AdmToken) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmToken",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmToken)(nil)

func (p *AdmToken) Validate() error {
	return nil
}

// Attributes:
//  - MsType
//  - OdType
//  - ID
//  - Mid
//  - BnType
//  - FromNode
//  - ToNode
//  - Domain
//  - RoomNode
//  - DataBinary
//  - DataString
//  - Udtype
//  - Udshow
//  - Extend
//  - Extra
// 
type AdmMessage struct {
	MsType int8 `thrift:"msType,1,required" db:"msType" json:"msType"`
	OdType int8 `thrift:"odType,2,required" db:"odType" json:"odType"`
	ID *int64 `thrift:"id,3" db:"id" json:"id,omitempty"`
	Mid *int64 `thrift:"mid,4" db:"mid" json:"mid,omitempty"`
	BnType *int32 `thrift:"bnType,5" db:"bnType" json:"bnType,omitempty"`
	FromNode *string `thrift:"fromNode,6" db:"fromNode" json:"fromNode,omitempty"`
	ToNode *string `thrift:"toNode,7" db:"toNode" json:"toNode,omitempty"`
	Domain *string `thrift:"domain,8" db:"domain" json:"domain,omitempty"`
	RoomNode *string `thrift:"roomNode,9" db:"roomNode" json:"roomNode,omitempty"`
	DataBinary []byte `thrift:"dataBinary,10" db:"dataBinary" json:"dataBinary,omitempty"`
	DataString *string `thrift:"dataString,11" db:"dataString" json:"dataString,omitempty"`
	Udtype *int16 `thrift:"udtype,12" db:"udtype" json:"udtype,omitempty"`
	Udshow *int16 `thrift:"udshow,13" db:"udshow" json:"udshow,omitempty"`
	Extend map[string]string `thrift:"extend,14" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,15" db:"extra" json:"extra,omitempty"`
}

func NewAdmMessage() *AdmMessage {
	return &AdmMessage{}
}



func (p *AdmMessage) GetMsType() int8 {
	return p.MsType
}



func (p *AdmMessage) GetOdType() int8 {
	return p.OdType
}

var AdmMessage_ID_DEFAULT int64

func (p *AdmMessage) GetID() int64 {
	if !p.IsSetID() {
		return AdmMessage_ID_DEFAULT
	}
	return *p.ID
}

var AdmMessage_Mid_DEFAULT int64

func (p *AdmMessage) GetMid() int64 {
	if !p.IsSetMid() {
		return AdmMessage_Mid_DEFAULT
	}
	return *p.Mid
}

var AdmMessage_BnType_DEFAULT int32

func (p *AdmMessage) GetBnType() int32 {
	if !p.IsSetBnType() {
		return AdmMessage_BnType_DEFAULT
	}
	return *p.BnType
}

var AdmMessage_FromNode_DEFAULT string

func (p *AdmMessage) GetFromNode() string {
	if !p.IsSetFromNode() {
		return AdmMessage_FromNode_DEFAULT
	}
	return *p.FromNode
}

var AdmMessage_ToNode_DEFAULT string

func (p *AdmMessage) GetToNode() string {
	if !p.IsSetToNode() {
		return AdmMessage_ToNode_DEFAULT
	}
	return *p.ToNode
}

var AdmMessage_Domain_DEFAULT string

func (p *AdmMessage) GetDomain() string {
	if !p.IsSetDomain() {
		return AdmMessage_Domain_DEFAULT
	}
	return *p.Domain
}

var AdmMessage_RoomNode_DEFAULT string

func (p *AdmMessage) GetRoomNode() string {
	if !p.IsSetRoomNode() {
		return AdmMessage_RoomNode_DEFAULT
	}
	return *p.RoomNode
}

var AdmMessage_DataBinary_DEFAULT []byte


func (p *AdmMessage) GetDataBinary() []byte {
	return p.DataBinary
}

var AdmMessage_DataString_DEFAULT string

func (p *AdmMessage) GetDataString() string {
	if !p.IsSetDataString() {
		return AdmMessage_DataString_DEFAULT
	}
	return *p.DataString
}

var AdmMessage_Udtype_DEFAULT int16

func (p *AdmMessage) GetUdtype() int16 {
	if !p.IsSetUdtype() {
		return AdmMessage_Udtype_DEFAULT
	}
	return *p.Udtype
}

var AdmMessage_Udshow_DEFAULT int16

func (p *AdmMessage) GetUdshow() int16 {
	if !p.IsSetUdshow() {
		return AdmMessage_Udshow_DEFAULT
	}
	return *p.Udshow
}

var AdmMessage_Extend_DEFAULT map[string]string


func (p *AdmMessage) GetExtend() map[string]string {
	return p.Extend
}

var AdmMessage_Extra_DEFAULT map[string][]byte


func (p *AdmMessage) GetExtra() map[string][]byte {
	return p.Extra
}

func (p *AdmMessage) IsSetID() bool {
	return p.ID != nil
}

func (p *AdmMessage) IsSetMid() bool {
	return p.Mid != nil
}

func (p *AdmMessage) IsSetBnType() bool {
	return p.BnType != nil
}

func (p *AdmMessage) IsSetFromNode() bool {
	return p.FromNode != nil
}

func (p *AdmMessage) IsSetToNode() bool {
	return p.ToNode != nil
}

func (p *AdmMessage) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *AdmMessage) IsSetRoomNode() bool {
	return p.RoomNode != nil
}

func (p *AdmMessage) IsSetDataBinary() bool {
	return p.DataBinary != nil
}

func (p *AdmMessage) IsSetDataString() bool {
	return p.DataString != nil
}

func (p *AdmMessage) IsSetUdtype() bool {
	return p.Udtype != nil
}

func (p *AdmMessage) IsSetUdshow() bool {
	return p.Udshow != nil
}

func (p *AdmMessage) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *AdmMessage) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *AdmMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsType bool = false;
	var issetOdType bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetOdType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsType{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MsType is not set"));
	}
	if !issetOdType{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OdType is not set"));
	}
	return nil
}

func (p *AdmMessage) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.MsType = temp
	}
	return nil
}

func (p *AdmMessage) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.OdType = temp
	}
	return nil
}

func (p *AdmMessage) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *AdmMessage) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Mid = &v
	}
	return nil
}

func (p *AdmMessage) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BnType = &v
	}
	return nil
}

func (p *AdmMessage) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.FromNode = &v
	}
	return nil
}

func (p *AdmMessage) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ToNode = &v
	}
	return nil
}

func (p *AdmMessage) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *AdmMessage) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.RoomNode = &v
	}
	return nil
}

func (p *AdmMessage) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DataBinary = v
	}
	return nil
}

func (p *AdmMessage) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.DataString = &v
	}
	return nil
}

func (p *AdmMessage) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Udtype = &v
	}
	return nil
}

func (p *AdmMessage) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Udshow = &v
	}
	return nil
}

func (p *AdmMessage) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val4 = v
		}
		p.Extend[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmMessage) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key5 = v
		}
		var _val6 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val6 = v
		}
		p.Extra[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
		if err := p.writeField12(ctx, oprot); err != nil { return err }
		if err := p.writeField13(ctx, oprot); err != nil { return err }
		if err := p.writeField14(ctx, oprot); err != nil { return err }
		if err := p.writeField15(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msType", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.MsType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msType: ", p), err)
	}
	return err
}

func (p *AdmMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "odType", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:odType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.OdType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.odType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:odType: ", p), err)
	}
	return err
}

func (p *AdmMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMid() {
		if err := oprot.WriteFieldBegin(ctx, "mid", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mid: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Mid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mid (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mid: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBnType() {
		if err := oprot.WriteFieldBegin(ctx, "bnType", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bnType: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.BnType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bnType (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bnType: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFromNode() {
		if err := oprot.WriteFieldBegin(ctx, "fromNode", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fromNode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.FromNode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fromNode (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fromNode: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToNode() {
		if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:toNode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.ToNode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.toNode (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:toNode: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:domain: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:domain: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomNode() {
		if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:roomNode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.RoomNode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.roomNode (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:roomNode: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDataBinary() {
		if err := oprot.WriteFieldBegin(ctx, "dataBinary", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:dataBinary: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.DataBinary); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dataBinary (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:dataBinary: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDataString() {
		if err := oprot.WriteFieldBegin(ctx, "dataString", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:dataString: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.DataString)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dataString (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:dataString: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUdtype() {
		if err := oprot.WriteFieldBegin(ctx, "udtype", thrift.I16, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:udtype: ", p), err)
		}
		if err := oprot.WriteI16(ctx, int16(*p.Udtype)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.udtype (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:udtype: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUdshow() {
		if err := oprot.WriteFieldBegin(ctx, "udshow", thrift.I16, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:udshow: ", p), err)
		}
		if err := oprot.WriteI16(ctx, int16(*p.Udshow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.udshow (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:udshow: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:extend: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:extra: ", p), err)
		}
	}
	return err
}

func (p *AdmMessage) Equals(other *AdmMessage) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MsType != other.MsType { return false }
	if p.OdType != other.OdType { return false }
	if p.ID != other.ID {
		if p.ID == nil || other.ID == nil {
			return false
		}
		if (*p.ID) != (*other.ID) { return false }
	}
	if p.Mid != other.Mid {
		if p.Mid == nil || other.Mid == nil {
			return false
		}
		if (*p.Mid) != (*other.Mid) { return false }
	}
	if p.BnType != other.BnType {
		if p.BnType == nil || other.BnType == nil {
			return false
		}
		if (*p.BnType) != (*other.BnType) { return false }
	}
	if p.FromNode != other.FromNode {
		if p.FromNode == nil || other.FromNode == nil {
			return false
		}
		if (*p.FromNode) != (*other.FromNode) { return false }
	}
	if p.ToNode != other.ToNode {
		if p.ToNode == nil || other.ToNode == nil {
			return false
		}
		if (*p.ToNode) != (*other.ToNode) { return false }
	}
	if p.Domain != other.Domain {
		if p.Domain == nil || other.Domain == nil {
			return false
		}
		if (*p.Domain) != (*other.Domain) { return false }
	}
	if p.RoomNode != other.RoomNode {
		if p.RoomNode == nil || other.RoomNode == nil {
			return false
		}
		if (*p.RoomNode) != (*other.RoomNode) { return false }
	}
	if bytes.Compare(p.DataBinary, other.DataBinary) != 0 { return false }
	if p.DataString != other.DataString {
		if p.DataString == nil || other.DataString == nil {
			return false
		}
		if (*p.DataString) != (*other.DataString) { return false }
	}
	if p.Udtype != other.Udtype {
		if p.Udtype == nil || other.Udtype == nil {
			return false
		}
		if (*p.Udtype) != (*other.Udtype) { return false }
	}
	if p.Udshow != other.Udshow {
		if p.Udshow == nil || other.Udshow == nil {
			return false
		}
		if (*p.Udshow) != (*other.Udshow) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src7 := other.Extend[k]
		if _tgt != _src7 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src8 := other.Extra[k]
		if bytes.Compare(_tgt, _src8) != 0 { return false }
	}
	return true
}

func (p *AdmMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmMessage(%+v)", *p)
}

func (p *AdmMessage) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmMessage",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmMessage)(nil)

func (p *AdmMessage) Validate() error {
	return nil
}

// Attributes:
//  - Nodes
//  - Message
// 
type AdmMessageBroadcast struct {
	Nodes []string `thrift:"nodes,1" db:"nodes" json:"nodes,omitempty"`
	Message *AdmMessage `thrift:"message,2" db:"message" json:"message,omitempty"`
}

func NewAdmMessageBroadcast() *AdmMessageBroadcast {
	return &AdmMessageBroadcast{}
}

var AdmMessageBroadcast_Nodes_DEFAULT []string


func (p *AdmMessageBroadcast) GetNodes() []string {
	return p.Nodes
}

var AdmMessageBroadcast_Message_DEFAULT *AdmMessage

func (p *AdmMessageBroadcast) GetMessage() *AdmMessage {
	if !p.IsSetMessage() {
		return AdmMessageBroadcast_Message_DEFAULT
	}
	return p.Message
}

func (p *AdmMessageBroadcast) IsSetNodes() bool {
	return p.Nodes != nil
}

func (p *AdmMessageBroadcast) IsSetMessage() bool {
	return p.Message != nil
}

func (p *AdmMessageBroadcast) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmMessageBroadcast) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.Nodes = append(p.Nodes, _elem9)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmMessageBroadcast) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Message = &AdmMessage{}
	if err := p.Message.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *AdmMessageBroadcast) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmMessageBroadcast"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmMessageBroadcast) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodes() {
		if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodes: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Nodes {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodes: ", p), err)
		}
	}
	return err
}

func (p *AdmMessageBroadcast) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := p.Message.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *AdmMessageBroadcast) Equals(other *AdmMessageBroadcast) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Nodes) != len(other.Nodes) { return false }
	for i, _tgt := range p.Nodes {
		_src10 := other.Nodes[i]
		if _tgt != _src10 { return false }
	}
	if !p.Message.Equals(other.Message) { return false }
	return true
}

func (p *AdmMessageBroadcast) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmMessageBroadcast(%+v)", *p)
}

func (p *AdmMessageBroadcast) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmMessageBroadcast",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmMessageBroadcast)(nil)

func (p *AdmMessageBroadcast) Validate() error {
	return nil
}

// Attributes:
//  - Status
//  - Totalcount
//  - Msglist
// 
type AdmMessageList struct {
	Status *int8 `thrift:"status,1" db:"status" json:"status,omitempty"`
	Totalcount *int64 `thrift:"totalcount,2" db:"totalcount" json:"totalcount,omitempty"`
	Msglist []*AdmMessage `thrift:"msglist,3" db:"msglist" json:"msglist,omitempty"`
}

func NewAdmMessageList() *AdmMessageList {
	return &AdmMessageList{}
}

var AdmMessageList_Status_DEFAULT int8

func (p *AdmMessageList) GetStatus() int8 {
	if !p.IsSetStatus() {
		return AdmMessageList_Status_DEFAULT
	}
	return *p.Status
}

var AdmMessageList_Totalcount_DEFAULT int64

func (p *AdmMessageList) GetTotalcount() int64 {
	if !p.IsSetTotalcount() {
		return AdmMessageList_Totalcount_DEFAULT
	}
	return *p.Totalcount
}

var AdmMessageList_Msglist_DEFAULT []*AdmMessage


func (p *AdmMessageList) GetMsglist() []*AdmMessage {
	return p.Msglist
}

func (p *AdmMessageList) IsSetStatus() bool {
	return p.Status != nil
}

func (p *AdmMessageList) IsSetTotalcount() bool {
	return p.Totalcount != nil
}

func (p *AdmMessageList) IsSetMsglist() bool {
	return p.Msglist != nil
}

func (p *AdmMessageList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmMessageList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *AdmMessageList) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Totalcount = &v
	}
	return nil
}

func (p *AdmMessageList) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AdmMessage, 0, size)
	p.Msglist = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &AdmMessage{}
		if err := _elem11.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Msglist = append(p.Msglist, _elem11)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmMessageList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmMessageList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmMessageList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin(ctx, "status", thrift.BYTE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
		}
	}
	return err
}

func (p *AdmMessageList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalcount() {
		if err := oprot.WriteFieldBegin(ctx, "totalcount", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalcount: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Totalcount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalcount (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalcount: ", p), err)
		}
	}
	return err
}

func (p *AdmMessageList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMsglist() {
		if err := oprot.WriteFieldBegin(ctx, "msglist", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msglist: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Msglist)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Msglist {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msglist: ", p), err)
		}
	}
	return err
}

func (p *AdmMessageList) Equals(other *AdmMessageList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Status != other.Status {
		if p.Status == nil || other.Status == nil {
			return false
		}
		if (*p.Status) != (*other.Status) { return false }
	}
	if p.Totalcount != other.Totalcount {
		if p.Totalcount == nil || other.Totalcount == nil {
			return false
		}
		if (*p.Totalcount) != (*other.Totalcount) { return false }
	}
	if len(p.Msglist) != len(other.Msglist) { return false }
	for i, _tgt := range p.Msglist {
		_src12 := other.Msglist[i]
		if !_tgt.Equals(_src12) { return false }
	}
	return true
}

func (p *AdmMessageList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmMessageList(%+v)", *p)
}

func (p *AdmMessageList) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmMessageList",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmMessageList)(nil)

func (p *AdmMessageList) Validate() error {
	return nil
}

// Attributes:
//  - ID
//  - Offline
//  - SubStatus
//  - FromNode
//  - ToNode
//  - ToList
//  - Show
//  - Status
//  - Extend
//  - Extra
// 
type AdmPresence struct {
	ID *int64 `thrift:"id,1" db:"id" json:"id,omitempty"`
	Offline *bool `thrift:"offline,2" db:"offline" json:"offline,omitempty"`
	SubStatus *int8 `thrift:"subStatus,3" db:"subStatus" json:"subStatus,omitempty"`
	FromNode *string `thrift:"fromNode,4" db:"fromNode" json:"fromNode,omitempty"`
	ToNode *string `thrift:"toNode,5" db:"toNode" json:"toNode,omitempty"`
	ToList []string `thrift:"toList,6" db:"toList" json:"toList,omitempty"`
	Show *int16 `thrift:"show,7" db:"show" json:"show,omitempty"`
	Status *string `thrift:"status,8" db:"status" json:"status,omitempty"`
	Extend map[string]string `thrift:"extend,9" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,10" db:"extra" json:"extra,omitempty"`
}

func NewAdmPresence() *AdmPresence {
	return &AdmPresence{}
}

var AdmPresence_ID_DEFAULT int64

func (p *AdmPresence) GetID() int64 {
	if !p.IsSetID() {
		return AdmPresence_ID_DEFAULT
	}
	return *p.ID
}

var AdmPresence_Offline_DEFAULT bool

func (p *AdmPresence) GetOffline() bool {
	if !p.IsSetOffline() {
		return AdmPresence_Offline_DEFAULT
	}
	return *p.Offline
}

var AdmPresence_SubStatus_DEFAULT int8

func (p *AdmPresence) GetSubStatus() int8 {
	if !p.IsSetSubStatus() {
		return AdmPresence_SubStatus_DEFAULT
	}
	return *p.SubStatus
}

var AdmPresence_FromNode_DEFAULT string

func (p *AdmPresence) GetFromNode() string {
	if !p.IsSetFromNode() {
		return AdmPresence_FromNode_DEFAULT
	}
	return *p.FromNode
}

var AdmPresence_ToNode_DEFAULT string

func (p *AdmPresence) GetToNode() string {
	if !p.IsSetToNode() {
		return AdmPresence_ToNode_DEFAULT
	}
	return *p.ToNode
}

var AdmPresence_ToList_DEFAULT []string


func (p *AdmPresence) GetToList() []string {
	return p.ToList
}

var AdmPresence_Show_DEFAULT int16

func (p *AdmPresence) GetShow() int16 {
	if !p.IsSetShow() {
		return AdmPresence_Show_DEFAULT
	}
	return *p.Show
}

var AdmPresence_Status_DEFAULT string

func (p *AdmPresence) GetStatus() string {
	if !p.IsSetStatus() {
		return AdmPresence_Status_DEFAULT
	}
	return *p.Status
}

var AdmPresence_Extend_DEFAULT map[string]string


func (p *AdmPresence) GetExtend() map[string]string {
	return p.Extend
}

var AdmPresence_Extra_DEFAULT map[string][]byte


func (p *AdmPresence) GetExtra() map[string][]byte {
	return p.Extra
}

func (p *AdmPresence) IsSetID() bool {
	return p.ID != nil
}

func (p *AdmPresence) IsSetOffline() bool {
	return p.Offline != nil
}

func (p *AdmPresence) IsSetSubStatus() bool {
	return p.SubStatus != nil
}

func (p *AdmPresence) IsSetFromNode() bool {
	return p.FromNode != nil
}

func (p *AdmPresence) IsSetToNode() bool {
	return p.ToNode != nil
}

func (p *AdmPresence) IsSetToList() bool {
	return p.ToList != nil
}

func (p *AdmPresence) IsSetShow() bool {
	return p.Show != nil
}

func (p *AdmPresence) IsSetStatus() bool {
	return p.Status != nil
}

func (p *AdmPresence) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *AdmPresence) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *AdmPresence) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmPresence) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *AdmPresence) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Offline = &v
	}
	return nil
}

func (p *AdmPresence) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.SubStatus = &temp
	}
	return nil
}

func (p *AdmPresence) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FromNode = &v
	}
	return nil
}

func (p *AdmPresence) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ToNode = &v
	}
	return nil
}

func (p *AdmPresence) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ToList = tSlice
	for i := 0; i < size; i++ {
		var _elem13 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.ToList = append(p.ToList, _elem13)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmPresence) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Show = &v
	}
	return nil
}

func (p *AdmPresence) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *AdmPresence) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		var _val15 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.Extend[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmPresence) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key16 = v
		}
		var _val17 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val17 = v
		}
		p.Extra[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmPresence) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmPresence"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmPresence) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOffline() {
		if err := oprot.WriteFieldBegin(ctx, "offline", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offline: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Offline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offline (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offline: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSubStatus() {
		if err := oprot.WriteFieldBegin(ctx, "subStatus", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subStatus: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.SubStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subStatus (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subStatus: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFromNode() {
		if err := oprot.WriteFieldBegin(ctx, "fromNode", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromNode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.FromNode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fromNode (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromNode: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToNode() {
		if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toNode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.ToNode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.toNode (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toNode: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToList() {
		if err := oprot.WriteFieldBegin(ctx, "toList", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:toList: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ToList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ToList {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:toList: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetShow() {
		if err := oprot.WriteFieldBegin(ctx, "show", thrift.I16, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:show: ", p), err)
		}
		if err := oprot.WriteI16(ctx, int16(*p.Show)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.show (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:show: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extend: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extra: ", p), err)
		}
	}
	return err
}

func (p *AdmPresence) Equals(other *AdmPresence) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		if p.ID == nil || other.ID == nil {
			return false
		}
		if (*p.ID) != (*other.ID) { return false }
	}
	if p.Offline != other.Offline {
		if p.Offline == nil || other.Offline == nil {
			return false
		}
		if (*p.Offline) != (*other.Offline) { return false }
	}
	if p.SubStatus != other.SubStatus {
		if p.SubStatus == nil || other.SubStatus == nil {
			return false
		}
		if (*p.SubStatus) != (*other.SubStatus) { return false }
	}
	if p.FromNode != other.FromNode {
		if p.FromNode == nil || other.FromNode == nil {
			return false
		}
		if (*p.FromNode) != (*other.FromNode) { return false }
	}
	if p.ToNode != other.ToNode {
		if p.ToNode == nil || other.ToNode == nil {
			return false
		}
		if (*p.ToNode) != (*other.ToNode) { return false }
	}
	if len(p.ToList) != len(other.ToList) { return false }
	for i, _tgt := range p.ToList {
		_src18 := other.ToList[i]
		if _tgt != _src18 { return false }
	}
	if p.Show != other.Show {
		if p.Show == nil || other.Show == nil {
			return false
		}
		if (*p.Show) != (*other.Show) { return false }
	}
	if p.Status != other.Status {
		if p.Status == nil || other.Status == nil {
			return false
		}
		if (*p.Status) != (*other.Status) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src19 := other.Extend[k]
		if _tgt != _src19 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src20 := other.Extra[k]
		if bytes.Compare(_tgt, _src20) != 0 { return false }
	}
	return true
}

func (p *AdmPresence) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmPresence(%+v)", *p)
}

func (p *AdmPresence) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmPresence",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmPresence)(nil)

func (p *AdmPresence) Validate() error {
	return nil
}

// Attributes:
//  - Nodes
//  - Presence
// 
type AdmPresenceBroadcast struct {
	Nodes []string `thrift:"nodes,1" db:"nodes" json:"nodes,omitempty"`
	Presence *AdmPresence `thrift:"presence,2" db:"presence" json:"presence,omitempty"`
}

func NewAdmPresenceBroadcast() *AdmPresenceBroadcast {
	return &AdmPresenceBroadcast{}
}

var AdmPresenceBroadcast_Nodes_DEFAULT []string


func (p *AdmPresenceBroadcast) GetNodes() []string {
	return p.Nodes
}

var AdmPresenceBroadcast_Presence_DEFAULT *AdmPresence

func (p *AdmPresenceBroadcast) GetPresence() *AdmPresence {
	if !p.IsSetPresence() {
		return AdmPresenceBroadcast_Presence_DEFAULT
	}
	return p.Presence
}

func (p *AdmPresenceBroadcast) IsSetNodes() bool {
	return p.Nodes != nil
}

func (p *AdmPresenceBroadcast) IsSetPresence() bool {
	return p.Presence != nil
}

func (p *AdmPresenceBroadcast) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmPresenceBroadcast) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		var _elem21 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem21 = v
		}
		p.Nodes = append(p.Nodes, _elem21)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmPresenceBroadcast) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Presence = &AdmPresence{}
	if err := p.Presence.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Presence), err)
	}
	return nil
}

func (p *AdmPresenceBroadcast) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmPresenceBroadcast"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmPresenceBroadcast) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodes() {
		if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodes: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Nodes {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodes: ", p), err)
		}
	}
	return err
}

func (p *AdmPresenceBroadcast) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPresence() {
		if err := oprot.WriteFieldBegin(ctx, "presence", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:presence: ", p), err)
		}
		if err := p.Presence.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Presence), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:presence: ", p), err)
		}
	}
	return err
}

func (p *AdmPresenceBroadcast) Equals(other *AdmPresenceBroadcast) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Nodes) != len(other.Nodes) { return false }
	for i, _tgt := range p.Nodes {
		_src22 := other.Nodes[i]
		if _tgt != _src22 { return false }
	}
	if !p.Presence.Equals(other.Presence) { return false }
	return true
}

func (p *AdmPresenceBroadcast) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmPresenceBroadcast(%+v)", *p)
}

func (p *AdmPresenceBroadcast) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmPresenceBroadcast",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmPresenceBroadcast)(nil)

func (p *AdmPresenceBroadcast) Validate() error {
	return nil
}

// Attributes:
//  - Name
//  - NickName
//  - Brithday
//  - Gender
//  - Cover
//  - Area
//  - Createtime
//  - PhotoTidAlbum
//  - Extend
//  - Extra
// 
type AdmUserBean struct {
	Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
	NickName *string `thrift:"nickName,2" db:"nickName" json:"nickName,omitempty"`
	// unused field # 3
	Brithday *string `thrift:"brithday,4" db:"brithday" json:"brithday,omitempty"`
	Gender *int8 `thrift:"gender,5" db:"gender" json:"gender,omitempty"`
	Cover *string `thrift:"cover,6" db:"cover" json:"cover,omitempty"`
	Area *string `thrift:"area,7" db:"area" json:"area,omitempty"`
	Createtime *int64 `thrift:"createtime,8" db:"createtime" json:"createtime,omitempty"`
	PhotoTidAlbum []string `thrift:"photoTidAlbum,9" db:"photoTidAlbum" json:"photoTidAlbum,omitempty"`
	Extend map[string]string `thrift:"extend,10" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,11" db:"extra" json:"extra,omitempty"`
}

func NewAdmUserBean() *AdmUserBean {
	return &AdmUserBean{}
}

var AdmUserBean_Name_DEFAULT string

func (p *AdmUserBean) GetName() string {
	if !p.IsSetName() {
		return AdmUserBean_Name_DEFAULT
	}
	return *p.Name
}

var AdmUserBean_NickName_DEFAULT string

func (p *AdmUserBean) GetNickName() string {
	if !p.IsSetNickName() {
		return AdmUserBean_NickName_DEFAULT
	}
	return *p.NickName
}

var AdmUserBean_Brithday_DEFAULT string

func (p *AdmUserBean) GetBrithday() string {
	if !p.IsSetBrithday() {
		return AdmUserBean_Brithday_DEFAULT
	}
	return *p.Brithday
}

var AdmUserBean_Gender_DEFAULT int8

func (p *AdmUserBean) GetGender() int8 {
	if !p.IsSetGender() {
		return AdmUserBean_Gender_DEFAULT
	}
	return *p.Gender
}

var AdmUserBean_Cover_DEFAULT string

func (p *AdmUserBean) GetCover() string {
	if !p.IsSetCover() {
		return AdmUserBean_Cover_DEFAULT
	}
	return *p.Cover
}

var AdmUserBean_Area_DEFAULT string

func (p *AdmUserBean) GetArea() string {
	if !p.IsSetArea() {
		return AdmUserBean_Area_DEFAULT
	}
	return *p.Area
}

var AdmUserBean_Createtime_DEFAULT int64

func (p *AdmUserBean) GetCreatetime() int64 {
	if !p.IsSetCreatetime() {
		return AdmUserBean_Createtime_DEFAULT
	}
	return *p.Createtime
}

var AdmUserBean_PhotoTidAlbum_DEFAULT []string


func (p *AdmUserBean) GetPhotoTidAlbum() []string {
	return p.PhotoTidAlbum
}

var AdmUserBean_Extend_DEFAULT map[string]string


func (p *AdmUserBean) GetExtend() map[string]string {
	return p.Extend
}

var AdmUserBean_Extra_DEFAULT map[string][]byte


func (p *AdmUserBean) GetExtra() map[string][]byte {
	return p.Extra
}

func (p *AdmUserBean) IsSetName() bool {
	return p.Name != nil
}

func (p *AdmUserBean) IsSetNickName() bool {
	return p.NickName != nil
}

func (p *AdmUserBean) IsSetBrithday() bool {
	return p.Brithday != nil
}

func (p *AdmUserBean) IsSetGender() bool {
	return p.Gender != nil
}

func (p *AdmUserBean) IsSetCover() bool {
	return p.Cover != nil
}

func (p *AdmUserBean) IsSetArea() bool {
	return p.Area != nil
}

func (p *AdmUserBean) IsSetCreatetime() bool {
	return p.Createtime != nil
}

func (p *AdmUserBean) IsSetPhotoTidAlbum() bool {
	return p.PhotoTidAlbum != nil
}

func (p *AdmUserBean) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *AdmUserBean) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *AdmUserBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmUserBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *AdmUserBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NickName = &v
	}
	return nil
}

func (p *AdmUserBean) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Brithday = &v
	}
	return nil
}

func (p *AdmUserBean) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Gender = &temp
	}
	return nil
}

func (p *AdmUserBean) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Cover = &v
	}
	return nil
}

func (p *AdmUserBean) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Area = &v
	}
	return nil
}

func (p *AdmUserBean) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Createtime = &v
	}
	return nil
}

func (p *AdmUserBean) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PhotoTidAlbum = tSlice
	for i := 0; i < size; i++ {
		var _elem23 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem23 = v
		}
		p.PhotoTidAlbum = append(p.PhotoTidAlbum, _elem23)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmUserBean) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key24 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key24 = v
		}
		var _val25 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val25 = v
		}
		p.Extend[_key24] = _val25
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmUserBean) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key26 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key26 = v
		}
		var _val27 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val27 = v
		}
		p.Extra[_key26] = _val27
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmUserBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmUserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmUserBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNickName() {
		if err := oprot.WriteFieldBegin(ctx, "nickName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickName: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.NickName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nickName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickName: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBrithday() {
		if err := oprot.WriteFieldBegin(ctx, "brithday", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:brithday: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Brithday)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.brithday (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:brithday: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err := oprot.WriteFieldBegin(ctx, "gender", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gender: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Gender)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gender (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gender: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCover() {
		if err := oprot.WriteFieldBegin(ctx, "cover", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cover: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Cover)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cover (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cover: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin(ctx, "area", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:area: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Area)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.area (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:area: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatetime() {
		if err := oprot.WriteFieldBegin(ctx, "createtime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createtime: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Createtime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createtime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createtime: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPhotoTidAlbum() {
		if err := oprot.WriteFieldBegin(ctx, "photoTidAlbum", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:photoTidAlbum: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhotoTidAlbum)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PhotoTidAlbum {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:photoTidAlbum: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extend: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extra: ", p), err)
		}
	}
	return err
}

func (p *AdmUserBean) Equals(other *AdmUserBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		if p.Name == nil || other.Name == nil {
			return false
		}
		if (*p.Name) != (*other.Name) { return false }
	}
	if p.NickName != other.NickName {
		if p.NickName == nil || other.NickName == nil {
			return false
		}
		if (*p.NickName) != (*other.NickName) { return false }
	}
	if p.Brithday != other.Brithday {
		if p.Brithday == nil || other.Brithday == nil {
			return false
		}
		if (*p.Brithday) != (*other.Brithday) { return false }
	}
	if p.Gender != other.Gender {
		if p.Gender == nil || other.Gender == nil {
			return false
		}
		if (*p.Gender) != (*other.Gender) { return false }
	}
	if p.Cover != other.Cover {
		if p.Cover == nil || other.Cover == nil {
			return false
		}
		if (*p.Cover) != (*other.Cover) { return false }
	}
	if p.Area != other.Area {
		if p.Area == nil || other.Area == nil {
			return false
		}
		if (*p.Area) != (*other.Area) { return false }
	}
	if p.Createtime != other.Createtime {
		if p.Createtime == nil || other.Createtime == nil {
			return false
		}
		if (*p.Createtime) != (*other.Createtime) { return false }
	}
	if len(p.PhotoTidAlbum) != len(other.PhotoTidAlbum) { return false }
	for i, _tgt := range p.PhotoTidAlbum {
		_src28 := other.PhotoTidAlbum[i]
		if _tgt != _src28 { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src29 := other.Extend[k]
		if _tgt != _src29 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src30 := other.Extra[k]
		if bytes.Compare(_tgt, _src30) != 0 { return false }
	}
	return true
}

func (p *AdmUserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmUserBean(%+v)", *p)
}

func (p *AdmUserBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmUserBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmUserBean)(nil)

func (p *AdmUserBean) Validate() error {
	return nil
}

// Attributes:
//  - Node
//  - Userbean
// 
type AdmModifyUserInfo struct {
	Node *string `thrift:"node,1" db:"node" json:"node,omitempty"`
	Userbean *AdmUserBean `thrift:"userbean,2" db:"userbean" json:"userbean,omitempty"`
}

func NewAdmModifyUserInfo() *AdmModifyUserInfo {
	return &AdmModifyUserInfo{}
}

var AdmModifyUserInfo_Node_DEFAULT string

func (p *AdmModifyUserInfo) GetNode() string {
	if !p.IsSetNode() {
		return AdmModifyUserInfo_Node_DEFAULT
	}
	return *p.Node
}

var AdmModifyUserInfo_Userbean_DEFAULT *AdmUserBean

func (p *AdmModifyUserInfo) GetUserbean() *AdmUserBean {
	if !p.IsSetUserbean() {
		return AdmModifyUserInfo_Userbean_DEFAULT
	}
	return p.Userbean
}

func (p *AdmModifyUserInfo) IsSetNode() bool {
	return p.Node != nil
}

func (p *AdmModifyUserInfo) IsSetUserbean() bool {
	return p.Userbean != nil
}

func (p *AdmModifyUserInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmModifyUserInfo) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Node = &v
	}
	return nil
}

func (p *AdmModifyUserInfo) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Userbean = &AdmUserBean{}
	if err := p.Userbean.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Userbean), err)
	}
	return nil
}

func (p *AdmModifyUserInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmModifyUserInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmModifyUserInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNode() {
		if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err)
		}
	}
	return err
}

func (p *AdmModifyUserInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUserbean() {
		if err := oprot.WriteFieldBegin(ctx, "userbean", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userbean: ", p), err)
		}
		if err := p.Userbean.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Userbean), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userbean: ", p), err)
		}
	}
	return err
}

func (p *AdmModifyUserInfo) Equals(other *AdmModifyUserInfo) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Node != other.Node {
		if p.Node == nil || other.Node == nil {
			return false
		}
		if (*p.Node) != (*other.Node) { return false }
	}
	if !p.Userbean.Equals(other.Userbean) { return false }
	return true
}

func (p *AdmModifyUserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmModifyUserInfo(%+v)", *p)
}

func (p *AdmModifyUserInfo) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmModifyUserInfo",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmModifyUserInfo)(nil)

func (p *AdmModifyUserInfo) Validate() error {
	return nil
}

// Attributes:
//  - Nodelist
// 
type AdmNodeList struct {
	Nodelist []string `thrift:"nodelist,1" db:"nodelist" json:"nodelist,omitempty"`
}

func NewAdmNodeList() *AdmNodeList {
	return &AdmNodeList{}
}

var AdmNodeList_Nodelist_DEFAULT []string


func (p *AdmNodeList) GetNodelist() []string {
	return p.Nodelist
}

func (p *AdmNodeList) IsSetNodelist() bool {
	return p.Nodelist != nil
}

func (p *AdmNodeList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmNodeList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Nodelist = tSlice
	for i := 0; i < size; i++ {
		var _elem31 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem31 = v
		}
		p.Nodelist = append(p.Nodelist, _elem31)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmNodeList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmNodeList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmNodeList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodelist() {
		if err := oprot.WriteFieldBegin(ctx, "nodelist", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodelist: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodelist)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Nodelist {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodelist: ", p), err)
		}
	}
	return err
}

func (p *AdmNodeList) Equals(other *AdmNodeList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Nodelist) != len(other.Nodelist) { return false }
	for i, _tgt := range p.Nodelist {
		_src32 := other.Nodelist[i]
		if _tgt != _src32 { return false }
	}
	return true
}

func (p *AdmNodeList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmNodeList(%+v)", *p)
}

func (p *AdmNodeList) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmNodeList",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmNodeList)(nil)

func (p *AdmNodeList) Validate() error {
	return nil
}

// Attributes:
//  - Node
//  - Rtype
// 
type AdmVroomBean struct {
	Node *string `thrift:"node,1" db:"node" json:"node,omitempty"`
	Rtype *int8 `thrift:"rtype,2" db:"rtype" json:"rtype,omitempty"`
}

func NewAdmVroomBean() *AdmVroomBean {
	return &AdmVroomBean{}
}

var AdmVroomBean_Node_DEFAULT string

func (p *AdmVroomBean) GetNode() string {
	if !p.IsSetNode() {
		return AdmVroomBean_Node_DEFAULT
	}
	return *p.Node
}

var AdmVroomBean_Rtype_DEFAULT int8

func (p *AdmVroomBean) GetRtype() int8 {
	if !p.IsSetRtype() {
		return AdmVroomBean_Rtype_DEFAULT
	}
	return *p.Rtype
}

func (p *AdmVroomBean) IsSetNode() bool {
	return p.Node != nil
}

func (p *AdmVroomBean) IsSetRtype() bool {
	return p.Rtype != nil
}

func (p *AdmVroomBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmVroomBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Node = &v
	}
	return nil
}

func (p *AdmVroomBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Rtype = &temp
	}
	return nil
}

func (p *AdmVroomBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmVroomBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmVroomBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNode() {
		if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err)
		}
	}
	return err
}

func (p *AdmVroomBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRtype() {
		if err := oprot.WriteFieldBegin(ctx, "rtype", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rtype: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Rtype)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.rtype (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rtype: ", p), err)
		}
	}
	return err
}

func (p *AdmVroomBean) Equals(other *AdmVroomBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Node != other.Node {
		if p.Node == nil || other.Node == nil {
			return false
		}
		if (*p.Node) != (*other.Node) { return false }
	}
	if p.Rtype != other.Rtype {
		if p.Rtype == nil || other.Rtype == nil {
			return false
		}
		if (*p.Rtype) != (*other.Rtype) { return false }
	}
	return true
}

func (p *AdmVroomBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmVroomBean(%+v)", *p)
}

func (p *AdmVroomBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmVroomBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmVroomBean)(nil)

func (p *AdmVroomBean) Validate() error {
	return nil
}

// Attributes:
//  - Founder
//  - Managers
//  - Cover
//  - Topic
//  - Label
//  - Gtype
//  - Kind
//  - Createtime
//  - Extend
//  - Extra
// 
type AdmTimRoom struct {
	Founder *string `thrift:"founder,1" db:"founder" json:"founder,omitempty"`
	Managers []string `thrift:"managers,2" db:"managers" json:"managers,omitempty"`
	Cover *string `thrift:"cover,3" db:"cover" json:"cover,omitempty"`
	Topic *string `thrift:"topic,4" db:"topic" json:"topic,omitempty"`
	Label *string `thrift:"label,5" db:"label" json:"label,omitempty"`
	Gtype *int8 `thrift:"gtype,6" db:"gtype" json:"gtype,omitempty"`
	Kind *int64 `thrift:"kind,7" db:"kind" json:"kind,omitempty"`
	Createtime *int64 `thrift:"createtime,8" db:"createtime" json:"createtime,omitempty"`
	Extend map[string]string `thrift:"extend,9" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,10" db:"extra" json:"extra,omitempty"`
}

func NewAdmTimRoom() *AdmTimRoom {
	return &AdmTimRoom{}
}

var AdmTimRoom_Founder_DEFAULT string

func (p *AdmTimRoom) GetFounder() string {
	if !p.IsSetFounder() {
		return AdmTimRoom_Founder_DEFAULT
	}
	return *p.Founder
}

var AdmTimRoom_Managers_DEFAULT []string


func (p *AdmTimRoom) GetManagers() []string {
	return p.Managers
}

var AdmTimRoom_Cover_DEFAULT string

func (p *AdmTimRoom) GetCover() string {
	if !p.IsSetCover() {
		return AdmTimRoom_Cover_DEFAULT
	}
	return *p.Cover
}

var AdmTimRoom_Topic_DEFAULT string

func (p *AdmTimRoom) GetTopic() string {
	if !p.IsSetTopic() {
		return AdmTimRoom_Topic_DEFAULT
	}
	return *p.Topic
}

var AdmTimRoom_Label_DEFAULT string

func (p *AdmTimRoom) GetLabel() string {
	if !p.IsSetLabel() {
		return AdmTimRoom_Label_DEFAULT
	}
	return *p.Label
}

var AdmTimRoom_Gtype_DEFAULT int8

func (p *AdmTimRoom) GetGtype() int8 {
	if !p.IsSetGtype() {
		return AdmTimRoom_Gtype_DEFAULT
	}
	return *p.Gtype
}

var AdmTimRoom_Kind_DEFAULT int64

func (p *AdmTimRoom) GetKind() int64 {
	if !p.IsSetKind() {
		return AdmTimRoom_Kind_DEFAULT
	}
	return *p.Kind
}

var AdmTimRoom_Createtime_DEFAULT int64

func (p *AdmTimRoom) GetCreatetime() int64 {
	if !p.IsSetCreatetime() {
		return AdmTimRoom_Createtime_DEFAULT
	}
	return *p.Createtime
}

var AdmTimRoom_Extend_DEFAULT map[string]string


func (p *AdmTimRoom) GetExtend() map[string]string {
	return p.Extend
}

var AdmTimRoom_Extra_DEFAULT map[string][]byte


func (p *AdmTimRoom) GetExtra() map[string][]byte {
	return p.Extra
}

func (p *AdmTimRoom) IsSetFounder() bool {
	return p.Founder != nil
}

func (p *AdmTimRoom) IsSetManagers() bool {
	return p.Managers != nil
}

func (p *AdmTimRoom) IsSetCover() bool {
	return p.Cover != nil
}

func (p *AdmTimRoom) IsSetTopic() bool {
	return p.Topic != nil
}

func (p *AdmTimRoom) IsSetLabel() bool {
	return p.Label != nil
}

func (p *AdmTimRoom) IsSetGtype() bool {
	return p.Gtype != nil
}

func (p *AdmTimRoom) IsSetKind() bool {
	return p.Kind != nil
}

func (p *AdmTimRoom) IsSetCreatetime() bool {
	return p.Createtime != nil
}

func (p *AdmTimRoom) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *AdmTimRoom) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *AdmTimRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmTimRoom) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Founder = &v
	}
	return nil
}

func (p *AdmTimRoom) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Managers = tSlice
	for i := 0; i < size; i++ {
		var _elem33 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem33 = v
		}
		p.Managers = append(p.Managers, _elem33)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmTimRoom) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Cover = &v
	}
	return nil
}

func (p *AdmTimRoom) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Topic = &v
	}
	return nil
}

func (p *AdmTimRoom) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Label = &v
	}
	return nil
}

func (p *AdmTimRoom) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Gtype = &temp
	}
	return nil
}

func (p *AdmTimRoom) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Kind = &v
	}
	return nil
}

func (p *AdmTimRoom) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Createtime = &v
	}
	return nil
}

func (p *AdmTimRoom) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key34 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key34 = v
		}
		var _val35 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val35 = v
		}
		p.Extend[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmTimRoom) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key36 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key36 = v
		}
		var _val37 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val37 = v
		}
		p.Extra[_key36] = _val37
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmTimRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmTimRoom"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmTimRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFounder() {
		if err := oprot.WriteFieldBegin(ctx, "founder", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:founder: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Founder)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.founder (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:founder: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetManagers() {
		if err := oprot.WriteFieldBegin(ctx, "managers", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:managers: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Managers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Managers {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:managers: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCover() {
		if err := oprot.WriteFieldBegin(ctx, "cover", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cover: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Cover)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cover (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cover: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopic() {
		if err := oprot.WriteFieldBegin(ctx, "topic", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topic: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Topic)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topic (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topic: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err := oprot.WriteFieldBegin(ctx, "label", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:label: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Label)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.label (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:label: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetGtype() {
		if err := oprot.WriteFieldBegin(ctx, "gtype", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gtype: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Gtype)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gtype (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gtype: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKind() {
		if err := oprot.WriteFieldBegin(ctx, "kind", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:kind: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Kind)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.kind (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:kind: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatetime() {
		if err := oprot.WriteFieldBegin(ctx, "createtime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createtime: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Createtime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createtime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createtime: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extend: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extra: ", p), err)
		}
	}
	return err
}

func (p *AdmTimRoom) Equals(other *AdmTimRoom) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Founder != other.Founder {
		if p.Founder == nil || other.Founder == nil {
			return false
		}
		if (*p.Founder) != (*other.Founder) { return false }
	}
	if len(p.Managers) != len(other.Managers) { return false }
	for i, _tgt := range p.Managers {
		_src38 := other.Managers[i]
		if _tgt != _src38 { return false }
	}
	if p.Cover != other.Cover {
		if p.Cover == nil || other.Cover == nil {
			return false
		}
		if (*p.Cover) != (*other.Cover) { return false }
	}
	if p.Topic != other.Topic {
		if p.Topic == nil || other.Topic == nil {
			return false
		}
		if (*p.Topic) != (*other.Topic) { return false }
	}
	if p.Label != other.Label {
		if p.Label == nil || other.Label == nil {
			return false
		}
		if (*p.Label) != (*other.Label) { return false }
	}
	if p.Gtype != other.Gtype {
		if p.Gtype == nil || other.Gtype == nil {
			return false
		}
		if (*p.Gtype) != (*other.Gtype) { return false }
	}
	if p.Kind != other.Kind {
		if p.Kind == nil || other.Kind == nil {
			return false
		}
		if (*p.Kind) != (*other.Kind) { return false }
	}
	if p.Createtime != other.Createtime {
		if p.Createtime == nil || other.Createtime == nil {
			return false
		}
		if (*p.Createtime) != (*other.Createtime) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src39 := other.Extend[k]
		if _tgt != _src39 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src40 := other.Extra[k]
		if bytes.Compare(_tgt, _src40) != 0 { return false }
	}
	return true
}

func (p *AdmTimRoom) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmTimRoom(%+v)", *p)
}

func (p *AdmTimRoom) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmTimRoom",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmTimRoom)(nil)

func (p *AdmTimRoom) Validate() error {
	return nil
}

// Attributes:
//  - Unode
//  - Gnode
//  - Atr
// 
type AdmRoomBean struct {
	Unode *string `thrift:"unode,1" db:"unode" json:"unode,omitempty"`
	Gnode *string `thrift:"gnode,2" db:"gnode" json:"gnode,omitempty"`
	Atr *AdmTimRoom `thrift:"atr,3" db:"atr" json:"atr,omitempty"`
}

func NewAdmRoomBean() *AdmRoomBean {
	return &AdmRoomBean{}
}

var AdmRoomBean_Unode_DEFAULT string

func (p *AdmRoomBean) GetUnode() string {
	if !p.IsSetUnode() {
		return AdmRoomBean_Unode_DEFAULT
	}
	return *p.Unode
}

var AdmRoomBean_Gnode_DEFAULT string

func (p *AdmRoomBean) GetGnode() string {
	if !p.IsSetGnode() {
		return AdmRoomBean_Gnode_DEFAULT
	}
	return *p.Gnode
}

var AdmRoomBean_Atr_DEFAULT *AdmTimRoom

func (p *AdmRoomBean) GetAtr() *AdmTimRoom {
	if !p.IsSetAtr() {
		return AdmRoomBean_Atr_DEFAULT
	}
	return p.Atr
}

func (p *AdmRoomBean) IsSetUnode() bool {
	return p.Unode != nil
}

func (p *AdmRoomBean) IsSetGnode() bool {
	return p.Gnode != nil
}

func (p *AdmRoomBean) IsSetAtr() bool {
	return p.Atr != nil
}

func (p *AdmRoomBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmRoomBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Unode = &v
	}
	return nil
}

func (p *AdmRoomBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Gnode = &v
	}
	return nil
}

func (p *AdmRoomBean) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Atr = &AdmTimRoom{}
	if err := p.Atr.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Atr), err)
	}
	return nil
}

func (p *AdmRoomBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmRoomBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmRoomBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUnode() {
		if err := oprot.WriteFieldBegin(ctx, "unode", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Unode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unode (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unode: ", p), err)
		}
	}
	return err
}

func (p *AdmRoomBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetGnode() {
		if err := oprot.WriteFieldBegin(ctx, "gnode", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gnode: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Gnode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gnode (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gnode: ", p), err)
		}
	}
	return err
}

func (p *AdmRoomBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetAtr() {
		if err := oprot.WriteFieldBegin(ctx, "atr", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:atr: ", p), err)
		}
		if err := p.Atr.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Atr), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:atr: ", p), err)
		}
	}
	return err
}

func (p *AdmRoomBean) Equals(other *AdmRoomBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Unode != other.Unode {
		if p.Unode == nil || other.Unode == nil {
			return false
		}
		if (*p.Unode) != (*other.Unode) { return false }
	}
	if p.Gnode != other.Gnode {
		if p.Gnode == nil || other.Gnode == nil {
			return false
		}
		if (*p.Gnode) != (*other.Gnode) { return false }
	}
	if !p.Atr.Equals(other.Atr) { return false }
	return true
}

func (p *AdmRoomBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmRoomBean(%+v)", *p)
}

func (p *AdmRoomBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmRoomBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmRoomBean)(nil)

func (p *AdmRoomBean) Validate() error {
	return nil
}

// Attributes:
//  - Nodes
// 
type AdmDetectBean struct {
	Nodes []string `thrift:"nodes,1" db:"nodes" json:"nodes,omitempty"`
}

func NewAdmDetectBean() *AdmDetectBean {
	return &AdmDetectBean{}
}

var AdmDetectBean_Nodes_DEFAULT []string


func (p *AdmDetectBean) GetNodes() []string {
	return p.Nodes
}

func (p *AdmDetectBean) IsSetNodes() bool {
	return p.Nodes != nil
}

func (p *AdmDetectBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmDetectBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		var _elem41 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem41 = v
		}
		p.Nodes = append(p.Nodes, _elem41)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmDetectBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmDetectBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmDetectBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodes() {
		if err := oprot.WriteFieldBegin(ctx, "nodes", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodes: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodes)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Nodes {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodes: ", p), err)
		}
	}
	return err
}

func (p *AdmDetectBean) Equals(other *AdmDetectBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Nodes) != len(other.Nodes) { return false }
	for i, _tgt := range p.Nodes {
		_src42 := other.Nodes[i]
		if _tgt != _src42 { return false }
	}
	return true
}

func (p *AdmDetectBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmDetectBean(%+v)", *p)
}

func (p *AdmDetectBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmDetectBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmDetectBean)(nil)

func (p *AdmDetectBean) Validate() error {
	return nil
}

// Attributes:
//  - Ok
//  - TimType
//  - Errcode
//  - T
//  - N
//  - T2
//  - N2
// 
type AdmAck struct {
	Ok *bool `thrift:"ok,1" db:"ok" json:"ok,omitempty"`
	TimType *int8 `thrift:"timType,2" db:"timType" json:"timType,omitempty"`
	Errcode *int32 `thrift:"errcode,3" db:"errcode" json:"errcode,omitempty"`
	T *int64 `thrift:"t,4" db:"t" json:"t,omitempty"`
	N *string `thrift:"n,5" db:"n" json:"n,omitempty"`
	T2 *int64 `thrift:"t2,6" db:"t2" json:"t2,omitempty"`
	N2 *string `thrift:"n2,7" db:"n2" json:"n2,omitempty"`
}

func NewAdmAck() *AdmAck {
	return &AdmAck{}
}

var AdmAck_Ok_DEFAULT bool

func (p *AdmAck) GetOk() bool {
	if !p.IsSetOk() {
		return AdmAck_Ok_DEFAULT
	}
	return *p.Ok
}

var AdmAck_TimType_DEFAULT int8

func (p *AdmAck) GetTimType() int8 {
	if !p.IsSetTimType() {
		return AdmAck_TimType_DEFAULT
	}
	return *p.TimType
}

var AdmAck_Errcode_DEFAULT int32

func (p *AdmAck) GetErrcode() int32 {
	if !p.IsSetErrcode() {
		return AdmAck_Errcode_DEFAULT
	}
	return *p.Errcode
}

var AdmAck_T_DEFAULT int64

func (p *AdmAck) GetT() int64 {
	if !p.IsSetT() {
		return AdmAck_T_DEFAULT
	}
	return *p.T
}

var AdmAck_N_DEFAULT string

func (p *AdmAck) GetN() string {
	if !p.IsSetN() {
		return AdmAck_N_DEFAULT
	}
	return *p.N
}

var AdmAck_T2_DEFAULT int64

func (p *AdmAck) GetT2() int64 {
	if !p.IsSetT2() {
		return AdmAck_T2_DEFAULT
	}
	return *p.T2
}

var AdmAck_N2_DEFAULT string

func (p *AdmAck) GetN2() string {
	if !p.IsSetN2() {
		return AdmAck_N2_DEFAULT
	}
	return *p.N2
}

func (p *AdmAck) IsSetOk() bool {
	return p.Ok != nil
}

func (p *AdmAck) IsSetTimType() bool {
	return p.TimType != nil
}

func (p *AdmAck) IsSetErrcode() bool {
	return p.Errcode != nil
}

func (p *AdmAck) IsSetT() bool {
	return p.T != nil
}

func (p *AdmAck) IsSetN() bool {
	return p.N != nil
}

func (p *AdmAck) IsSetT2() bool {
	return p.T2 != nil
}

func (p *AdmAck) IsSetN2() bool {
	return p.N2 != nil
}

func (p *AdmAck) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmAck) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ok = &v
	}
	return nil
}

func (p *AdmAck) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.TimType = &temp
	}
	return nil
}

func (p *AdmAck) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Errcode = &v
	}
	return nil
}

func (p *AdmAck) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.T = &v
	}
	return nil
}

func (p *AdmAck) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.N = &v
	}
	return nil
}

func (p *AdmAck) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.T2 = &v
	}
	return nil
}

func (p *AdmAck) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.N2 = &v
	}
	return nil
}

func (p *AdmAck) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmAck"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmAck) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOk() {
		if err := oprot.WriteFieldBegin(ctx, "ok", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ok: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Ok)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ok (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ok: ", p), err)
		}
	}
	return err
}

func (p *AdmAck) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTimType() {
		if err := oprot.WriteFieldBegin(ctx, "timType", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timType: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.TimType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timType: ", p), err)
		}
	}
	return err
}

func (p *AdmAck) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetErrcode() {
		if err := oprot.WriteFieldBegin(ctx, "errcode", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errcode: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Errcode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errcode (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errcode: ", p), err)
		}
	}
	return err
}

func (p *AdmAck) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetT() {
		if err := oprot.WriteFieldBegin(ctx, "t", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:t: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.T)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.t (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:t: ", p), err)
		}
	}
	return err
}

func (p *AdmAck) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetN() {
		if err := oprot.WriteFieldBegin(ctx, "n", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:n: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.N)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.n (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:n: ", p), err)
		}
	}
	return err
}

func (p *AdmAck) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetT2() {
		if err := oprot.WriteFieldBegin(ctx, "t2", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:t2: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.T2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.t2 (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:t2: ", p), err)
		}
	}
	return err
}

func (p *AdmAck) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetN2() {
		if err := oprot.WriteFieldBegin(ctx, "n2", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:n2: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.N2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.n2 (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:n2: ", p), err)
		}
	}
	return err
}

func (p *AdmAck) Equals(other *AdmAck) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Ok != other.Ok {
		if p.Ok == nil || other.Ok == nil {
			return false
		}
		if (*p.Ok) != (*other.Ok) { return false }
	}
	if p.TimType != other.TimType {
		if p.TimType == nil || other.TimType == nil {
			return false
		}
		if (*p.TimType) != (*other.TimType) { return false }
	}
	if p.Errcode != other.Errcode {
		if p.Errcode == nil || other.Errcode == nil {
			return false
		}
		if (*p.Errcode) != (*other.Errcode) { return false }
	}
	if p.T != other.T {
		if p.T == nil || other.T == nil {
			return false
		}
		if (*p.T) != (*other.T) { return false }
	}
	if p.N != other.N {
		if p.N == nil || other.N == nil {
			return false
		}
		if (*p.N) != (*other.N) { return false }
	}
	if p.T2 != other.T2 {
		if p.T2 == nil || other.T2 == nil {
			return false
		}
		if (*p.T2) != (*other.T2) { return false }
	}
	if p.N2 != other.N2 {
		if p.N2 == nil || other.N2 == nil {
			return false
		}
		if (*p.N2) != (*other.N2) { return false }
	}
	return true
}

func (p *AdmAck) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmAck(%+v)", *p)
}

func (p *AdmAck) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmAck",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmAck)(nil)

func (p *AdmAck) Validate() error {
	return nil
}

// Attributes:
//  - Connectid
//  - Message
// 
type AdmProxyMessage struct {
	Connectid *int64 `thrift:"connectid,1" db:"connectid" json:"connectid,omitempty"`
	Message *AdmMessage `thrift:"message,2" db:"message" json:"message,omitempty"`
}

func NewAdmProxyMessage() *AdmProxyMessage {
	return &AdmProxyMessage{}
}

var AdmProxyMessage_Connectid_DEFAULT int64

func (p *AdmProxyMessage) GetConnectid() int64 {
	if !p.IsSetConnectid() {
		return AdmProxyMessage_Connectid_DEFAULT
	}
	return *p.Connectid
}

var AdmProxyMessage_Message_DEFAULT *AdmMessage

func (p *AdmProxyMessage) GetMessage() *AdmMessage {
	if !p.IsSetMessage() {
		return AdmProxyMessage_Message_DEFAULT
	}
	return p.Message
}

func (p *AdmProxyMessage) IsSetConnectid() bool {
	return p.Connectid != nil
}

func (p *AdmProxyMessage) IsSetMessage() bool {
	return p.Message != nil
}

func (p *AdmProxyMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmProxyMessage) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Connectid = &v
	}
	return nil
}

func (p *AdmProxyMessage) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Message = &AdmMessage{}
	if err := p.Message.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
	}
	return nil
}

func (p *AdmProxyMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmProxyMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmProxyMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetConnectid() {
		if err := oprot.WriteFieldBegin(ctx, "connectid", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:connectid: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Connectid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.connectid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:connectid: ", p), err)
		}
	}
	return err
}

func (p *AdmProxyMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
		}
		if err := p.Message.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
		}
	}
	return err
}

func (p *AdmProxyMessage) Equals(other *AdmProxyMessage) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Connectid != other.Connectid {
		if p.Connectid == nil || other.Connectid == nil {
			return false
		}
		if (*p.Connectid) != (*other.Connectid) { return false }
	}
	if !p.Message.Equals(other.Message) { return false }
	return true
}

func (p *AdmProxyMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmProxyMessage(%+v)", *p)
}

func (p *AdmProxyMessage) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmProxyMessage",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmProxyMessage)(nil)

func (p *AdmProxyMessage) Validate() error {
	return nil
}

// Attributes:
//  - Nodelist
//  - Blocktime
// 
type AdmSysBlockUser struct {
	Nodelist []string `thrift:"nodelist,1" db:"nodelist" json:"nodelist,omitempty"`
	Blocktime *int64 `thrift:"blocktime,2" db:"blocktime" json:"blocktime,omitempty"`
}

func NewAdmSysBlockUser() *AdmSysBlockUser {
	return &AdmSysBlockUser{}
}

var AdmSysBlockUser_Nodelist_DEFAULT []string


func (p *AdmSysBlockUser) GetNodelist() []string {
	return p.Nodelist
}

var AdmSysBlockUser_Blocktime_DEFAULT int64

func (p *AdmSysBlockUser) GetBlocktime() int64 {
	if !p.IsSetBlocktime() {
		return AdmSysBlockUser_Blocktime_DEFAULT
	}
	return *p.Blocktime
}

func (p *AdmSysBlockUser) IsSetNodelist() bool {
	return p.Nodelist != nil
}

func (p *AdmSysBlockUser) IsSetBlocktime() bool {
	return p.Blocktime != nil
}

func (p *AdmSysBlockUser) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmSysBlockUser) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Nodelist = tSlice
	for i := 0; i < size; i++ {
		var _elem43 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem43 = v
		}
		p.Nodelist = append(p.Nodelist, _elem43)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmSysBlockUser) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Blocktime = &v
	}
	return nil
}

func (p *AdmSysBlockUser) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmSysBlockUser"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmSysBlockUser) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodelist() {
		if err := oprot.WriteFieldBegin(ctx, "nodelist", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nodelist: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodelist)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Nodelist {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nodelist: ", p), err)
		}
	}
	return err
}

func (p *AdmSysBlockUser) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBlocktime() {
		if err := oprot.WriteFieldBegin(ctx, "blocktime", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blocktime: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Blocktime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blocktime (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blocktime: ", p), err)
		}
	}
	return err
}

func (p *AdmSysBlockUser) Equals(other *AdmSysBlockUser) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Nodelist) != len(other.Nodelist) { return false }
	for i, _tgt := range p.Nodelist {
		_src44 := other.Nodelist[i]
		if _tgt != _src44 { return false }
	}
	if p.Blocktime != other.Blocktime {
		if p.Blocktime == nil || other.Blocktime == nil {
			return false
		}
		if (*p.Blocktime) != (*other.Blocktime) { return false }
	}
	return true
}

func (p *AdmSysBlockUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmSysBlockUser(%+v)", *p)
}

func (p *AdmSysBlockUser) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmSysBlockUser",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmSysBlockUser)(nil)

func (p *AdmSysBlockUser) Validate() error {
	return nil
}

// Attributes:
//  - Index
//  - Limit
// 
type AdmOnlineUser struct {
	Index *int64 `thrift:"index,1" db:"index" json:"index,omitempty"`
	Limit *int64 `thrift:"limit,2" db:"limit" json:"limit,omitempty"`
}

func NewAdmOnlineUser() *AdmOnlineUser {
	return &AdmOnlineUser{}
}

var AdmOnlineUser_Index_DEFAULT int64

func (p *AdmOnlineUser) GetIndex() int64 {
	if !p.IsSetIndex() {
		return AdmOnlineUser_Index_DEFAULT
	}
	return *p.Index
}

var AdmOnlineUser_Limit_DEFAULT int64

func (p *AdmOnlineUser) GetLimit() int64 {
	if !p.IsSetLimit() {
		return AdmOnlineUser_Limit_DEFAULT
	}
	return *p.Limit
}

func (p *AdmOnlineUser) IsSetIndex() bool {
	return p.Index != nil
}

func (p *AdmOnlineUser) IsSetLimit() bool {
	return p.Limit != nil
}

func (p *AdmOnlineUser) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmOnlineUser) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Index = &v
	}
	return nil
}

func (p *AdmOnlineUser) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Limit = &v
	}
	return nil
}

func (p *AdmOnlineUser) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmOnlineUser"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmOnlineUser) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIndex() {
		if err := oprot.WriteFieldBegin(ctx, "index", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Index)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err)
		}
	}
	return err
}

func (p *AdmOnlineUser) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLimit() {
		if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:limit: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Limit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.limit (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:limit: ", p), err)
		}
	}
	return err
}

func (p *AdmOnlineUser) Equals(other *AdmOnlineUser) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Index != other.Index {
		if p.Index == nil || other.Index == nil {
			return false
		}
		if (*p.Index) != (*other.Index) { return false }
	}
	if p.Limit != other.Limit {
		if p.Limit == nil || other.Limit == nil {
			return false
		}
		if (*p.Limit) != (*other.Limit) { return false }
	}
	return true
}

func (p *AdmOnlineUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmOnlineUser(%+v)", *p)
}

func (p *AdmOnlineUser) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmOnlineUser",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmOnlineUser)(nil)

func (p *AdmOnlineUser) Validate() error {
	return nil
}

// Attributes:
//  - Usermap
// 
type AdmSysBlockList struct {
	Usermap map[string]int64 `thrift:"usermap,1" db:"usermap" json:"usermap,omitempty"`
}

func NewAdmSysBlockList() *AdmSysBlockList {
	return &AdmSysBlockList{}
}

var AdmSysBlockList_Usermap_DEFAULT map[string]int64


func (p *AdmSysBlockList) GetUsermap() map[string]int64 {
	return p.Usermap
}

func (p *AdmSysBlockList) IsSetUsermap() bool {
	return p.Usermap != nil
}

func (p *AdmSysBlockList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmSysBlockList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.Usermap = tMap
	for i := 0; i < size; i++ {
		var _key45 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key45 = v
		}
		var _val46 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val46 = v
		}
		p.Usermap[_key45] = _val46
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AdmSysBlockList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmSysBlockList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmSysBlockList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsermap() {
		if err := oprot.WriteFieldBegin(ctx, "usermap", thrift.MAP, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:usermap: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.Usermap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Usermap {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:usermap: ", p), err)
		}
	}
	return err
}

func (p *AdmSysBlockList) Equals(other *AdmSysBlockList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Usermap) != len(other.Usermap) { return false }
	for k, _tgt := range p.Usermap {
		_src47 := other.Usermap[k]
		if _tgt != _src47 { return false }
	}
	return true
}

func (p *AdmSysBlockList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmSysBlockList(%+v)", *p)
}

func (p *AdmSysBlockList) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmSysBlockList",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmSysBlockList)(nil)

func (p *AdmSysBlockList) Validate() error {
	return nil
}

// Attributes:
//  - Tidlist
//  - Size
// 
type AdmTidList struct {
	Tidlist []*AdmTid `thrift:"tidlist,1" db:"tidlist" json:"tidlist,omitempty"`
	Size *int64 `thrift:"size,2" db:"size" json:"size,omitempty"`
}

func NewAdmTidList() *AdmTidList {
	return &AdmTidList{}
}

var AdmTidList_Tidlist_DEFAULT []*AdmTid


func (p *AdmTidList) GetTidlist() []*AdmTid {
	return p.Tidlist
}

var AdmTidList_Size_DEFAULT int64

func (p *AdmTidList) GetSize() int64 {
	if !p.IsSetSize() {
		return AdmTidList_Size_DEFAULT
	}
	return *p.Size
}

func (p *AdmTidList) IsSetTidlist() bool {
	return p.Tidlist != nil
}

func (p *AdmTidList) IsSetSize() bool {
	return p.Size != nil
}

func (p *AdmTidList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmTidList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AdmTid, 0, size)
	p.Tidlist = tSlice
	for i := 0; i < size; i++ {
		_elem48 := &AdmTid{}
		if err := _elem48.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
		}
		p.Tidlist = append(p.Tidlist, _elem48)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmTidList) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *AdmTidList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmTidList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmTidList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTidlist() {
		if err := oprot.WriteFieldBegin(ctx, "tidlist", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tidlist: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Tidlist)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Tidlist {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tidlist: ", p), err)
		}
	}
	return err
}

func (p *AdmTidList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Size)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err)
		}
	}
	return err
}

func (p *AdmTidList) Equals(other *AdmTidList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Tidlist) != len(other.Tidlist) { return false }
	for i, _tgt := range p.Tidlist {
		_src49 := other.Tidlist[i]
		if !_tgt.Equals(_src49) { return false }
	}
	if p.Size != other.Size {
		if p.Size == nil || other.Size == nil {
			return false
		}
		if (*p.Size) != (*other.Size) { return false }
	}
	return true
}

func (p *AdmTidList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmTidList(%+v)", *p)
}

func (p *AdmTidList) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmTidList",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmTidList)(nil)

func (p *AdmTidList) Validate() error {
	return nil
}

// Attributes:
//  - SubType
//  - Bs
// 
type AdmSubBean struct {
	SubType *int8 `thrift:"subType,1" db:"subType" json:"subType,omitempty"`
	Bs []byte `thrift:"bs,2" db:"bs" json:"bs,omitempty"`
}

func NewAdmSubBean() *AdmSubBean {
	return &AdmSubBean{}
}

var AdmSubBean_SubType_DEFAULT int8

func (p *AdmSubBean) GetSubType() int8 {
	if !p.IsSetSubType() {
		return AdmSubBean_SubType_DEFAULT
	}
	return *p.SubType
}

var AdmSubBean_Bs_DEFAULT []byte


func (p *AdmSubBean) GetBs() []byte {
	return p.Bs
}

func (p *AdmSubBean) IsSetSubType() bool {
	return p.SubType != nil
}

func (p *AdmSubBean) IsSetBs() bool {
	return p.Bs != nil
}

func (p *AdmSubBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmSubBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.SubType = &temp
	}
	return nil
}

func (p *AdmSubBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Bs = v
	}
	return nil
}

func (p *AdmSubBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmSubBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmSubBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSubType() {
		if err := oprot.WriteFieldBegin(ctx, "subType", thrift.BYTE, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subType: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.SubType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subType (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subType: ", p), err)
		}
	}
	return err
}

func (p *AdmSubBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBs() {
		if err := oprot.WriteFieldBegin(ctx, "bs", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bs: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.Bs); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bs (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bs: ", p), err)
		}
	}
	return err
}

func (p *AdmSubBean) Equals(other *AdmSubBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SubType != other.SubType {
		if p.SubType == nil || other.SubType == nil {
			return false
		}
		if (*p.SubType) != (*other.SubType) { return false }
	}
	if bytes.Compare(p.Bs, other.Bs) != 0 { return false }
	return true
}

func (p *AdmSubBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmSubBean(%+v)", *p)
}

func (p *AdmSubBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmSubBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmSubBean)(nil)

func (p *AdmSubBean) Validate() error {
	return nil
}

// Attributes:
//  - Node
//  - Status
// 
type AdmSubOnlineBean struct {
	Node *string `thrift:"node,1" db:"node" json:"node,omitempty"`
	Status *int8 `thrift:"status,2" db:"status" json:"status,omitempty"`
}

func NewAdmSubOnlineBean() *AdmSubOnlineBean {
	return &AdmSubOnlineBean{}
}

var AdmSubOnlineBean_Node_DEFAULT string

func (p *AdmSubOnlineBean) GetNode() string {
	if !p.IsSetNode() {
		return AdmSubOnlineBean_Node_DEFAULT
	}
	return *p.Node
}

var AdmSubOnlineBean_Status_DEFAULT int8

func (p *AdmSubOnlineBean) GetStatus() int8 {
	if !p.IsSetStatus() {
		return AdmSubOnlineBean_Status_DEFAULT
	}
	return *p.Status
}

func (p *AdmSubOnlineBean) IsSetNode() bool {
	return p.Node != nil
}

func (p *AdmSubOnlineBean) IsSetStatus() bool {
	return p.Status != nil
}

func (p *AdmSubOnlineBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmSubOnlineBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Node = &v
	}
	return nil
}

func (p *AdmSubOnlineBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Status = &temp
	}
	return nil
}

func (p *AdmSubOnlineBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AdmSubOnlineBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmSubOnlineBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNode() {
		if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err)
		}
	}
	return err
}

func (p *AdmSubOnlineBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin(ctx, "status", thrift.BYTE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
		}
	}
	return err
}

func (p *AdmSubOnlineBean) Equals(other *AdmSubOnlineBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Node != other.Node {
		if p.Node == nil || other.Node == nil {
			return false
		}
		if (*p.Node) != (*other.Node) { return false }
	}
	if p.Status != other.Status {
		if p.Status == nil || other.Status == nil {
			return false
		}
		if (*p.Status) != (*other.Status) { return false }
	}
	return true
}

func (p *AdmSubOnlineBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmSubOnlineBean(%+v)", *p)
}

func (p *AdmSubOnlineBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmSubOnlineBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmSubOnlineBean)(nil)

func (p *AdmSubOnlineBean) Validate() error {
	return nil
}

type Admiface interface {
	// Parameters:
	//  - Ab
	// 
	Auth(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Oldpwd
	//  - Newpwd_
	// 
	ModifyPwd(ctx context.Context, fromnode string, domain string, oldpwd string, newpwd string) (_r *AdmAck, _err error)
	Ping(ctx context.Context) (_r *AdmAck, _err error)
	// Parameters:
	//  - Atoken
	// 
	Token(ctx context.Context, atoken *AdmToken) (_r *AdmAck, _err error)
	// Parameters:
	//  - Amb
	// 
	TimMessageBroadcast(ctx context.Context, amb *AdmMessageBroadcast) (_r *AdmAck, _err error)
	// Parameters:
	//  - Apb
	// 
	TimPresenceBroadcast(ctx context.Context, apb *AdmPresenceBroadcast) (_r *AdmAck, _err error)
	// Parameters:
	//  - Apm
	// 
	ProxyMessage(ctx context.Context, apm *AdmProxyMessage) (_r *AdmAck, _err error)
	// Parameters:
	//  - Ab
	// 
	Register(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error)
	// Parameters:
	//  - Amui
	// 
	ModifyUserInfo(ctx context.Context, amui *AdmModifyUserInfo) (_r *AdmAck, _err error)
	// Parameters:
	//  - Arb
	// 
	ModifyRoomInfo(ctx context.Context, arb *AdmRoomBean) (_r *AdmAck, _err error)
	// Parameters:
	//  - Abu
	// 
	SysBlockUser(ctx context.Context, abu *AdmSysBlockUser) (_r *AdmAck, _err error)
	// Parameters:
	//  - Au
	// 
	OnlineUser(ctx context.Context, au *AdmOnlineUser) (_r *AdmTidList, _err error)
	// Parameters:
	//  - Avb
	// 
	Vroom(ctx context.Context, avb *AdmVroomBean) (_r *AdmAck, _err error)
	// Parameters:
	//  - Adb
	// 
	Detect(ctx context.Context, adb *AdmDetectBean) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	// 
	Roster(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Tonode
	//  - Msg
	// 
	Addroster(ctx context.Context, fromnode string, domain string, tonode string, msg string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Tonode
	// 
	Rmroster(ctx context.Context, fromnode string, domain string, tonode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Tonode
	// 
	Blockroster(ctx context.Context, fromnode string, domain string, tonode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Tonode
	//  - Mid
	//  - Limit
	// 
	PullUserMessage(ctx context.Context, fromnode string, domain string, tonode string, mid int64, limit int64) (_r *AdmMessageList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Tonode
	//  - Mid
	//  - Limit
	// 
	PullRoomMessage(ctx context.Context, fromnode string, domain string, tonode string, mid int64, limit int64) (_r *AdmMessageList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Limit
	// 
	OfflineMsg(ctx context.Context, fromnode string, domain string, limit int64) (_r *AdmMessageList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Ids
	// 
	DelOfflineMsg(ctx context.Context, fromnode string, domain string, ids []int64) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	// 
	UserRoom(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	// 
	RoomUsers(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Topic
	//  - Gtype
	// 
	CreateRoom(ctx context.Context, fromnode string, domain string, topic string, gtype int8) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	//  - Msg
	// 
	AddRoom(ctx context.Context, fromnode string, domain string, roomNode string, msg string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	//  - ToNode
	// 
	PullInRoom(ctx context.Context, fromnode string, domain string, roomNode string, toNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	//  - ToNode
	//  - Msg
	// 
	RejectRoom(ctx context.Context, fromnode string, domain string, roomNode string, toNode string, msg string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	//  - ToNode
	// 
	KickRoom(ctx context.Context, fromnode string, domain string, roomNode string, toNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	// 
	LeaveRoom(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	// 
	CancelRoom(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	// 
	BlockRoom(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	//  - ToNode
	// 
	BlockRoomMember(ctx context.Context, fromnode string, domain string, roomNode string, toNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	// 
	BlockRosterList(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	// 
	BlockRoomList(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	// 
	BlockRoomMemberlist(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmNodeList, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	// 
	VirtualroomRegister(ctx context.Context, fromnode string, domain string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - VNode
	// 
	VirtualroomRemove(ctx context.Context, fromnode string, domain string, vNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - VNode
	//  - ToNode
	// 
	VirtualroomAddAuth(ctx context.Context, fromnode string, domain string, vNode string, toNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - VNode
	//  - ToNode
	// 
	VirtualroomDelAuth(ctx context.Context, fromnode string, domain string, vNode string, toNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Wsid
	//  - Fromnode
	//  - Domain
	//  - VNode
	//  - SubType
	// 
	VirtualroomSub(ctx context.Context, wsid int64, fromnode string, domain string, vNode string, subType int8) (_r *AdmAck, _err error)
	// Parameters:
	//  - Wsid
	//  - Fromnode
	//  - Domain
	//  - VNode
	// 
	VirtualroomUnSub(ctx context.Context, wsid int64, fromnode string, domain string, vNode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - Tonode
	// 
	Authroster(ctx context.Context, fromnode string, domain string, tonode string) (_r *AdmAck, _err error)
	// Parameters:
	//  - Fromnode
	//  - Domain
	//  - RoomNode
	// 
	Authgroupuser(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error)
}

type AdmifaceClient struct {
	c thrift.TClient
	meta thrift.ResponseMeta
}

func NewAdmifaceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AdmifaceClient {
	return &AdmifaceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewAdmifaceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AdmifaceClient {
	return &AdmifaceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewAdmifaceClient(c thrift.TClient) *AdmifaceClient {
	return &AdmifaceClient{
		c: c,
	}
}

func (p *AdmifaceClient) Client_() thrift.TClient {
	return p.c
}

func (p *AdmifaceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *AdmifaceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Ab
// 
func (p *AdmifaceClient) Auth(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error) {
	var _args50 AdmifaceAuthArgs
	_args50.Ab = ab
	var _result52 AdmifaceAuthResult
	var _meta51 thrift.ResponseMeta
	_meta51, _err = p.Client_().Call(ctx, "Auth", &_args50, &_result52)
	p.SetLastResponseMeta_(_meta51)
	if _err != nil {
		return
	}
	if _ret53 := _result52.GetSuccess(); _ret53 != nil {
		return _ret53, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Auth failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Oldpwd
//  - Newpwd_
// 
func (p *AdmifaceClient) ModifyPwd(ctx context.Context, fromnode string, domain string, oldpwd string, newpwd string) (_r *AdmAck, _err error) {
	var _args54 AdmifaceModifyPwdArgs
	_args54.Fromnode = fromnode
	_args54.Domain = domain
	_args54.Oldpwd = oldpwd
	_args54.Newpwd_ = newpwd
	var _result56 AdmifaceModifyPwdResult
	var _meta55 thrift.ResponseMeta
	_meta55, _err = p.Client_().Call(ctx, "ModifyPwd", &_args54, &_result56)
	p.SetLastResponseMeta_(_meta55)
	if _err != nil {
		return
	}
	if _ret57 := _result56.GetSuccess(); _ret57 != nil {
		return _ret57, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ModifyPwd failed: unknown result")
}

func (p *AdmifaceClient) Ping(ctx context.Context) (_r *AdmAck, _err error) {
	var _args58 AdmifacePingArgs
	var _result60 AdmifacePingResult
	var _meta59 thrift.ResponseMeta
	_meta59, _err = p.Client_().Call(ctx, "Ping", &_args58, &_result60)
	p.SetLastResponseMeta_(_meta59)
	if _err != nil {
		return
	}
	if _ret61 := _result60.GetSuccess(); _ret61 != nil {
		return _ret61, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Ping failed: unknown result")
}

// Parameters:
//  - Atoken
// 
func (p *AdmifaceClient) Token(ctx context.Context, atoken *AdmToken) (_r *AdmAck, _err error) {
	var _args62 AdmifaceTokenArgs
	_args62.Atoken = atoken
	var _result64 AdmifaceTokenResult
	var _meta63 thrift.ResponseMeta
	_meta63, _err = p.Client_().Call(ctx, "Token", &_args62, &_result64)
	p.SetLastResponseMeta_(_meta63)
	if _err != nil {
		return
	}
	if _ret65 := _result64.GetSuccess(); _ret65 != nil {
		return _ret65, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Token failed: unknown result")
}

// Parameters:
//  - Amb
// 
func (p *AdmifaceClient) TimMessageBroadcast(ctx context.Context, amb *AdmMessageBroadcast) (_r *AdmAck, _err error) {
	var _args66 AdmifaceTimMessageBroadcastArgs
	_args66.Amb = amb
	var _result68 AdmifaceTimMessageBroadcastResult
	var _meta67 thrift.ResponseMeta
	_meta67, _err = p.Client_().Call(ctx, "TimMessageBroadcast", &_args66, &_result68)
	p.SetLastResponseMeta_(_meta67)
	if _err != nil {
		return
	}
	if _ret69 := _result68.GetSuccess(); _ret69 != nil {
		return _ret69, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "TimMessageBroadcast failed: unknown result")
}

// Parameters:
//  - Apb
// 
func (p *AdmifaceClient) TimPresenceBroadcast(ctx context.Context, apb *AdmPresenceBroadcast) (_r *AdmAck, _err error) {
	var _args70 AdmifaceTimPresenceBroadcastArgs
	_args70.Apb = apb
	var _result72 AdmifaceTimPresenceBroadcastResult
	var _meta71 thrift.ResponseMeta
	_meta71, _err = p.Client_().Call(ctx, "TimPresenceBroadcast", &_args70, &_result72)
	p.SetLastResponseMeta_(_meta71)
	if _err != nil {
		return
	}
	if _ret73 := _result72.GetSuccess(); _ret73 != nil {
		return _ret73, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "TimPresenceBroadcast failed: unknown result")
}

// Parameters:
//  - Apm
// 
func (p *AdmifaceClient) ProxyMessage(ctx context.Context, apm *AdmProxyMessage) (_r *AdmAck, _err error) {
	var _args74 AdmifaceProxyMessageArgs
	_args74.Apm = apm
	var _result76 AdmifaceProxyMessageResult
	var _meta75 thrift.ResponseMeta
	_meta75, _err = p.Client_().Call(ctx, "ProxyMessage", &_args74, &_result76)
	p.SetLastResponseMeta_(_meta75)
	if _err != nil {
		return
	}
	if _ret77 := _result76.GetSuccess(); _ret77 != nil {
		return _ret77, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ProxyMessage failed: unknown result")
}

// Parameters:
//  - Ab
// 
func (p *AdmifaceClient) Register(ctx context.Context, ab *AuthBean) (_r *AdmAck, _err error) {
	var _args78 AdmifaceRegisterArgs
	_args78.Ab = ab
	var _result80 AdmifaceRegisterResult
	var _meta79 thrift.ResponseMeta
	_meta79, _err = p.Client_().Call(ctx, "Register", &_args78, &_result80)
	p.SetLastResponseMeta_(_meta79)
	if _err != nil {
		return
	}
	if _ret81 := _result80.GetSuccess(); _ret81 != nil {
		return _ret81, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Register failed: unknown result")
}

// Parameters:
//  - Amui
// 
func (p *AdmifaceClient) ModifyUserInfo(ctx context.Context, amui *AdmModifyUserInfo) (_r *AdmAck, _err error) {
	var _args82 AdmifaceModifyUserInfoArgs
	_args82.Amui = amui
	var _result84 AdmifaceModifyUserInfoResult
	var _meta83 thrift.ResponseMeta
	_meta83, _err = p.Client_().Call(ctx, "ModifyUserInfo", &_args82, &_result84)
	p.SetLastResponseMeta_(_meta83)
	if _err != nil {
		return
	}
	if _ret85 := _result84.GetSuccess(); _ret85 != nil {
		return _ret85, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ModifyUserInfo failed: unknown result")
}

// Parameters:
//  - Arb
// 
func (p *AdmifaceClient) ModifyRoomInfo(ctx context.Context, arb *AdmRoomBean) (_r *AdmAck, _err error) {
	var _args86 AdmifaceModifyRoomInfoArgs
	_args86.Arb = arb
	var _result88 AdmifaceModifyRoomInfoResult
	var _meta87 thrift.ResponseMeta
	_meta87, _err = p.Client_().Call(ctx, "ModifyRoomInfo", &_args86, &_result88)
	p.SetLastResponseMeta_(_meta87)
	if _err != nil {
		return
	}
	if _ret89 := _result88.GetSuccess(); _ret89 != nil {
		return _ret89, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "ModifyRoomInfo failed: unknown result")
}

// Parameters:
//  - Abu
// 
func (p *AdmifaceClient) SysBlockUser(ctx context.Context, abu *AdmSysBlockUser) (_r *AdmAck, _err error) {
	var _args90 AdmifaceSysBlockUserArgs
	_args90.Abu = abu
	var _result92 AdmifaceSysBlockUserResult
	var _meta91 thrift.ResponseMeta
	_meta91, _err = p.Client_().Call(ctx, "SysBlockUser", &_args90, &_result92)
	p.SetLastResponseMeta_(_meta91)
	if _err != nil {
		return
	}
	if _ret93 := _result92.GetSuccess(); _ret93 != nil {
		return _ret93, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "SysBlockUser failed: unknown result")
}

// Parameters:
//  - Au
// 
func (p *AdmifaceClient) OnlineUser(ctx context.Context, au *AdmOnlineUser) (_r *AdmTidList, _err error) {
	var _args94 AdmifaceOnlineUserArgs
	_args94.Au = au
	var _result96 AdmifaceOnlineUserResult
	var _meta95 thrift.ResponseMeta
	_meta95, _err = p.Client_().Call(ctx, "OnlineUser", &_args94, &_result96)
	p.SetLastResponseMeta_(_meta95)
	if _err != nil {
		return
	}
	if _ret97 := _result96.GetSuccess(); _ret97 != nil {
		return _ret97, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OnlineUser failed: unknown result")
}

// Parameters:
//  - Avb
// 
func (p *AdmifaceClient) Vroom(ctx context.Context, avb *AdmVroomBean) (_r *AdmAck, _err error) {
	var _args98 AdmifaceVroomArgs
	_args98.Avb = avb
	var _result100 AdmifaceVroomResult
	var _meta99 thrift.ResponseMeta
	_meta99, _err = p.Client_().Call(ctx, "Vroom", &_args98, &_result100)
	p.SetLastResponseMeta_(_meta99)
	if _err != nil {
		return
	}
	if _ret101 := _result100.GetSuccess(); _ret101 != nil {
		return _ret101, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Vroom failed: unknown result")
}

// Parameters:
//  - Adb
// 
func (p *AdmifaceClient) Detect(ctx context.Context, adb *AdmDetectBean) (_r *AdmAck, _err error) {
	var _args102 AdmifaceDetectArgs
	_args102.Adb = adb
	var _result104 AdmifaceDetectResult
	var _meta103 thrift.ResponseMeta
	_meta103, _err = p.Client_().Call(ctx, "Detect", &_args102, &_result104)
	p.SetLastResponseMeta_(_meta103)
	if _err != nil {
		return
	}
	if _ret105 := _result104.GetSuccess(); _ret105 != nil {
		return _ret105, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Detect failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
// 
func (p *AdmifaceClient) Roster(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error) {
	var _args106 AdmifaceRosterArgs
	_args106.Fromnode = fromnode
	_args106.Domain = domain
	var _result108 AdmifaceRosterResult
	var _meta107 thrift.ResponseMeta
	_meta107, _err = p.Client_().Call(ctx, "Roster", &_args106, &_result108)
	p.SetLastResponseMeta_(_meta107)
	if _err != nil {
		return
	}
	if _ret109 := _result108.GetSuccess(); _ret109 != nil {
		return _ret109, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Roster failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Tonode
//  - Msg
// 
func (p *AdmifaceClient) Addroster(ctx context.Context, fromnode string, domain string, tonode string, msg string) (_r *AdmAck, _err error) {
	var _args110 AdmifaceAddrosterArgs
	_args110.Fromnode = fromnode
	_args110.Domain = domain
	_args110.Tonode = tonode
	_args110.Msg = msg
	var _result112 AdmifaceAddrosterResult
	var _meta111 thrift.ResponseMeta
	_meta111, _err = p.Client_().Call(ctx, "Addroster", &_args110, &_result112)
	p.SetLastResponseMeta_(_meta111)
	if _err != nil {
		return
	}
	if _ret113 := _result112.GetSuccess(); _ret113 != nil {
		return _ret113, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Addroster failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Tonode
// 
func (p *AdmifaceClient) Rmroster(ctx context.Context, fromnode string, domain string, tonode string) (_r *AdmAck, _err error) {
	var _args114 AdmifaceRmrosterArgs
	_args114.Fromnode = fromnode
	_args114.Domain = domain
	_args114.Tonode = tonode
	var _result116 AdmifaceRmrosterResult
	var _meta115 thrift.ResponseMeta
	_meta115, _err = p.Client_().Call(ctx, "Rmroster", &_args114, &_result116)
	p.SetLastResponseMeta_(_meta115)
	if _err != nil {
		return
	}
	if _ret117 := _result116.GetSuccess(); _ret117 != nil {
		return _ret117, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Rmroster failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Tonode
// 
func (p *AdmifaceClient) Blockroster(ctx context.Context, fromnode string, domain string, tonode string) (_r *AdmAck, _err error) {
	var _args118 AdmifaceBlockrosterArgs
	_args118.Fromnode = fromnode
	_args118.Domain = domain
	_args118.Tonode = tonode
	var _result120 AdmifaceBlockrosterResult
	var _meta119 thrift.ResponseMeta
	_meta119, _err = p.Client_().Call(ctx, "Blockroster", &_args118, &_result120)
	p.SetLastResponseMeta_(_meta119)
	if _err != nil {
		return
	}
	if _ret121 := _result120.GetSuccess(); _ret121 != nil {
		return _ret121, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Blockroster failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Tonode
//  - Mid
//  - Limit
// 
func (p *AdmifaceClient) PullUserMessage(ctx context.Context, fromnode string, domain string, tonode string, mid int64, limit int64) (_r *AdmMessageList, _err error) {
	var _args122 AdmifacePullUserMessageArgs
	_args122.Fromnode = fromnode
	_args122.Domain = domain
	_args122.Tonode = tonode
	_args122.Mid = mid
	_args122.Limit = limit
	var _result124 AdmifacePullUserMessageResult
	var _meta123 thrift.ResponseMeta
	_meta123, _err = p.Client_().Call(ctx, "PullUserMessage", &_args122, &_result124)
	p.SetLastResponseMeta_(_meta123)
	if _err != nil {
		return
	}
	if _ret125 := _result124.GetSuccess(); _ret125 != nil {
		return _ret125, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "PullUserMessage failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Tonode
//  - Mid
//  - Limit
// 
func (p *AdmifaceClient) PullRoomMessage(ctx context.Context, fromnode string, domain string, tonode string, mid int64, limit int64) (_r *AdmMessageList, _err error) {
	var _args126 AdmifacePullRoomMessageArgs
	_args126.Fromnode = fromnode
	_args126.Domain = domain
	_args126.Tonode = tonode
	_args126.Mid = mid
	_args126.Limit = limit
	var _result128 AdmifacePullRoomMessageResult
	var _meta127 thrift.ResponseMeta
	_meta127, _err = p.Client_().Call(ctx, "PullRoomMessage", &_args126, &_result128)
	p.SetLastResponseMeta_(_meta127)
	if _err != nil {
		return
	}
	if _ret129 := _result128.GetSuccess(); _ret129 != nil {
		return _ret129, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "PullRoomMessage failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Limit
// 
func (p *AdmifaceClient) OfflineMsg(ctx context.Context, fromnode string, domain string, limit int64) (_r *AdmMessageList, _err error) {
	var _args130 AdmifaceOfflineMsgArgs
	_args130.Fromnode = fromnode
	_args130.Domain = domain
	_args130.Limit = limit
	var _result132 AdmifaceOfflineMsgResult
	var _meta131 thrift.ResponseMeta
	_meta131, _err = p.Client_().Call(ctx, "OfflineMsg", &_args130, &_result132)
	p.SetLastResponseMeta_(_meta131)
	if _err != nil {
		return
	}
	if _ret133 := _result132.GetSuccess(); _ret133 != nil {
		return _ret133, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "OfflineMsg failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Ids
// 
func (p *AdmifaceClient) DelOfflineMsg(ctx context.Context, fromnode string, domain string, ids []int64) (_r *AdmAck, _err error) {
	var _args134 AdmifaceDelOfflineMsgArgs
	_args134.Fromnode = fromnode
	_args134.Domain = domain
	_args134.Ids = ids
	var _result136 AdmifaceDelOfflineMsgResult
	var _meta135 thrift.ResponseMeta
	_meta135, _err = p.Client_().Call(ctx, "DelOfflineMsg", &_args134, &_result136)
	p.SetLastResponseMeta_(_meta135)
	if _err != nil {
		return
	}
	if _ret137 := _result136.GetSuccess(); _ret137 != nil {
		return _ret137, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "DelOfflineMsg failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
// 
func (p *AdmifaceClient) UserRoom(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error) {
	var _args138 AdmifaceUserRoomArgs
	_args138.Fromnode = fromnode
	_args138.Domain = domain
	var _result140 AdmifaceUserRoomResult
	var _meta139 thrift.ResponseMeta
	_meta139, _err = p.Client_().Call(ctx, "UserRoom", &_args138, &_result140)
	p.SetLastResponseMeta_(_meta139)
	if _err != nil {
		return
	}
	if _ret141 := _result140.GetSuccess(); _ret141 != nil {
		return _ret141, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "UserRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
// 
func (p *AdmifaceClient) RoomUsers(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error) {
	var _args142 AdmifaceRoomUsersArgs
	_args142.Fromnode = fromnode
	_args142.Domain = domain
	var _result144 AdmifaceRoomUsersResult
	var _meta143 thrift.ResponseMeta
	_meta143, _err = p.Client_().Call(ctx, "RoomUsers", &_args142, &_result144)
	p.SetLastResponseMeta_(_meta143)
	if _err != nil {
		return
	}
	if _ret145 := _result144.GetSuccess(); _ret145 != nil {
		return _ret145, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "RoomUsers failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Topic
//  - Gtype
// 
func (p *AdmifaceClient) CreateRoom(ctx context.Context, fromnode string, domain string, topic string, gtype int8) (_r *AdmAck, _err error) {
	var _args146 AdmifaceCreateRoomArgs
	_args146.Fromnode = fromnode
	_args146.Domain = domain
	_args146.Topic = topic
	_args146.Gtype = gtype
	var _result148 AdmifaceCreateRoomResult
	var _meta147 thrift.ResponseMeta
	_meta147, _err = p.Client_().Call(ctx, "CreateRoom", &_args146, &_result148)
	p.SetLastResponseMeta_(_meta147)
	if _err != nil {
		return
	}
	if _ret149 := _result148.GetSuccess(); _ret149 != nil {
		return _ret149, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "CreateRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - Msg
// 
func (p *AdmifaceClient) AddRoom(ctx context.Context, fromnode string, domain string, roomNode string, msg string) (_r *AdmAck, _err error) {
	var _args150 AdmifaceAddRoomArgs
	_args150.Fromnode = fromnode
	_args150.Domain = domain
	_args150.RoomNode = roomNode
	_args150.Msg = msg
	var _result152 AdmifaceAddRoomResult
	var _meta151 thrift.ResponseMeta
	_meta151, _err = p.Client_().Call(ctx, "AddRoom", &_args150, &_result152)
	p.SetLastResponseMeta_(_meta151)
	if _err != nil {
		return
	}
	if _ret153 := _result152.GetSuccess(); _ret153 != nil {
		return _ret153, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "AddRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
// 
func (p *AdmifaceClient) PullInRoom(ctx context.Context, fromnode string, domain string, roomNode string, toNode string) (_r *AdmAck, _err error) {
	var _args154 AdmifacePullInRoomArgs
	_args154.Fromnode = fromnode
	_args154.Domain = domain
	_args154.RoomNode = roomNode
	_args154.ToNode = toNode
	var _result156 AdmifacePullInRoomResult
	var _meta155 thrift.ResponseMeta
	_meta155, _err = p.Client_().Call(ctx, "PullInRoom", &_args154, &_result156)
	p.SetLastResponseMeta_(_meta155)
	if _err != nil {
		return
	}
	if _ret157 := _result156.GetSuccess(); _ret157 != nil {
		return _ret157, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "PullInRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
//  - Msg
// 
func (p *AdmifaceClient) RejectRoom(ctx context.Context, fromnode string, domain string, roomNode string, toNode string, msg string) (_r *AdmAck, _err error) {
	var _args158 AdmifaceRejectRoomArgs
	_args158.Fromnode = fromnode
	_args158.Domain = domain
	_args158.RoomNode = roomNode
	_args158.ToNode = toNode
	_args158.Msg = msg
	var _result160 AdmifaceRejectRoomResult
	var _meta159 thrift.ResponseMeta
	_meta159, _err = p.Client_().Call(ctx, "RejectRoom", &_args158, &_result160)
	p.SetLastResponseMeta_(_meta159)
	if _err != nil {
		return
	}
	if _ret161 := _result160.GetSuccess(); _ret161 != nil {
		return _ret161, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "RejectRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
// 
func (p *AdmifaceClient) KickRoom(ctx context.Context, fromnode string, domain string, roomNode string, toNode string) (_r *AdmAck, _err error) {
	var _args162 AdmifaceKickRoomArgs
	_args162.Fromnode = fromnode
	_args162.Domain = domain
	_args162.RoomNode = roomNode
	_args162.ToNode = toNode
	var _result164 AdmifaceKickRoomResult
	var _meta163 thrift.ResponseMeta
	_meta163, _err = p.Client_().Call(ctx, "KickRoom", &_args162, &_result164)
	p.SetLastResponseMeta_(_meta163)
	if _err != nil {
		return
	}
	if _ret165 := _result164.GetSuccess(); _ret165 != nil {
		return _ret165, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "KickRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
func (p *AdmifaceClient) LeaveRoom(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error) {
	var _args166 AdmifaceLeaveRoomArgs
	_args166.Fromnode = fromnode
	_args166.Domain = domain
	_args166.RoomNode = roomNode
	var _result168 AdmifaceLeaveRoomResult
	var _meta167 thrift.ResponseMeta
	_meta167, _err = p.Client_().Call(ctx, "LeaveRoom", &_args166, &_result168)
	p.SetLastResponseMeta_(_meta167)
	if _err != nil {
		return
	}
	if _ret169 := _result168.GetSuccess(); _ret169 != nil {
		return _ret169, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "LeaveRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
func (p *AdmifaceClient) CancelRoom(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error) {
	var _args170 AdmifaceCancelRoomArgs
	_args170.Fromnode = fromnode
	_args170.Domain = domain
	_args170.RoomNode = roomNode
	var _result172 AdmifaceCancelRoomResult
	var _meta171 thrift.ResponseMeta
	_meta171, _err = p.Client_().Call(ctx, "CancelRoom", &_args170, &_result172)
	p.SetLastResponseMeta_(_meta171)
	if _err != nil {
		return
	}
	if _ret173 := _result172.GetSuccess(); _ret173 != nil {
		return _ret173, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "CancelRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
func (p *AdmifaceClient) BlockRoom(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error) {
	var _args174 AdmifaceBlockRoomArgs
	_args174.Fromnode = fromnode
	_args174.Domain = domain
	_args174.RoomNode = roomNode
	var _result176 AdmifaceBlockRoomResult
	var _meta175 thrift.ResponseMeta
	_meta175, _err = p.Client_().Call(ctx, "BlockRoom", &_args174, &_result176)
	p.SetLastResponseMeta_(_meta175)
	if _err != nil {
		return
	}
	if _ret177 := _result176.GetSuccess(); _ret177 != nil {
		return _ret177, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "BlockRoom failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
// 
func (p *AdmifaceClient) BlockRoomMember(ctx context.Context, fromnode string, domain string, roomNode string, toNode string) (_r *AdmAck, _err error) {
	var _args178 AdmifaceBlockRoomMemberArgs
	_args178.Fromnode = fromnode
	_args178.Domain = domain
	_args178.RoomNode = roomNode
	_args178.ToNode = toNode
	var _result180 AdmifaceBlockRoomMemberResult
	var _meta179 thrift.ResponseMeta
	_meta179, _err = p.Client_().Call(ctx, "BlockRoomMember", &_args178, &_result180)
	p.SetLastResponseMeta_(_meta179)
	if _err != nil {
		return
	}
	if _ret181 := _result180.GetSuccess(); _ret181 != nil {
		return _ret181, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "BlockRoomMember failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
// 
func (p *AdmifaceClient) BlockRosterList(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error) {
	var _args182 AdmifaceBlockRosterListArgs
	_args182.Fromnode = fromnode
	_args182.Domain = domain
	var _result184 AdmifaceBlockRosterListResult
	var _meta183 thrift.ResponseMeta
	_meta183, _err = p.Client_().Call(ctx, "BlockRosterList", &_args182, &_result184)
	p.SetLastResponseMeta_(_meta183)
	if _err != nil {
		return
	}
	if _ret185 := _result184.GetSuccess(); _ret185 != nil {
		return _ret185, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "BlockRosterList failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
// 
func (p *AdmifaceClient) BlockRoomList(ctx context.Context, fromnode string, domain string) (_r *AdmNodeList, _err error) {
	var _args186 AdmifaceBlockRoomListArgs
	_args186.Fromnode = fromnode
	_args186.Domain = domain
	var _result188 AdmifaceBlockRoomListResult
	var _meta187 thrift.ResponseMeta
	_meta187, _err = p.Client_().Call(ctx, "BlockRoomList", &_args186, &_result188)
	p.SetLastResponseMeta_(_meta187)
	if _err != nil {
		return
	}
	if _ret189 := _result188.GetSuccess(); _ret189 != nil {
		return _ret189, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "BlockRoomList failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
func (p *AdmifaceClient) BlockRoomMemberlist(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmNodeList, _err error) {
	var _args190 AdmifaceBlockRoomMemberlistArgs
	_args190.Fromnode = fromnode
	_args190.Domain = domain
	_args190.RoomNode = roomNode
	var _result192 AdmifaceBlockRoomMemberlistResult
	var _meta191 thrift.ResponseMeta
	_meta191, _err = p.Client_().Call(ctx, "BlockRoomMemberlist", &_args190, &_result192)
	p.SetLastResponseMeta_(_meta191)
	if _err != nil {
		return
	}
	if _ret193 := _result192.GetSuccess(); _ret193 != nil {
		return _ret193, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "BlockRoomMemberlist failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
// 
func (p *AdmifaceClient) VirtualroomRegister(ctx context.Context, fromnode string, domain string) (_r *AdmAck, _err error) {
	var _args194 AdmifaceVirtualroomRegisterArgs
	_args194.Fromnode = fromnode
	_args194.Domain = domain
	var _result196 AdmifaceVirtualroomRegisterResult
	var _meta195 thrift.ResponseMeta
	_meta195, _err = p.Client_().Call(ctx, "VirtualroomRegister", &_args194, &_result196)
	p.SetLastResponseMeta_(_meta195)
	if _err != nil {
		return
	}
	if _ret197 := _result196.GetSuccess(); _ret197 != nil {
		return _ret197, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "VirtualroomRegister failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - VNode
// 
func (p *AdmifaceClient) VirtualroomRemove(ctx context.Context, fromnode string, domain string, vNode string) (_r *AdmAck, _err error) {
	var _args198 AdmifaceVirtualroomRemoveArgs
	_args198.Fromnode = fromnode
	_args198.Domain = domain
	_args198.VNode = vNode
	var _result200 AdmifaceVirtualroomRemoveResult
	var _meta199 thrift.ResponseMeta
	_meta199, _err = p.Client_().Call(ctx, "VirtualroomRemove", &_args198, &_result200)
	p.SetLastResponseMeta_(_meta199)
	if _err != nil {
		return
	}
	if _ret201 := _result200.GetSuccess(); _ret201 != nil {
		return _ret201, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "VirtualroomRemove failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - VNode
//  - ToNode
// 
func (p *AdmifaceClient) VirtualroomAddAuth(ctx context.Context, fromnode string, domain string, vNode string, toNode string) (_r *AdmAck, _err error) {
	var _args202 AdmifaceVirtualroomAddAuthArgs
	_args202.Fromnode = fromnode
	_args202.Domain = domain
	_args202.VNode = vNode
	_args202.ToNode = toNode
	var _result204 AdmifaceVirtualroomAddAuthResult
	var _meta203 thrift.ResponseMeta
	_meta203, _err = p.Client_().Call(ctx, "VirtualroomAddAuth", &_args202, &_result204)
	p.SetLastResponseMeta_(_meta203)
	if _err != nil {
		return
	}
	if _ret205 := _result204.GetSuccess(); _ret205 != nil {
		return _ret205, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "VirtualroomAddAuth failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - VNode
//  - ToNode
// 
func (p *AdmifaceClient) VirtualroomDelAuth(ctx context.Context, fromnode string, domain string, vNode string, toNode string) (_r *AdmAck, _err error) {
	var _args206 AdmifaceVirtualroomDelAuthArgs
	_args206.Fromnode = fromnode
	_args206.Domain = domain
	_args206.VNode = vNode
	_args206.ToNode = toNode
	var _result208 AdmifaceVirtualroomDelAuthResult
	var _meta207 thrift.ResponseMeta
	_meta207, _err = p.Client_().Call(ctx, "VirtualroomDelAuth", &_args206, &_result208)
	p.SetLastResponseMeta_(_meta207)
	if _err != nil {
		return
	}
	if _ret209 := _result208.GetSuccess(); _ret209 != nil {
		return _ret209, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "VirtualroomDelAuth failed: unknown result")
}

// Parameters:
//  - Wsid
//  - Fromnode
//  - Domain
//  - VNode
//  - SubType
// 
func (p *AdmifaceClient) VirtualroomSub(ctx context.Context, wsid int64, fromnode string, domain string, vNode string, subType int8) (_r *AdmAck, _err error) {
	var _args210 AdmifaceVirtualroomSubArgs
	_args210.Wsid = wsid
	_args210.Fromnode = fromnode
	_args210.Domain = domain
	_args210.VNode = vNode
	_args210.SubType = subType
	var _result212 AdmifaceVirtualroomSubResult
	var _meta211 thrift.ResponseMeta
	_meta211, _err = p.Client_().Call(ctx, "VirtualroomSub", &_args210, &_result212)
	p.SetLastResponseMeta_(_meta211)
	if _err != nil {
		return
	}
	if _ret213 := _result212.GetSuccess(); _ret213 != nil {
		return _ret213, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "VirtualroomSub failed: unknown result")
}

// Parameters:
//  - Wsid
//  - Fromnode
//  - Domain
//  - VNode
// 
func (p *AdmifaceClient) VirtualroomUnSub(ctx context.Context, wsid int64, fromnode string, domain string, vNode string) (_r *AdmAck, _err error) {
	var _args214 AdmifaceVirtualroomUnSubArgs
	_args214.Wsid = wsid
	_args214.Fromnode = fromnode
	_args214.Domain = domain
	_args214.VNode = vNode
	var _result216 AdmifaceVirtualroomUnSubResult
	var _meta215 thrift.ResponseMeta
	_meta215, _err = p.Client_().Call(ctx, "VirtualroomUnSub", &_args214, &_result216)
	p.SetLastResponseMeta_(_meta215)
	if _err != nil {
		return
	}
	if _ret217 := _result216.GetSuccess(); _ret217 != nil {
		return _ret217, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "VirtualroomUnSub failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - Tonode
// 
func (p *AdmifaceClient) Authroster(ctx context.Context, fromnode string, domain string, tonode string) (_r *AdmAck, _err error) {
	var _args218 AdmifaceAuthrosterArgs
	_args218.Fromnode = fromnode
	_args218.Domain = domain
	_args218.Tonode = tonode
	var _result220 AdmifaceAuthrosterResult
	var _meta219 thrift.ResponseMeta
	_meta219, _err = p.Client_().Call(ctx, "Authroster", &_args218, &_result220)
	p.SetLastResponseMeta_(_meta219)
	if _err != nil {
		return
	}
	if _ret221 := _result220.GetSuccess(); _ret221 != nil {
		return _ret221, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Authroster failed: unknown result")
}

// Parameters:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
func (p *AdmifaceClient) Authgroupuser(ctx context.Context, fromnode string, domain string, roomNode string) (_r *AdmAck, _err error) {
	var _args222 AdmifaceAuthgroupuserArgs
	_args222.Fromnode = fromnode
	_args222.Domain = domain
	_args222.RoomNode = roomNode
	var _result224 AdmifaceAuthgroupuserResult
	var _meta223 thrift.ResponseMeta
	_meta223, _err = p.Client_().Call(ctx, "Authgroupuser", &_args222, &_result224)
	p.SetLastResponseMeta_(_meta223)
	if _err != nil {
		return
	}
	if _ret225 := _result224.GetSuccess(); _ret225 != nil {
		return _ret225, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Authgroupuser failed: unknown result")
}

type AdmifaceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler Admiface
}

func (p *AdmifaceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AdmifaceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AdmifaceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAdmifaceProcessor(handler Admiface) *AdmifaceProcessor {

	self226 := &AdmifaceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
	self226.processorMap["Auth"] = &admifaceProcessorAuth{handler:handler}
	self226.processorMap["ModifyPwd"] = &admifaceProcessorModifyPwd{handler:handler}
	self226.processorMap["Ping"] = &admifaceProcessorPing{handler:handler}
	self226.processorMap["Token"] = &admifaceProcessorToken{handler:handler}
	self226.processorMap["TimMessageBroadcast"] = &admifaceProcessorTimMessageBroadcast{handler:handler}
	self226.processorMap["TimPresenceBroadcast"] = &admifaceProcessorTimPresenceBroadcast{handler:handler}
	self226.processorMap["ProxyMessage"] = &admifaceProcessorProxyMessage{handler:handler}
	self226.processorMap["Register"] = &admifaceProcessorRegister{handler:handler}
	self226.processorMap["ModifyUserInfo"] = &admifaceProcessorModifyUserInfo{handler:handler}
	self226.processorMap["ModifyRoomInfo"] = &admifaceProcessorModifyRoomInfo{handler:handler}
	self226.processorMap["SysBlockUser"] = &admifaceProcessorSysBlockUser{handler:handler}
	self226.processorMap["OnlineUser"] = &admifaceProcessorOnlineUser{handler:handler}
	self226.processorMap["Vroom"] = &admifaceProcessorVroom{handler:handler}
	self226.processorMap["Detect"] = &admifaceProcessorDetect{handler:handler}
	self226.processorMap["Roster"] = &admifaceProcessorRoster{handler:handler}
	self226.processorMap["Addroster"] = &admifaceProcessorAddroster{handler:handler}
	self226.processorMap["Rmroster"] = &admifaceProcessorRmroster{handler:handler}
	self226.processorMap["Blockroster"] = &admifaceProcessorBlockroster{handler:handler}
	self226.processorMap["PullUserMessage"] = &admifaceProcessorPullUserMessage{handler:handler}
	self226.processorMap["PullRoomMessage"] = &admifaceProcessorPullRoomMessage{handler:handler}
	self226.processorMap["OfflineMsg"] = &admifaceProcessorOfflineMsg{handler:handler}
	self226.processorMap["DelOfflineMsg"] = &admifaceProcessorDelOfflineMsg{handler:handler}
	self226.processorMap["UserRoom"] = &admifaceProcessorUserRoom{handler:handler}
	self226.processorMap["RoomUsers"] = &admifaceProcessorRoomUsers{handler:handler}
	self226.processorMap["CreateRoom"] = &admifaceProcessorCreateRoom{handler:handler}
	self226.processorMap["AddRoom"] = &admifaceProcessorAddRoom{handler:handler}
	self226.processorMap["PullInRoom"] = &admifaceProcessorPullInRoom{handler:handler}
	self226.processorMap["RejectRoom"] = &admifaceProcessorRejectRoom{handler:handler}
	self226.processorMap["KickRoom"] = &admifaceProcessorKickRoom{handler:handler}
	self226.processorMap["LeaveRoom"] = &admifaceProcessorLeaveRoom{handler:handler}
	self226.processorMap["CancelRoom"] = &admifaceProcessorCancelRoom{handler:handler}
	self226.processorMap["BlockRoom"] = &admifaceProcessorBlockRoom{handler:handler}
	self226.processorMap["BlockRoomMember"] = &admifaceProcessorBlockRoomMember{handler:handler}
	self226.processorMap["BlockRosterList"] = &admifaceProcessorBlockRosterList{handler:handler}
	self226.processorMap["BlockRoomList"] = &admifaceProcessorBlockRoomList{handler:handler}
	self226.processorMap["BlockRoomMemberlist"] = &admifaceProcessorBlockRoomMemberlist{handler:handler}
	self226.processorMap["VirtualroomRegister"] = &admifaceProcessorVirtualroomRegister{handler:handler}
	self226.processorMap["VirtualroomRemove"] = &admifaceProcessorVirtualroomRemove{handler:handler}
	self226.processorMap["VirtualroomAddAuth"] = &admifaceProcessorVirtualroomAddAuth{handler:handler}
	self226.processorMap["VirtualroomDelAuth"] = &admifaceProcessorVirtualroomDelAuth{handler:handler}
	self226.processorMap["VirtualroomSub"] = &admifaceProcessorVirtualroomSub{handler:handler}
	self226.processorMap["VirtualroomUnSub"] = &admifaceProcessorVirtualroomUnSub{handler:handler}
	self226.processorMap["Authroster"] = &admifaceProcessorAuthroster{handler:handler}
	self226.processorMap["Authgroupuser"] = &admifaceProcessorAuthgroupuser{handler:handler}
	return self226
}

func (p *AdmifaceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil { return false, thrift.WrapTException(err2) }
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x227 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x227.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x227
}

type admifaceProcessorAuth struct {
	handler Admiface
}

func (p *admifaceProcessorAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err228 error
	args := AdmifaceAuthArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Auth", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceAuthResult{}
	if retval, err2 := p.handler.Auth(ctx, args.Ab); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc229 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Auth: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Auth", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err228 = thrift.WrapTException(err2)
		}
		if err2 := _exc229.Write(ctx, oprot); _write_err228 == nil && err2 != nil {
			_write_err228 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err228 == nil && err2 != nil {
			_write_err228 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err228 == nil && err2 != nil {
			_write_err228 = thrift.WrapTException(err2)
		}
		if _write_err228 != nil {
			return false, thrift.WrapTException(_write_err228)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Auth", thrift.REPLY, seqId); err2 != nil {
		_write_err228 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err228 == nil && err2 != nil {
		_write_err228 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err228 == nil && err2 != nil {
		_write_err228 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err228 == nil && err2 != nil {
		_write_err228 = thrift.WrapTException(err2)
	}
	if _write_err228 != nil {
		return false, thrift.WrapTException(_write_err228)
	}
	return true, err
}

type admifaceProcessorModifyPwd struct {
	handler Admiface
}

func (p *admifaceProcessorModifyPwd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err230 error
	args := AdmifaceModifyPwdArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "ModifyPwd", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceModifyPwdResult{}
	if retval, err2 := p.handler.ModifyPwd(ctx, args.Fromnode, args.Domain, args.Oldpwd, args.Newpwd_); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc231 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyPwd: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "ModifyPwd", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err230 = thrift.WrapTException(err2)
		}
		if err2 := _exc231.Write(ctx, oprot); _write_err230 == nil && err2 != nil {
			_write_err230 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err230 == nil && err2 != nil {
			_write_err230 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err230 == nil && err2 != nil {
			_write_err230 = thrift.WrapTException(err2)
		}
		if _write_err230 != nil {
			return false, thrift.WrapTException(_write_err230)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "ModifyPwd", thrift.REPLY, seqId); err2 != nil {
		_write_err230 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err230 == nil && err2 != nil {
		_write_err230 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err230 == nil && err2 != nil {
		_write_err230 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err230 == nil && err2 != nil {
		_write_err230 = thrift.WrapTException(err2)
	}
	if _write_err230 != nil {
		return false, thrift.WrapTException(_write_err230)
	}
	return true, err
}

type admifaceProcessorPing struct {
	handler Admiface
}

func (p *admifaceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err232 error
	args := AdmifacePingArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Ping", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifacePingResult{}
	if retval, err2 := p.handler.Ping(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc233 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Ping", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err232 = thrift.WrapTException(err2)
		}
		if err2 := _exc233.Write(ctx, oprot); _write_err232 == nil && err2 != nil {
			_write_err232 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err232 == nil && err2 != nil {
			_write_err232 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err232 == nil && err2 != nil {
			_write_err232 = thrift.WrapTException(err2)
		}
		if _write_err232 != nil {
			return false, thrift.WrapTException(_write_err232)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Ping", thrift.REPLY, seqId); err2 != nil {
		_write_err232 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err232 == nil && err2 != nil {
		_write_err232 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err232 == nil && err2 != nil {
		_write_err232 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err232 == nil && err2 != nil {
		_write_err232 = thrift.WrapTException(err2)
	}
	if _write_err232 != nil {
		return false, thrift.WrapTException(_write_err232)
	}
	return true, err
}

type admifaceProcessorToken struct {
	handler Admiface
}

func (p *admifaceProcessorToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err234 error
	args := AdmifaceTokenArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Token", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceTokenResult{}
	if retval, err2 := p.handler.Token(ctx, args.Atoken); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc235 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Token: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Token", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err234 = thrift.WrapTException(err2)
		}
		if err2 := _exc235.Write(ctx, oprot); _write_err234 == nil && err2 != nil {
			_write_err234 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err234 == nil && err2 != nil {
			_write_err234 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err234 == nil && err2 != nil {
			_write_err234 = thrift.WrapTException(err2)
		}
		if _write_err234 != nil {
			return false, thrift.WrapTException(_write_err234)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Token", thrift.REPLY, seqId); err2 != nil {
		_write_err234 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err234 == nil && err2 != nil {
		_write_err234 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err234 == nil && err2 != nil {
		_write_err234 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err234 == nil && err2 != nil {
		_write_err234 = thrift.WrapTException(err2)
	}
	if _write_err234 != nil {
		return false, thrift.WrapTException(_write_err234)
	}
	return true, err
}

type admifaceProcessorTimMessageBroadcast struct {
	handler Admiface
}

func (p *admifaceProcessorTimMessageBroadcast) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err236 error
	args := AdmifaceTimMessageBroadcastArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "TimMessageBroadcast", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceTimMessageBroadcastResult{}
	if retval, err2 := p.handler.TimMessageBroadcast(ctx, args.Amb); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc237 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TimMessageBroadcast: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "TimMessageBroadcast", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err236 = thrift.WrapTException(err2)
		}
		if err2 := _exc237.Write(ctx, oprot); _write_err236 == nil && err2 != nil {
			_write_err236 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err236 == nil && err2 != nil {
			_write_err236 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err236 == nil && err2 != nil {
			_write_err236 = thrift.WrapTException(err2)
		}
		if _write_err236 != nil {
			return false, thrift.WrapTException(_write_err236)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "TimMessageBroadcast", thrift.REPLY, seqId); err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err236 == nil && err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err236 == nil && err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err236 == nil && err2 != nil {
		_write_err236 = thrift.WrapTException(err2)
	}
	if _write_err236 != nil {
		return false, thrift.WrapTException(_write_err236)
	}
	return true, err
}

type admifaceProcessorTimPresenceBroadcast struct {
	handler Admiface
}

func (p *admifaceProcessorTimPresenceBroadcast) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err238 error
	args := AdmifaceTimPresenceBroadcastArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "TimPresenceBroadcast", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceTimPresenceBroadcastResult{}
	if retval, err2 := p.handler.TimPresenceBroadcast(ctx, args.Apb); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc239 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing TimPresenceBroadcast: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "TimPresenceBroadcast", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err238 = thrift.WrapTException(err2)
		}
		if err2 := _exc239.Write(ctx, oprot); _write_err238 == nil && err2 != nil {
			_write_err238 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err238 == nil && err2 != nil {
			_write_err238 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err238 == nil && err2 != nil {
			_write_err238 = thrift.WrapTException(err2)
		}
		if _write_err238 != nil {
			return false, thrift.WrapTException(_write_err238)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "TimPresenceBroadcast", thrift.REPLY, seqId); err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err238 == nil && err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err238 == nil && err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err238 == nil && err2 != nil {
		_write_err238 = thrift.WrapTException(err2)
	}
	if _write_err238 != nil {
		return false, thrift.WrapTException(_write_err238)
	}
	return true, err
}

type admifaceProcessorProxyMessage struct {
	handler Admiface
}

func (p *admifaceProcessorProxyMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err240 error
	args := AdmifaceProxyMessageArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "ProxyMessage", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceProxyMessageResult{}
	if retval, err2 := p.handler.ProxyMessage(ctx, args.Apm); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc241 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ProxyMessage: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "ProxyMessage", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err240 = thrift.WrapTException(err2)
		}
		if err2 := _exc241.Write(ctx, oprot); _write_err240 == nil && err2 != nil {
			_write_err240 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err240 == nil && err2 != nil {
			_write_err240 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err240 == nil && err2 != nil {
			_write_err240 = thrift.WrapTException(err2)
		}
		if _write_err240 != nil {
			return false, thrift.WrapTException(_write_err240)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "ProxyMessage", thrift.REPLY, seqId); err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err240 == nil && err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err240 == nil && err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err240 == nil && err2 != nil {
		_write_err240 = thrift.WrapTException(err2)
	}
	if _write_err240 != nil {
		return false, thrift.WrapTException(_write_err240)
	}
	return true, err
}

type admifaceProcessorRegister struct {
	handler Admiface
}

func (p *admifaceProcessorRegister) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err242 error
	args := AdmifaceRegisterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Register", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceRegisterResult{}
	if retval, err2 := p.handler.Register(ctx, args.Ab); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc243 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Register: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Register", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err242 = thrift.WrapTException(err2)
		}
		if err2 := _exc243.Write(ctx, oprot); _write_err242 == nil && err2 != nil {
			_write_err242 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err242 == nil && err2 != nil {
			_write_err242 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err242 == nil && err2 != nil {
			_write_err242 = thrift.WrapTException(err2)
		}
		if _write_err242 != nil {
			return false, thrift.WrapTException(_write_err242)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Register", thrift.REPLY, seqId); err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err242 == nil && err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err242 == nil && err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err242 == nil && err2 != nil {
		_write_err242 = thrift.WrapTException(err2)
	}
	if _write_err242 != nil {
		return false, thrift.WrapTException(_write_err242)
	}
	return true, err
}

type admifaceProcessorModifyUserInfo struct {
	handler Admiface
}

func (p *admifaceProcessorModifyUserInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err244 error
	args := AdmifaceModifyUserInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "ModifyUserInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceModifyUserInfoResult{}
	if retval, err2 := p.handler.ModifyUserInfo(ctx, args.Amui); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc245 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyUserInfo: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "ModifyUserInfo", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err244 = thrift.WrapTException(err2)
		}
		if err2 := _exc245.Write(ctx, oprot); _write_err244 == nil && err2 != nil {
			_write_err244 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err244 == nil && err2 != nil {
			_write_err244 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err244 == nil && err2 != nil {
			_write_err244 = thrift.WrapTException(err2)
		}
		if _write_err244 != nil {
			return false, thrift.WrapTException(_write_err244)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "ModifyUserInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err244 == nil && err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err244 == nil && err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err244 == nil && err2 != nil {
		_write_err244 = thrift.WrapTException(err2)
	}
	if _write_err244 != nil {
		return false, thrift.WrapTException(_write_err244)
	}
	return true, err
}

type admifaceProcessorModifyRoomInfo struct {
	handler Admiface
}

func (p *admifaceProcessorModifyRoomInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err246 error
	args := AdmifaceModifyRoomInfoArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "ModifyRoomInfo", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceModifyRoomInfoResult{}
	if retval, err2 := p.handler.ModifyRoomInfo(ctx, args.Arb); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc247 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ModifyRoomInfo: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "ModifyRoomInfo", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err246 = thrift.WrapTException(err2)
		}
		if err2 := _exc247.Write(ctx, oprot); _write_err246 == nil && err2 != nil {
			_write_err246 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err246 == nil && err2 != nil {
			_write_err246 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err246 == nil && err2 != nil {
			_write_err246 = thrift.WrapTException(err2)
		}
		if _write_err246 != nil {
			return false, thrift.WrapTException(_write_err246)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "ModifyRoomInfo", thrift.REPLY, seqId); err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err246 == nil && err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err246 == nil && err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err246 == nil && err2 != nil {
		_write_err246 = thrift.WrapTException(err2)
	}
	if _write_err246 != nil {
		return false, thrift.WrapTException(_write_err246)
	}
	return true, err
}

type admifaceProcessorSysBlockUser struct {
	handler Admiface
}

func (p *admifaceProcessorSysBlockUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err248 error
	args := AdmifaceSysBlockUserArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "SysBlockUser", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceSysBlockUserResult{}
	if retval, err2 := p.handler.SysBlockUser(ctx, args.Abu); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc249 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SysBlockUser: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "SysBlockUser", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err248 = thrift.WrapTException(err2)
		}
		if err2 := _exc249.Write(ctx, oprot); _write_err248 == nil && err2 != nil {
			_write_err248 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err248 == nil && err2 != nil {
			_write_err248 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err248 == nil && err2 != nil {
			_write_err248 = thrift.WrapTException(err2)
		}
		if _write_err248 != nil {
			return false, thrift.WrapTException(_write_err248)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "SysBlockUser", thrift.REPLY, seqId); err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err248 == nil && err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err248 == nil && err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err248 == nil && err2 != nil {
		_write_err248 = thrift.WrapTException(err2)
	}
	if _write_err248 != nil {
		return false, thrift.WrapTException(_write_err248)
	}
	return true, err
}

type admifaceProcessorOnlineUser struct {
	handler Admiface
}

func (p *admifaceProcessorOnlineUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err250 error
	args := AdmifaceOnlineUserArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "OnlineUser", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceOnlineUserResult{}
	if retval, err2 := p.handler.OnlineUser(ctx, args.Au); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc251 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OnlineUser: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "OnlineUser", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err250 = thrift.WrapTException(err2)
		}
		if err2 := _exc251.Write(ctx, oprot); _write_err250 == nil && err2 != nil {
			_write_err250 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err250 == nil && err2 != nil {
			_write_err250 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err250 == nil && err2 != nil {
			_write_err250 = thrift.WrapTException(err2)
		}
		if _write_err250 != nil {
			return false, thrift.WrapTException(_write_err250)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "OnlineUser", thrift.REPLY, seqId); err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err250 == nil && err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err250 == nil && err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err250 == nil && err2 != nil {
		_write_err250 = thrift.WrapTException(err2)
	}
	if _write_err250 != nil {
		return false, thrift.WrapTException(_write_err250)
	}
	return true, err
}

type admifaceProcessorVroom struct {
	handler Admiface
}

func (p *admifaceProcessorVroom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err252 error
	args := AdmifaceVroomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Vroom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceVroomResult{}
	if retval, err2 := p.handler.Vroom(ctx, args.Avb); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc253 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Vroom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Vroom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err252 = thrift.WrapTException(err2)
		}
		if err2 := _exc253.Write(ctx, oprot); _write_err252 == nil && err2 != nil {
			_write_err252 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err252 == nil && err2 != nil {
			_write_err252 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err252 == nil && err2 != nil {
			_write_err252 = thrift.WrapTException(err2)
		}
		if _write_err252 != nil {
			return false, thrift.WrapTException(_write_err252)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Vroom", thrift.REPLY, seqId); err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err252 == nil && err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err252 == nil && err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err252 == nil && err2 != nil {
		_write_err252 = thrift.WrapTException(err2)
	}
	if _write_err252 != nil {
		return false, thrift.WrapTException(_write_err252)
	}
	return true, err
}

type admifaceProcessorDetect struct {
	handler Admiface
}

func (p *admifaceProcessorDetect) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err254 error
	args := AdmifaceDetectArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Detect", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceDetectResult{}
	if retval, err2 := p.handler.Detect(ctx, args.Adb); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc255 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Detect: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Detect", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err254 = thrift.WrapTException(err2)
		}
		if err2 := _exc255.Write(ctx, oprot); _write_err254 == nil && err2 != nil {
			_write_err254 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err254 == nil && err2 != nil {
			_write_err254 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err254 == nil && err2 != nil {
			_write_err254 = thrift.WrapTException(err2)
		}
		if _write_err254 != nil {
			return false, thrift.WrapTException(_write_err254)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Detect", thrift.REPLY, seqId); err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err254 == nil && err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err254 == nil && err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err254 == nil && err2 != nil {
		_write_err254 = thrift.WrapTException(err2)
	}
	if _write_err254 != nil {
		return false, thrift.WrapTException(_write_err254)
	}
	return true, err
}

type admifaceProcessorRoster struct {
	handler Admiface
}

func (p *admifaceProcessorRoster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err256 error
	args := AdmifaceRosterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Roster", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceRosterResult{}
	if retval, err2 := p.handler.Roster(ctx, args.Fromnode, args.Domain); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc257 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Roster: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Roster", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err256 = thrift.WrapTException(err2)
		}
		if err2 := _exc257.Write(ctx, oprot); _write_err256 == nil && err2 != nil {
			_write_err256 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err256 == nil && err2 != nil {
			_write_err256 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err256 == nil && err2 != nil {
			_write_err256 = thrift.WrapTException(err2)
		}
		if _write_err256 != nil {
			return false, thrift.WrapTException(_write_err256)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Roster", thrift.REPLY, seqId); err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err256 == nil && err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err256 == nil && err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err256 == nil && err2 != nil {
		_write_err256 = thrift.WrapTException(err2)
	}
	if _write_err256 != nil {
		return false, thrift.WrapTException(_write_err256)
	}
	return true, err
}

type admifaceProcessorAddroster struct {
	handler Admiface
}

func (p *admifaceProcessorAddroster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err258 error
	args := AdmifaceAddrosterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Addroster", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceAddrosterResult{}
	if retval, err2 := p.handler.Addroster(ctx, args.Fromnode, args.Domain, args.Tonode, args.Msg); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc259 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Addroster: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Addroster", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err258 = thrift.WrapTException(err2)
		}
		if err2 := _exc259.Write(ctx, oprot); _write_err258 == nil && err2 != nil {
			_write_err258 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err258 == nil && err2 != nil {
			_write_err258 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err258 == nil && err2 != nil {
			_write_err258 = thrift.WrapTException(err2)
		}
		if _write_err258 != nil {
			return false, thrift.WrapTException(_write_err258)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Addroster", thrift.REPLY, seqId); err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err258 == nil && err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err258 == nil && err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err258 == nil && err2 != nil {
		_write_err258 = thrift.WrapTException(err2)
	}
	if _write_err258 != nil {
		return false, thrift.WrapTException(_write_err258)
	}
	return true, err
}

type admifaceProcessorRmroster struct {
	handler Admiface
}

func (p *admifaceProcessorRmroster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err260 error
	args := AdmifaceRmrosterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Rmroster", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceRmrosterResult{}
	if retval, err2 := p.handler.Rmroster(ctx, args.Fromnode, args.Domain, args.Tonode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc261 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Rmroster: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Rmroster", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err260 = thrift.WrapTException(err2)
		}
		if err2 := _exc261.Write(ctx, oprot); _write_err260 == nil && err2 != nil {
			_write_err260 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err260 == nil && err2 != nil {
			_write_err260 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err260 == nil && err2 != nil {
			_write_err260 = thrift.WrapTException(err2)
		}
		if _write_err260 != nil {
			return false, thrift.WrapTException(_write_err260)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Rmroster", thrift.REPLY, seqId); err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err260 == nil && err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err260 == nil && err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err260 == nil && err2 != nil {
		_write_err260 = thrift.WrapTException(err2)
	}
	if _write_err260 != nil {
		return false, thrift.WrapTException(_write_err260)
	}
	return true, err
}

type admifaceProcessorBlockroster struct {
	handler Admiface
}

func (p *admifaceProcessorBlockroster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err262 error
	args := AdmifaceBlockrosterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Blockroster", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceBlockrosterResult{}
	if retval, err2 := p.handler.Blockroster(ctx, args.Fromnode, args.Domain, args.Tonode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc263 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Blockroster: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Blockroster", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err262 = thrift.WrapTException(err2)
		}
		if err2 := _exc263.Write(ctx, oprot); _write_err262 == nil && err2 != nil {
			_write_err262 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err262 == nil && err2 != nil {
			_write_err262 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err262 == nil && err2 != nil {
			_write_err262 = thrift.WrapTException(err2)
		}
		if _write_err262 != nil {
			return false, thrift.WrapTException(_write_err262)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Blockroster", thrift.REPLY, seqId); err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err262 == nil && err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err262 == nil && err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err262 == nil && err2 != nil {
		_write_err262 = thrift.WrapTException(err2)
	}
	if _write_err262 != nil {
		return false, thrift.WrapTException(_write_err262)
	}
	return true, err
}

type admifaceProcessorPullUserMessage struct {
	handler Admiface
}

func (p *admifaceProcessorPullUserMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err264 error
	args := AdmifacePullUserMessageArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "PullUserMessage", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifacePullUserMessageResult{}
	if retval, err2 := p.handler.PullUserMessage(ctx, args.Fromnode, args.Domain, args.Tonode, args.Mid, args.Limit); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc265 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PullUserMessage: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "PullUserMessage", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err264 = thrift.WrapTException(err2)
		}
		if err2 := _exc265.Write(ctx, oprot); _write_err264 == nil && err2 != nil {
			_write_err264 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err264 == nil && err2 != nil {
			_write_err264 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err264 == nil && err2 != nil {
			_write_err264 = thrift.WrapTException(err2)
		}
		if _write_err264 != nil {
			return false, thrift.WrapTException(_write_err264)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "PullUserMessage", thrift.REPLY, seqId); err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err264 == nil && err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err264 == nil && err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err264 == nil && err2 != nil {
		_write_err264 = thrift.WrapTException(err2)
	}
	if _write_err264 != nil {
		return false, thrift.WrapTException(_write_err264)
	}
	return true, err
}

type admifaceProcessorPullRoomMessage struct {
	handler Admiface
}

func (p *admifaceProcessorPullRoomMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err266 error
	args := AdmifacePullRoomMessageArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "PullRoomMessage", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifacePullRoomMessageResult{}
	if retval, err2 := p.handler.PullRoomMessage(ctx, args.Fromnode, args.Domain, args.Tonode, args.Mid, args.Limit); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc267 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PullRoomMessage: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "PullRoomMessage", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err266 = thrift.WrapTException(err2)
		}
		if err2 := _exc267.Write(ctx, oprot); _write_err266 == nil && err2 != nil {
			_write_err266 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err266 == nil && err2 != nil {
			_write_err266 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err266 == nil && err2 != nil {
			_write_err266 = thrift.WrapTException(err2)
		}
		if _write_err266 != nil {
			return false, thrift.WrapTException(_write_err266)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "PullRoomMessage", thrift.REPLY, seqId); err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err266 == nil && err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err266 == nil && err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err266 == nil && err2 != nil {
		_write_err266 = thrift.WrapTException(err2)
	}
	if _write_err266 != nil {
		return false, thrift.WrapTException(_write_err266)
	}
	return true, err
}

type admifaceProcessorOfflineMsg struct {
	handler Admiface
}

func (p *admifaceProcessorOfflineMsg) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err268 error
	args := AdmifaceOfflineMsgArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "OfflineMsg", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceOfflineMsgResult{}
	if retval, err2 := p.handler.OfflineMsg(ctx, args.Fromnode, args.Domain, args.Limit); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc269 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing OfflineMsg: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "OfflineMsg", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err268 = thrift.WrapTException(err2)
		}
		if err2 := _exc269.Write(ctx, oprot); _write_err268 == nil && err2 != nil {
			_write_err268 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err268 == nil && err2 != nil {
			_write_err268 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err268 == nil && err2 != nil {
			_write_err268 = thrift.WrapTException(err2)
		}
		if _write_err268 != nil {
			return false, thrift.WrapTException(_write_err268)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "OfflineMsg", thrift.REPLY, seqId); err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err268 == nil && err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err268 == nil && err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err268 == nil && err2 != nil {
		_write_err268 = thrift.WrapTException(err2)
	}
	if _write_err268 != nil {
		return false, thrift.WrapTException(_write_err268)
	}
	return true, err
}

type admifaceProcessorDelOfflineMsg struct {
	handler Admiface
}

func (p *admifaceProcessorDelOfflineMsg) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err270 error
	args := AdmifaceDelOfflineMsgArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "DelOfflineMsg", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceDelOfflineMsgResult{}
	if retval, err2 := p.handler.DelOfflineMsg(ctx, args.Fromnode, args.Domain, args.Ids); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc271 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DelOfflineMsg: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "DelOfflineMsg", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err270 = thrift.WrapTException(err2)
		}
		if err2 := _exc271.Write(ctx, oprot); _write_err270 == nil && err2 != nil {
			_write_err270 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err270 == nil && err2 != nil {
			_write_err270 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err270 == nil && err2 != nil {
			_write_err270 = thrift.WrapTException(err2)
		}
		if _write_err270 != nil {
			return false, thrift.WrapTException(_write_err270)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "DelOfflineMsg", thrift.REPLY, seqId); err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err270 == nil && err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err270 == nil && err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err270 == nil && err2 != nil {
		_write_err270 = thrift.WrapTException(err2)
	}
	if _write_err270 != nil {
		return false, thrift.WrapTException(_write_err270)
	}
	return true, err
}

type admifaceProcessorUserRoom struct {
	handler Admiface
}

func (p *admifaceProcessorUserRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err272 error
	args := AdmifaceUserRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "UserRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceUserRoomResult{}
	if retval, err2 := p.handler.UserRoom(ctx, args.Fromnode, args.Domain); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc273 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UserRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "UserRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err272 = thrift.WrapTException(err2)
		}
		if err2 := _exc273.Write(ctx, oprot); _write_err272 == nil && err2 != nil {
			_write_err272 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err272 == nil && err2 != nil {
			_write_err272 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err272 == nil && err2 != nil {
			_write_err272 = thrift.WrapTException(err2)
		}
		if _write_err272 != nil {
			return false, thrift.WrapTException(_write_err272)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "UserRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err272 == nil && err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err272 == nil && err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err272 == nil && err2 != nil {
		_write_err272 = thrift.WrapTException(err2)
	}
	if _write_err272 != nil {
		return false, thrift.WrapTException(_write_err272)
	}
	return true, err
}

type admifaceProcessorRoomUsers struct {
	handler Admiface
}

func (p *admifaceProcessorRoomUsers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err274 error
	args := AdmifaceRoomUsersArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "RoomUsers", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceRoomUsersResult{}
	if retval, err2 := p.handler.RoomUsers(ctx, args.Fromnode, args.Domain); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc275 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RoomUsers: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "RoomUsers", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err274 = thrift.WrapTException(err2)
		}
		if err2 := _exc275.Write(ctx, oprot); _write_err274 == nil && err2 != nil {
			_write_err274 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err274 == nil && err2 != nil {
			_write_err274 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err274 == nil && err2 != nil {
			_write_err274 = thrift.WrapTException(err2)
		}
		if _write_err274 != nil {
			return false, thrift.WrapTException(_write_err274)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "RoomUsers", thrift.REPLY, seqId); err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err274 == nil && err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err274 == nil && err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err274 == nil && err2 != nil {
		_write_err274 = thrift.WrapTException(err2)
	}
	if _write_err274 != nil {
		return false, thrift.WrapTException(_write_err274)
	}
	return true, err
}

type admifaceProcessorCreateRoom struct {
	handler Admiface
}

func (p *admifaceProcessorCreateRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err276 error
	args := AdmifaceCreateRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "CreateRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceCreateRoomResult{}
	if retval, err2 := p.handler.CreateRoom(ctx, args.Fromnode, args.Domain, args.Topic, args.Gtype); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc277 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "CreateRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err276 = thrift.WrapTException(err2)
		}
		if err2 := _exc277.Write(ctx, oprot); _write_err276 == nil && err2 != nil {
			_write_err276 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err276 == nil && err2 != nil {
			_write_err276 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err276 == nil && err2 != nil {
			_write_err276 = thrift.WrapTException(err2)
		}
		if _write_err276 != nil {
			return false, thrift.WrapTException(_write_err276)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "CreateRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err276 == nil && err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err276 == nil && err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err276 == nil && err2 != nil {
		_write_err276 = thrift.WrapTException(err2)
	}
	if _write_err276 != nil {
		return false, thrift.WrapTException(_write_err276)
	}
	return true, err
}

type admifaceProcessorAddRoom struct {
	handler Admiface
}

func (p *admifaceProcessorAddRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err278 error
	args := AdmifaceAddRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "AddRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceAddRoomResult{}
	if retval, err2 := p.handler.AddRoom(ctx, args.Fromnode, args.Domain, args.RoomNode, args.Msg); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc279 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "AddRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err278 = thrift.WrapTException(err2)
		}
		if err2 := _exc279.Write(ctx, oprot); _write_err278 == nil && err2 != nil {
			_write_err278 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err278 == nil && err2 != nil {
			_write_err278 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err278 == nil && err2 != nil {
			_write_err278 = thrift.WrapTException(err2)
		}
		if _write_err278 != nil {
			return false, thrift.WrapTException(_write_err278)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "AddRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err278 == nil && err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err278 == nil && err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err278 == nil && err2 != nil {
		_write_err278 = thrift.WrapTException(err2)
	}
	if _write_err278 != nil {
		return false, thrift.WrapTException(_write_err278)
	}
	return true, err
}

type admifaceProcessorPullInRoom struct {
	handler Admiface
}

func (p *admifaceProcessorPullInRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err280 error
	args := AdmifacePullInRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "PullInRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifacePullInRoomResult{}
	if retval, err2 := p.handler.PullInRoom(ctx, args.Fromnode, args.Domain, args.RoomNode, args.ToNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc281 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PullInRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "PullInRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err280 = thrift.WrapTException(err2)
		}
		if err2 := _exc281.Write(ctx, oprot); _write_err280 == nil && err2 != nil {
			_write_err280 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err280 == nil && err2 != nil {
			_write_err280 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err280 == nil && err2 != nil {
			_write_err280 = thrift.WrapTException(err2)
		}
		if _write_err280 != nil {
			return false, thrift.WrapTException(_write_err280)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "PullInRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err280 == nil && err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err280 == nil && err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err280 == nil && err2 != nil {
		_write_err280 = thrift.WrapTException(err2)
	}
	if _write_err280 != nil {
		return false, thrift.WrapTException(_write_err280)
	}
	return true, err
}

type admifaceProcessorRejectRoom struct {
	handler Admiface
}

func (p *admifaceProcessorRejectRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err282 error
	args := AdmifaceRejectRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "RejectRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceRejectRoomResult{}
	if retval, err2 := p.handler.RejectRoom(ctx, args.Fromnode, args.Domain, args.RoomNode, args.ToNode, args.Msg); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc283 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RejectRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "RejectRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err282 = thrift.WrapTException(err2)
		}
		if err2 := _exc283.Write(ctx, oprot); _write_err282 == nil && err2 != nil {
			_write_err282 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err282 == nil && err2 != nil {
			_write_err282 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err282 == nil && err2 != nil {
			_write_err282 = thrift.WrapTException(err2)
		}
		if _write_err282 != nil {
			return false, thrift.WrapTException(_write_err282)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "RejectRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err282 == nil && err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err282 == nil && err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err282 == nil && err2 != nil {
		_write_err282 = thrift.WrapTException(err2)
	}
	if _write_err282 != nil {
		return false, thrift.WrapTException(_write_err282)
	}
	return true, err
}

type admifaceProcessorKickRoom struct {
	handler Admiface
}

func (p *admifaceProcessorKickRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err284 error
	args := AdmifaceKickRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "KickRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceKickRoomResult{}
	if retval, err2 := p.handler.KickRoom(ctx, args.Fromnode, args.Domain, args.RoomNode, args.ToNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc285 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing KickRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "KickRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err284 = thrift.WrapTException(err2)
		}
		if err2 := _exc285.Write(ctx, oprot); _write_err284 == nil && err2 != nil {
			_write_err284 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err284 == nil && err2 != nil {
			_write_err284 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err284 == nil && err2 != nil {
			_write_err284 = thrift.WrapTException(err2)
		}
		if _write_err284 != nil {
			return false, thrift.WrapTException(_write_err284)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "KickRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err284 == nil && err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err284 == nil && err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err284 == nil && err2 != nil {
		_write_err284 = thrift.WrapTException(err2)
	}
	if _write_err284 != nil {
		return false, thrift.WrapTException(_write_err284)
	}
	return true, err
}

type admifaceProcessorLeaveRoom struct {
	handler Admiface
}

func (p *admifaceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err286 error
	args := AdmifaceLeaveRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "LeaveRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceLeaveRoomResult{}
	if retval, err2 := p.handler.LeaveRoom(ctx, args.Fromnode, args.Domain, args.RoomNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc287 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing LeaveRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "LeaveRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err286 = thrift.WrapTException(err2)
		}
		if err2 := _exc287.Write(ctx, oprot); _write_err286 == nil && err2 != nil {
			_write_err286 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err286 == nil && err2 != nil {
			_write_err286 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err286 == nil && err2 != nil {
			_write_err286 = thrift.WrapTException(err2)
		}
		if _write_err286 != nil {
			return false, thrift.WrapTException(_write_err286)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "LeaveRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err286 == nil && err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err286 == nil && err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err286 == nil && err2 != nil {
		_write_err286 = thrift.WrapTException(err2)
	}
	if _write_err286 != nil {
		return false, thrift.WrapTException(_write_err286)
	}
	return true, err
}

type admifaceProcessorCancelRoom struct {
	handler Admiface
}

func (p *admifaceProcessorCancelRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err288 error
	args := AdmifaceCancelRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "CancelRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceCancelRoomResult{}
	if retval, err2 := p.handler.CancelRoom(ctx, args.Fromnode, args.Domain, args.RoomNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc289 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CancelRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "CancelRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err288 = thrift.WrapTException(err2)
		}
		if err2 := _exc289.Write(ctx, oprot); _write_err288 == nil && err2 != nil {
			_write_err288 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err288 == nil && err2 != nil {
			_write_err288 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err288 == nil && err2 != nil {
			_write_err288 = thrift.WrapTException(err2)
		}
		if _write_err288 != nil {
			return false, thrift.WrapTException(_write_err288)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "CancelRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err288 == nil && err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err288 == nil && err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err288 == nil && err2 != nil {
		_write_err288 = thrift.WrapTException(err2)
	}
	if _write_err288 != nil {
		return false, thrift.WrapTException(_write_err288)
	}
	return true, err
}

type admifaceProcessorBlockRoom struct {
	handler Admiface
}

func (p *admifaceProcessorBlockRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err290 error
	args := AdmifaceBlockRoomArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "BlockRoom", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceBlockRoomResult{}
	if retval, err2 := p.handler.BlockRoom(ctx, args.Fromnode, args.Domain, args.RoomNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc291 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BlockRoom: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "BlockRoom", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err290 = thrift.WrapTException(err2)
		}
		if err2 := _exc291.Write(ctx, oprot); _write_err290 == nil && err2 != nil {
			_write_err290 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err290 == nil && err2 != nil {
			_write_err290 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err290 == nil && err2 != nil {
			_write_err290 = thrift.WrapTException(err2)
		}
		if _write_err290 != nil {
			return false, thrift.WrapTException(_write_err290)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "BlockRoom", thrift.REPLY, seqId); err2 != nil {
		_write_err290 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err290 == nil && err2 != nil {
		_write_err290 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err290 == nil && err2 != nil {
		_write_err290 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err290 == nil && err2 != nil {
		_write_err290 = thrift.WrapTException(err2)
	}
	if _write_err290 != nil {
		return false, thrift.WrapTException(_write_err290)
	}
	return true, err
}

type admifaceProcessorBlockRoomMember struct {
	handler Admiface
}

func (p *admifaceProcessorBlockRoomMember) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err292 error
	args := AdmifaceBlockRoomMemberArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "BlockRoomMember", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceBlockRoomMemberResult{}
	if retval, err2 := p.handler.BlockRoomMember(ctx, args.Fromnode, args.Domain, args.RoomNode, args.ToNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc293 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BlockRoomMember: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "BlockRoomMember", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err292 = thrift.WrapTException(err2)
		}
		if err2 := _exc293.Write(ctx, oprot); _write_err292 == nil && err2 != nil {
			_write_err292 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err292 == nil && err2 != nil {
			_write_err292 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err292 == nil && err2 != nil {
			_write_err292 = thrift.WrapTException(err2)
		}
		if _write_err292 != nil {
			return false, thrift.WrapTException(_write_err292)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "BlockRoomMember", thrift.REPLY, seqId); err2 != nil {
		_write_err292 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err292 == nil && err2 != nil {
		_write_err292 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err292 == nil && err2 != nil {
		_write_err292 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err292 == nil && err2 != nil {
		_write_err292 = thrift.WrapTException(err2)
	}
	if _write_err292 != nil {
		return false, thrift.WrapTException(_write_err292)
	}
	return true, err
}

type admifaceProcessorBlockRosterList struct {
	handler Admiface
}

func (p *admifaceProcessorBlockRosterList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err294 error
	args := AdmifaceBlockRosterListArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "BlockRosterList", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceBlockRosterListResult{}
	if retval, err2 := p.handler.BlockRosterList(ctx, args.Fromnode, args.Domain); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc295 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BlockRosterList: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "BlockRosterList", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err294 = thrift.WrapTException(err2)
		}
		if err2 := _exc295.Write(ctx, oprot); _write_err294 == nil && err2 != nil {
			_write_err294 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err294 == nil && err2 != nil {
			_write_err294 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err294 == nil && err2 != nil {
			_write_err294 = thrift.WrapTException(err2)
		}
		if _write_err294 != nil {
			return false, thrift.WrapTException(_write_err294)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "BlockRosterList", thrift.REPLY, seqId); err2 != nil {
		_write_err294 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err294 == nil && err2 != nil {
		_write_err294 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err294 == nil && err2 != nil {
		_write_err294 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err294 == nil && err2 != nil {
		_write_err294 = thrift.WrapTException(err2)
	}
	if _write_err294 != nil {
		return false, thrift.WrapTException(_write_err294)
	}
	return true, err
}

type admifaceProcessorBlockRoomList struct {
	handler Admiface
}

func (p *admifaceProcessorBlockRoomList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err296 error
	args := AdmifaceBlockRoomListArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "BlockRoomList", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceBlockRoomListResult{}
	if retval, err2 := p.handler.BlockRoomList(ctx, args.Fromnode, args.Domain); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc297 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BlockRoomList: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "BlockRoomList", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err296 = thrift.WrapTException(err2)
		}
		if err2 := _exc297.Write(ctx, oprot); _write_err296 == nil && err2 != nil {
			_write_err296 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err296 == nil && err2 != nil {
			_write_err296 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err296 == nil && err2 != nil {
			_write_err296 = thrift.WrapTException(err2)
		}
		if _write_err296 != nil {
			return false, thrift.WrapTException(_write_err296)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "BlockRoomList", thrift.REPLY, seqId); err2 != nil {
		_write_err296 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err296 == nil && err2 != nil {
		_write_err296 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err296 == nil && err2 != nil {
		_write_err296 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err296 == nil && err2 != nil {
		_write_err296 = thrift.WrapTException(err2)
	}
	if _write_err296 != nil {
		return false, thrift.WrapTException(_write_err296)
	}
	return true, err
}

type admifaceProcessorBlockRoomMemberlist struct {
	handler Admiface
}

func (p *admifaceProcessorBlockRoomMemberlist) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err298 error
	args := AdmifaceBlockRoomMemberlistArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "BlockRoomMemberlist", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceBlockRoomMemberlistResult{}
	if retval, err2 := p.handler.BlockRoomMemberlist(ctx, args.Fromnode, args.Domain, args.RoomNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc299 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BlockRoomMemberlist: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "BlockRoomMemberlist", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err298 = thrift.WrapTException(err2)
		}
		if err2 := _exc299.Write(ctx, oprot); _write_err298 == nil && err2 != nil {
			_write_err298 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err298 == nil && err2 != nil {
			_write_err298 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err298 == nil && err2 != nil {
			_write_err298 = thrift.WrapTException(err2)
		}
		if _write_err298 != nil {
			return false, thrift.WrapTException(_write_err298)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "BlockRoomMemberlist", thrift.REPLY, seqId); err2 != nil {
		_write_err298 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err298 == nil && err2 != nil {
		_write_err298 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err298 == nil && err2 != nil {
		_write_err298 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err298 == nil && err2 != nil {
		_write_err298 = thrift.WrapTException(err2)
	}
	if _write_err298 != nil {
		return false, thrift.WrapTException(_write_err298)
	}
	return true, err
}

type admifaceProcessorVirtualroomRegister struct {
	handler Admiface
}

func (p *admifaceProcessorVirtualroomRegister) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err300 error
	args := AdmifaceVirtualroomRegisterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "VirtualroomRegister", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceVirtualroomRegisterResult{}
	if retval, err2 := p.handler.VirtualroomRegister(ctx, args.Fromnode, args.Domain); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc301 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VirtualroomRegister: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomRegister", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err300 = thrift.WrapTException(err2)
		}
		if err2 := _exc301.Write(ctx, oprot); _write_err300 == nil && err2 != nil {
			_write_err300 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err300 == nil && err2 != nil {
			_write_err300 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err300 == nil && err2 != nil {
			_write_err300 = thrift.WrapTException(err2)
		}
		if _write_err300 != nil {
			return false, thrift.WrapTException(_write_err300)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomRegister", thrift.REPLY, seqId); err2 != nil {
		_write_err300 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err300 == nil && err2 != nil {
		_write_err300 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err300 == nil && err2 != nil {
		_write_err300 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err300 == nil && err2 != nil {
		_write_err300 = thrift.WrapTException(err2)
	}
	if _write_err300 != nil {
		return false, thrift.WrapTException(_write_err300)
	}
	return true, err
}

type admifaceProcessorVirtualroomRemove struct {
	handler Admiface
}

func (p *admifaceProcessorVirtualroomRemove) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err302 error
	args := AdmifaceVirtualroomRemoveArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "VirtualroomRemove", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceVirtualroomRemoveResult{}
	if retval, err2 := p.handler.VirtualroomRemove(ctx, args.Fromnode, args.Domain, args.VNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc303 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VirtualroomRemove: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomRemove", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err302 = thrift.WrapTException(err2)
		}
		if err2 := _exc303.Write(ctx, oprot); _write_err302 == nil && err2 != nil {
			_write_err302 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err302 == nil && err2 != nil {
			_write_err302 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err302 == nil && err2 != nil {
			_write_err302 = thrift.WrapTException(err2)
		}
		if _write_err302 != nil {
			return false, thrift.WrapTException(_write_err302)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomRemove", thrift.REPLY, seqId); err2 != nil {
		_write_err302 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err302 == nil && err2 != nil {
		_write_err302 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err302 == nil && err2 != nil {
		_write_err302 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err302 == nil && err2 != nil {
		_write_err302 = thrift.WrapTException(err2)
	}
	if _write_err302 != nil {
		return false, thrift.WrapTException(_write_err302)
	}
	return true, err
}

type admifaceProcessorVirtualroomAddAuth struct {
	handler Admiface
}

func (p *admifaceProcessorVirtualroomAddAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err304 error
	args := AdmifaceVirtualroomAddAuthArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "VirtualroomAddAuth", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceVirtualroomAddAuthResult{}
	if retval, err2 := p.handler.VirtualroomAddAuth(ctx, args.Fromnode, args.Domain, args.VNode, args.ToNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc305 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VirtualroomAddAuth: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomAddAuth", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err304 = thrift.WrapTException(err2)
		}
		if err2 := _exc305.Write(ctx, oprot); _write_err304 == nil && err2 != nil {
			_write_err304 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err304 == nil && err2 != nil {
			_write_err304 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err304 == nil && err2 != nil {
			_write_err304 = thrift.WrapTException(err2)
		}
		if _write_err304 != nil {
			return false, thrift.WrapTException(_write_err304)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomAddAuth", thrift.REPLY, seqId); err2 != nil {
		_write_err304 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err304 == nil && err2 != nil {
		_write_err304 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err304 == nil && err2 != nil {
		_write_err304 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err304 == nil && err2 != nil {
		_write_err304 = thrift.WrapTException(err2)
	}
	if _write_err304 != nil {
		return false, thrift.WrapTException(_write_err304)
	}
	return true, err
}

type admifaceProcessorVirtualroomDelAuth struct {
	handler Admiface
}

func (p *admifaceProcessorVirtualroomDelAuth) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err306 error
	args := AdmifaceVirtualroomDelAuthArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "VirtualroomDelAuth", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceVirtualroomDelAuthResult{}
	if retval, err2 := p.handler.VirtualroomDelAuth(ctx, args.Fromnode, args.Domain, args.VNode, args.ToNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc307 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VirtualroomDelAuth: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomDelAuth", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err306 = thrift.WrapTException(err2)
		}
		if err2 := _exc307.Write(ctx, oprot); _write_err306 == nil && err2 != nil {
			_write_err306 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err306 == nil && err2 != nil {
			_write_err306 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err306 == nil && err2 != nil {
			_write_err306 = thrift.WrapTException(err2)
		}
		if _write_err306 != nil {
			return false, thrift.WrapTException(_write_err306)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomDelAuth", thrift.REPLY, seqId); err2 != nil {
		_write_err306 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err306 == nil && err2 != nil {
		_write_err306 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err306 == nil && err2 != nil {
		_write_err306 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err306 == nil && err2 != nil {
		_write_err306 = thrift.WrapTException(err2)
	}
	if _write_err306 != nil {
		return false, thrift.WrapTException(_write_err306)
	}
	return true, err
}

type admifaceProcessorVirtualroomSub struct {
	handler Admiface
}

func (p *admifaceProcessorVirtualroomSub) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err308 error
	args := AdmifaceVirtualroomSubArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "VirtualroomSub", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceVirtualroomSubResult{}
	if retval, err2 := p.handler.VirtualroomSub(ctx, args.Wsid, args.Fromnode, args.Domain, args.VNode, args.SubType); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc309 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VirtualroomSub: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomSub", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err308 = thrift.WrapTException(err2)
		}
		if err2 := _exc309.Write(ctx, oprot); _write_err308 == nil && err2 != nil {
			_write_err308 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err308 == nil && err2 != nil {
			_write_err308 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err308 == nil && err2 != nil {
			_write_err308 = thrift.WrapTException(err2)
		}
		if _write_err308 != nil {
			return false, thrift.WrapTException(_write_err308)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomSub", thrift.REPLY, seqId); err2 != nil {
		_write_err308 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err308 == nil && err2 != nil {
		_write_err308 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err308 == nil && err2 != nil {
		_write_err308 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err308 == nil && err2 != nil {
		_write_err308 = thrift.WrapTException(err2)
	}
	if _write_err308 != nil {
		return false, thrift.WrapTException(_write_err308)
	}
	return true, err
}

type admifaceProcessorVirtualroomUnSub struct {
	handler Admiface
}

func (p *admifaceProcessorVirtualroomUnSub) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err310 error
	args := AdmifaceVirtualroomUnSubArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "VirtualroomUnSub", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceVirtualroomUnSubResult{}
	if retval, err2 := p.handler.VirtualroomUnSub(ctx, args.Wsid, args.Fromnode, args.Domain, args.VNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc311 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VirtualroomUnSub: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomUnSub", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err310 = thrift.WrapTException(err2)
		}
		if err2 := _exc311.Write(ctx, oprot); _write_err310 == nil && err2 != nil {
			_write_err310 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err310 == nil && err2 != nil {
			_write_err310 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err310 == nil && err2 != nil {
			_write_err310 = thrift.WrapTException(err2)
		}
		if _write_err310 != nil {
			return false, thrift.WrapTException(_write_err310)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "VirtualroomUnSub", thrift.REPLY, seqId); err2 != nil {
		_write_err310 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err310 == nil && err2 != nil {
		_write_err310 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err310 == nil && err2 != nil {
		_write_err310 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err310 == nil && err2 != nil {
		_write_err310 = thrift.WrapTException(err2)
	}
	if _write_err310 != nil {
		return false, thrift.WrapTException(_write_err310)
	}
	return true, err
}

type admifaceProcessorAuthroster struct {
	handler Admiface
}

func (p *admifaceProcessorAuthroster) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err312 error
	args := AdmifaceAuthrosterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Authroster", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceAuthrosterResult{}
	if retval, err2 := p.handler.Authroster(ctx, args.Fromnode, args.Domain, args.Tonode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc313 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Authroster: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Authroster", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err312 = thrift.WrapTException(err2)
		}
		if err2 := _exc313.Write(ctx, oprot); _write_err312 == nil && err2 != nil {
			_write_err312 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err312 == nil && err2 != nil {
			_write_err312 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err312 == nil && err2 != nil {
			_write_err312 = thrift.WrapTException(err2)
		}
		if _write_err312 != nil {
			return false, thrift.WrapTException(_write_err312)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Authroster", thrift.REPLY, seqId); err2 != nil {
		_write_err312 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err312 == nil && err2 != nil {
		_write_err312 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err312 == nil && err2 != nil {
		_write_err312 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err312 == nil && err2 != nil {
		_write_err312 = thrift.WrapTException(err2)
	}
	if _write_err312 != nil {
		return false, thrift.WrapTException(_write_err312)
	}
	return true, err
}

type admifaceProcessorAuthgroupuser struct {
	handler Admiface
}

func (p *admifaceProcessorAuthgroupuser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err314 error
	args := AdmifaceAuthgroupuserArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Authgroupuser", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := AdmifaceAuthgroupuserResult{}
	if retval, err2 := p.handler.Authgroupuser(ctx, args.Fromnode, args.Domain, args.RoomNode); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc315 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Authgroupuser: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Authgroupuser", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err314 = thrift.WrapTException(err2)
		}
		if err2 := _exc315.Write(ctx, oprot); _write_err314 == nil && err2 != nil {
			_write_err314 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err314 == nil && err2 != nil {
			_write_err314 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err314 == nil && err2 != nil {
			_write_err314 = thrift.WrapTException(err2)
		}
		if _write_err314 != nil {
			return false, thrift.WrapTException(_write_err314)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Authgroupuser", thrift.REPLY, seqId); err2 != nil {
		_write_err314 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err314 == nil && err2 != nil {
		_write_err314 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err314 == nil && err2 != nil {
		_write_err314 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err314 == nil && err2 != nil {
		_write_err314 = thrift.WrapTException(err2)
	}
	if _write_err314 != nil {
		return false, thrift.WrapTException(_write_err314)
	}
	return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Ab
// 
type AdmifaceAuthArgs struct {
	Ab *AuthBean `thrift:"ab,1" db:"ab" json:"ab"`
}

func NewAdmifaceAuthArgs() *AdmifaceAuthArgs {
	return &AdmifaceAuthArgs{}
}

var AdmifaceAuthArgs_Ab_DEFAULT *AuthBean

func (p *AdmifaceAuthArgs) GetAb() *AuthBean {
	if !p.IsSetAb() {
		return AdmifaceAuthArgs_Ab_DEFAULT
	}
	return p.Ab
}

func (p *AdmifaceAuthArgs) IsSetAb() bool {
	return p.Ab != nil
}

func (p *AdmifaceAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAuthArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ab = &AuthBean{}
	if err := p.Ab.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
	}
	return nil
}

func (p *AdmifaceAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Auth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ab", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ab: ", p), err)
	}
	if err := p.Ab.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ab: ", p), err)
	}
	return err
}

func (p *AdmifaceAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAuthArgs(%+v)", *p)
}

func (p *AdmifaceAuthArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAuthArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceAuthResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceAuthResult() *AdmifaceAuthResult {
	return &AdmifaceAuthResult{}
}

var AdmifaceAuthResult_Success_DEFAULT *AdmAck

func (p *AdmifaceAuthResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAuthResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Auth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAuthResult(%+v)", *p)
}

func (p *AdmifaceAuthResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAuthResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Oldpwd
//  - Newpwd_
// 
type AdmifaceModifyPwdArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Oldpwd string `thrift:"oldpwd,3" db:"oldpwd" json:"oldpwd"`
	Newpwd_ string `thrift:"newpwd,4" db:"newpwd" json:"newpwd"`
}

func NewAdmifaceModifyPwdArgs() *AdmifaceModifyPwdArgs {
	return &AdmifaceModifyPwdArgs{}
}



func (p *AdmifaceModifyPwdArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceModifyPwdArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceModifyPwdArgs) GetOldpwd() string {
	return p.Oldpwd
}



func (p *AdmifaceModifyPwdArgs) GetNewpwd_() string {
	return p.Newpwd_
}

func (p *AdmifaceModifyPwdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceModifyPwdArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceModifyPwdArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceModifyPwdArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Oldpwd = v
	}
	return nil
}

func (p *AdmifaceModifyPwdArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Newpwd_ = v
	}
	return nil
}

func (p *AdmifaceModifyPwdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ModifyPwd_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceModifyPwdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceModifyPwdArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceModifyPwdArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "oldpwd", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oldpwd: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Oldpwd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oldpwd (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oldpwd: ", p), err)
	}
	return err
}

func (p *AdmifaceModifyPwdArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "newpwd", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:newpwd: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Newpwd_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newpwd (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:newpwd: ", p), err)
	}
	return err
}

func (p *AdmifaceModifyPwdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceModifyPwdArgs(%+v)", *p)
}

func (p *AdmifaceModifyPwdArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceModifyPwdArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyPwdArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceModifyPwdResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceModifyPwdResult() *AdmifaceModifyPwdResult {
	return &AdmifaceModifyPwdResult{}
}

var AdmifaceModifyPwdResult_Success_DEFAULT *AdmAck

func (p *AdmifaceModifyPwdResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceModifyPwdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceModifyPwdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceModifyPwdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceModifyPwdResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceModifyPwdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ModifyPwd_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceModifyPwdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceModifyPwdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceModifyPwdResult(%+v)", *p)
}

func (p *AdmifaceModifyPwdResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceModifyPwdResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyPwdResult)(nil)

type AdmifacePingArgs struct {
}

func NewAdmifacePingArgs() *AdmifacePingArgs {
	return &AdmifacePingArgs{}
}

func (p *AdmifacePingArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePingArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePingArgs(%+v)", *p)
}

func (p *AdmifacePingArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePingArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePingArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifacePingResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifacePingResult() *AdmifacePingResult {
	return &AdmifacePingResult{}
}

var AdmifacePingResult_Success_DEFAULT *AdmAck

func (p *AdmifacePingResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifacePingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifacePingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifacePingResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePingResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifacePingResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePingResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifacePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePingResult(%+v)", *p)
}

func (p *AdmifacePingResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePingResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePingResult)(nil)

// Attributes:
//  - Atoken
// 
type AdmifaceTokenArgs struct {
	Atoken *AdmToken `thrift:"atoken,1" db:"atoken" json:"atoken"`
}

func NewAdmifaceTokenArgs() *AdmifaceTokenArgs {
	return &AdmifaceTokenArgs{}
}

var AdmifaceTokenArgs_Atoken_DEFAULT *AdmToken

func (p *AdmifaceTokenArgs) GetAtoken() *AdmToken {
	if !p.IsSetAtoken() {
		return AdmifaceTokenArgs_Atoken_DEFAULT
	}
	return p.Atoken
}

func (p *AdmifaceTokenArgs) IsSetAtoken() bool {
	return p.Atoken != nil
}

func (p *AdmifaceTokenArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceTokenArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Atoken = &AdmToken{}
	if err := p.Atoken.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Atoken), err)
	}
	return nil
}

func (p *AdmifaceTokenArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Token_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceTokenArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "atoken", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:atoken: ", p), err)
	}
	if err := p.Atoken.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Atoken), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:atoken: ", p), err)
	}
	return err
}

func (p *AdmifaceTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceTokenArgs(%+v)", *p)
}

func (p *AdmifaceTokenArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceTokenArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTokenArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceTokenResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceTokenResult() *AdmifaceTokenResult {
	return &AdmifaceTokenResult{}
}

var AdmifaceTokenResult_Success_DEFAULT *AdmAck

func (p *AdmifaceTokenResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceTokenResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceTokenResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceTokenResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Token_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceTokenResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceTokenResult(%+v)", *p)
}

func (p *AdmifaceTokenResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceTokenResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTokenResult)(nil)

// Attributes:
//  - Amb
// 
type AdmifaceTimMessageBroadcastArgs struct {
	Amb *AdmMessageBroadcast `thrift:"amb,1" db:"amb" json:"amb"`
}

func NewAdmifaceTimMessageBroadcastArgs() *AdmifaceTimMessageBroadcastArgs {
	return &AdmifaceTimMessageBroadcastArgs{}
}

var AdmifaceTimMessageBroadcastArgs_Amb_DEFAULT *AdmMessageBroadcast

func (p *AdmifaceTimMessageBroadcastArgs) GetAmb() *AdmMessageBroadcast {
	if !p.IsSetAmb() {
		return AdmifaceTimMessageBroadcastArgs_Amb_DEFAULT
	}
	return p.Amb
}

func (p *AdmifaceTimMessageBroadcastArgs) IsSetAmb() bool {
	return p.Amb != nil
}

func (p *AdmifaceTimMessageBroadcastArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceTimMessageBroadcastArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Amb = &AdmMessageBroadcast{}
	if err := p.Amb.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Amb), err)
	}
	return nil
}

func (p *AdmifaceTimMessageBroadcastArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimMessageBroadcast_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceTimMessageBroadcastArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "amb", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amb: ", p), err)
	}
	if err := p.Amb.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Amb), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amb: ", p), err)
	}
	return err
}

func (p *AdmifaceTimMessageBroadcastArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceTimMessageBroadcastArgs(%+v)", *p)
}

func (p *AdmifaceTimMessageBroadcastArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceTimMessageBroadcastArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTimMessageBroadcastArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceTimMessageBroadcastResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceTimMessageBroadcastResult() *AdmifaceTimMessageBroadcastResult {
	return &AdmifaceTimMessageBroadcastResult{}
}

var AdmifaceTimMessageBroadcastResult_Success_DEFAULT *AdmAck

func (p *AdmifaceTimMessageBroadcastResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceTimMessageBroadcastResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceTimMessageBroadcastResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceTimMessageBroadcastResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceTimMessageBroadcastResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceTimMessageBroadcastResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimMessageBroadcast_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceTimMessageBroadcastResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceTimMessageBroadcastResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceTimMessageBroadcastResult(%+v)", *p)
}

func (p *AdmifaceTimMessageBroadcastResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceTimMessageBroadcastResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTimMessageBroadcastResult)(nil)

// Attributes:
//  - Apb
// 
type AdmifaceTimPresenceBroadcastArgs struct {
	Apb *AdmPresenceBroadcast `thrift:"apb,1" db:"apb" json:"apb"`
}

func NewAdmifaceTimPresenceBroadcastArgs() *AdmifaceTimPresenceBroadcastArgs {
	return &AdmifaceTimPresenceBroadcastArgs{}
}

var AdmifaceTimPresenceBroadcastArgs_Apb_DEFAULT *AdmPresenceBroadcast

func (p *AdmifaceTimPresenceBroadcastArgs) GetApb() *AdmPresenceBroadcast {
	if !p.IsSetApb() {
		return AdmifaceTimPresenceBroadcastArgs_Apb_DEFAULT
	}
	return p.Apb
}

func (p *AdmifaceTimPresenceBroadcastArgs) IsSetApb() bool {
	return p.Apb != nil
}

func (p *AdmifaceTimPresenceBroadcastArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceTimPresenceBroadcastArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Apb = &AdmPresenceBroadcast{}
	if err := p.Apb.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Apb), err)
	}
	return nil
}

func (p *AdmifaceTimPresenceBroadcastArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimPresenceBroadcast_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceTimPresenceBroadcastArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "apb", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:apb: ", p), err)
	}
	if err := p.Apb.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Apb), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:apb: ", p), err)
	}
	return err
}

func (p *AdmifaceTimPresenceBroadcastArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceTimPresenceBroadcastArgs(%+v)", *p)
}

func (p *AdmifaceTimPresenceBroadcastArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceTimPresenceBroadcastArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTimPresenceBroadcastArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceTimPresenceBroadcastResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceTimPresenceBroadcastResult() *AdmifaceTimPresenceBroadcastResult {
	return &AdmifaceTimPresenceBroadcastResult{}
}

var AdmifaceTimPresenceBroadcastResult_Success_DEFAULT *AdmAck

func (p *AdmifaceTimPresenceBroadcastResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceTimPresenceBroadcastResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceTimPresenceBroadcastResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceTimPresenceBroadcastResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceTimPresenceBroadcastResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceTimPresenceBroadcastResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimPresenceBroadcast_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceTimPresenceBroadcastResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceTimPresenceBroadcastResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceTimPresenceBroadcastResult(%+v)", *p)
}

func (p *AdmifaceTimPresenceBroadcastResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceTimPresenceBroadcastResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceTimPresenceBroadcastResult)(nil)

// Attributes:
//  - Apm
// 
type AdmifaceProxyMessageArgs struct {
	Apm *AdmProxyMessage `thrift:"apm,1" db:"apm" json:"apm"`
}

func NewAdmifaceProxyMessageArgs() *AdmifaceProxyMessageArgs {
	return &AdmifaceProxyMessageArgs{}
}

var AdmifaceProxyMessageArgs_Apm_DEFAULT *AdmProxyMessage

func (p *AdmifaceProxyMessageArgs) GetApm() *AdmProxyMessage {
	if !p.IsSetApm() {
		return AdmifaceProxyMessageArgs_Apm_DEFAULT
	}
	return p.Apm
}

func (p *AdmifaceProxyMessageArgs) IsSetApm() bool {
	return p.Apm != nil
}

func (p *AdmifaceProxyMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceProxyMessageArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Apm = &AdmProxyMessage{}
	if err := p.Apm.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Apm), err)
	}
	return nil
}

func (p *AdmifaceProxyMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ProxyMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceProxyMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "apm", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:apm: ", p), err)
	}
	if err := p.Apm.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Apm), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:apm: ", p), err)
	}
	return err
}

func (p *AdmifaceProxyMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceProxyMessageArgs(%+v)", *p)
}

func (p *AdmifaceProxyMessageArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceProxyMessageArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceProxyMessageArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceProxyMessageResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceProxyMessageResult() *AdmifaceProxyMessageResult {
	return &AdmifaceProxyMessageResult{}
}

var AdmifaceProxyMessageResult_Success_DEFAULT *AdmAck

func (p *AdmifaceProxyMessageResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceProxyMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceProxyMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceProxyMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceProxyMessageResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceProxyMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ProxyMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceProxyMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceProxyMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceProxyMessageResult(%+v)", *p)
}

func (p *AdmifaceProxyMessageResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceProxyMessageResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceProxyMessageResult)(nil)

// Attributes:
//  - Ab
// 
type AdmifaceRegisterArgs struct {
	Ab *AuthBean `thrift:"ab,1" db:"ab" json:"ab"`
}

func NewAdmifaceRegisterArgs() *AdmifaceRegisterArgs {
	return &AdmifaceRegisterArgs{}
}

var AdmifaceRegisterArgs_Ab_DEFAULT *AuthBean

func (p *AdmifaceRegisterArgs) GetAb() *AuthBean {
	if !p.IsSetAb() {
		return AdmifaceRegisterArgs_Ab_DEFAULT
	}
	return p.Ab
}

func (p *AdmifaceRegisterArgs) IsSetAb() bool {
	return p.Ab != nil
}

func (p *AdmifaceRegisterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRegisterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ab = &AuthBean{}
	if err := p.Ab.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ab), err)
	}
	return nil
}

func (p *AdmifaceRegisterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Register_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRegisterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ab", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ab: ", p), err)
	}
	if err := p.Ab.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ab), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ab: ", p), err)
	}
	return err
}

func (p *AdmifaceRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRegisterArgs(%+v)", *p)
}

func (p *AdmifaceRegisterArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRegisterArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRegisterArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceRegisterResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceRegisterResult() *AdmifaceRegisterResult {
	return &AdmifaceRegisterResult{}
}

var AdmifaceRegisterResult_Success_DEFAULT *AdmAck

func (p *AdmifaceRegisterResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceRegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceRegisterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRegisterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceRegisterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Register_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRegisterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRegisterResult(%+v)", *p)
}

func (p *AdmifaceRegisterResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRegisterResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRegisterResult)(nil)

// Attributes:
//  - Amui
// 
type AdmifaceModifyUserInfoArgs struct {
	Amui *AdmModifyUserInfo `thrift:"amui,1" db:"amui" json:"amui"`
}

func NewAdmifaceModifyUserInfoArgs() *AdmifaceModifyUserInfoArgs {
	return &AdmifaceModifyUserInfoArgs{}
}

var AdmifaceModifyUserInfoArgs_Amui_DEFAULT *AdmModifyUserInfo

func (p *AdmifaceModifyUserInfoArgs) GetAmui() *AdmModifyUserInfo {
	if !p.IsSetAmui() {
		return AdmifaceModifyUserInfoArgs_Amui_DEFAULT
	}
	return p.Amui
}

func (p *AdmifaceModifyUserInfoArgs) IsSetAmui() bool {
	return p.Amui != nil
}

func (p *AdmifaceModifyUserInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceModifyUserInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Amui = &AdmModifyUserInfo{}
	if err := p.Amui.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Amui), err)
	}
	return nil
}

func (p *AdmifaceModifyUserInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ModifyUserInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceModifyUserInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "amui", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:amui: ", p), err)
	}
	if err := p.Amui.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Amui), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:amui: ", p), err)
	}
	return err
}

func (p *AdmifaceModifyUserInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceModifyUserInfoArgs(%+v)", *p)
}

func (p *AdmifaceModifyUserInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceModifyUserInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyUserInfoArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceModifyUserInfoResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceModifyUserInfoResult() *AdmifaceModifyUserInfoResult {
	return &AdmifaceModifyUserInfoResult{}
}

var AdmifaceModifyUserInfoResult_Success_DEFAULT *AdmAck

func (p *AdmifaceModifyUserInfoResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceModifyUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceModifyUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceModifyUserInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceModifyUserInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceModifyUserInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ModifyUserInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceModifyUserInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceModifyUserInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceModifyUserInfoResult(%+v)", *p)
}

func (p *AdmifaceModifyUserInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceModifyUserInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyUserInfoResult)(nil)

// Attributes:
//  - Arb
// 
type AdmifaceModifyRoomInfoArgs struct {
	Arb *AdmRoomBean `thrift:"arb,1" db:"arb" json:"arb"`
}

func NewAdmifaceModifyRoomInfoArgs() *AdmifaceModifyRoomInfoArgs {
	return &AdmifaceModifyRoomInfoArgs{}
}

var AdmifaceModifyRoomInfoArgs_Arb_DEFAULT *AdmRoomBean

func (p *AdmifaceModifyRoomInfoArgs) GetArb() *AdmRoomBean {
	if !p.IsSetArb() {
		return AdmifaceModifyRoomInfoArgs_Arb_DEFAULT
	}
	return p.Arb
}

func (p *AdmifaceModifyRoomInfoArgs) IsSetArb() bool {
	return p.Arb != nil
}

func (p *AdmifaceModifyRoomInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceModifyRoomInfoArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Arb = &AdmRoomBean{}
	if err := p.Arb.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arb), err)
	}
	return nil
}

func (p *AdmifaceModifyRoomInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ModifyRoomInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceModifyRoomInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "arb", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:arb: ", p), err)
	}
	if err := p.Arb.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arb), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:arb: ", p), err)
	}
	return err
}

func (p *AdmifaceModifyRoomInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceModifyRoomInfoArgs(%+v)", *p)
}

func (p *AdmifaceModifyRoomInfoArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceModifyRoomInfoArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyRoomInfoArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceModifyRoomInfoResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceModifyRoomInfoResult() *AdmifaceModifyRoomInfoResult {
	return &AdmifaceModifyRoomInfoResult{}
}

var AdmifaceModifyRoomInfoResult_Success_DEFAULT *AdmAck

func (p *AdmifaceModifyRoomInfoResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceModifyRoomInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceModifyRoomInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceModifyRoomInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceModifyRoomInfoResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceModifyRoomInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ModifyRoomInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceModifyRoomInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceModifyRoomInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceModifyRoomInfoResult(%+v)", *p)
}

func (p *AdmifaceModifyRoomInfoResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceModifyRoomInfoResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceModifyRoomInfoResult)(nil)

// Attributes:
//  - Abu
// 
type AdmifaceSysBlockUserArgs struct {
	Abu *AdmSysBlockUser `thrift:"abu,1" db:"abu" json:"abu"`
}

func NewAdmifaceSysBlockUserArgs() *AdmifaceSysBlockUserArgs {
	return &AdmifaceSysBlockUserArgs{}
}

var AdmifaceSysBlockUserArgs_Abu_DEFAULT *AdmSysBlockUser

func (p *AdmifaceSysBlockUserArgs) GetAbu() *AdmSysBlockUser {
	if !p.IsSetAbu() {
		return AdmifaceSysBlockUserArgs_Abu_DEFAULT
	}
	return p.Abu
}

func (p *AdmifaceSysBlockUserArgs) IsSetAbu() bool {
	return p.Abu != nil
}

func (p *AdmifaceSysBlockUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceSysBlockUserArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Abu = &AdmSysBlockUser{}
	if err := p.Abu.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Abu), err)
	}
	return nil
}

func (p *AdmifaceSysBlockUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SysBlockUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceSysBlockUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "abu", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:abu: ", p), err)
	}
	if err := p.Abu.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Abu), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:abu: ", p), err)
	}
	return err
}

func (p *AdmifaceSysBlockUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceSysBlockUserArgs(%+v)", *p)
}

func (p *AdmifaceSysBlockUserArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceSysBlockUserArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceSysBlockUserArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceSysBlockUserResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceSysBlockUserResult() *AdmifaceSysBlockUserResult {
	return &AdmifaceSysBlockUserResult{}
}

var AdmifaceSysBlockUserResult_Success_DEFAULT *AdmAck

func (p *AdmifaceSysBlockUserResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceSysBlockUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceSysBlockUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceSysBlockUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceSysBlockUserResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceSysBlockUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SysBlockUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceSysBlockUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceSysBlockUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceSysBlockUserResult(%+v)", *p)
}

func (p *AdmifaceSysBlockUserResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceSysBlockUserResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceSysBlockUserResult)(nil)

// Attributes:
//  - Au
// 
type AdmifaceOnlineUserArgs struct {
	Au *AdmOnlineUser `thrift:"au,1" db:"au" json:"au"`
}

func NewAdmifaceOnlineUserArgs() *AdmifaceOnlineUserArgs {
	return &AdmifaceOnlineUserArgs{}
}

var AdmifaceOnlineUserArgs_Au_DEFAULT *AdmOnlineUser

func (p *AdmifaceOnlineUserArgs) GetAu() *AdmOnlineUser {
	if !p.IsSetAu() {
		return AdmifaceOnlineUserArgs_Au_DEFAULT
	}
	return p.Au
}

func (p *AdmifaceOnlineUserArgs) IsSetAu() bool {
	return p.Au != nil
}

func (p *AdmifaceOnlineUserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceOnlineUserArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Au = &AdmOnlineUser{}
	if err := p.Au.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Au), err)
	}
	return nil
}

func (p *AdmifaceOnlineUserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "OnlineUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceOnlineUserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "au", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:au: ", p), err)
	}
	if err := p.Au.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Au), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:au: ", p), err)
	}
	return err
}

func (p *AdmifaceOnlineUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceOnlineUserArgs(%+v)", *p)
}

func (p *AdmifaceOnlineUserArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceOnlineUserArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOnlineUserArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceOnlineUserResult struct {
	Success *AdmTidList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceOnlineUserResult() *AdmifaceOnlineUserResult {
	return &AdmifaceOnlineUserResult{}
}

var AdmifaceOnlineUserResult_Success_DEFAULT *AdmTidList

func (p *AdmifaceOnlineUserResult) GetSuccess() *AdmTidList {
	if !p.IsSetSuccess() {
		return AdmifaceOnlineUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceOnlineUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceOnlineUserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceOnlineUserResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmTidList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceOnlineUserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "OnlineUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceOnlineUserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceOnlineUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceOnlineUserResult(%+v)", *p)
}

func (p *AdmifaceOnlineUserResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceOnlineUserResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOnlineUserResult)(nil)

// Attributes:
//  - Avb
// 
type AdmifaceVroomArgs struct {
	Avb *AdmVroomBean `thrift:"avb,1" db:"avb" json:"avb"`
}

func NewAdmifaceVroomArgs() *AdmifaceVroomArgs {
	return &AdmifaceVroomArgs{}
}

var AdmifaceVroomArgs_Avb_DEFAULT *AdmVroomBean

func (p *AdmifaceVroomArgs) GetAvb() *AdmVroomBean {
	if !p.IsSetAvb() {
		return AdmifaceVroomArgs_Avb_DEFAULT
	}
	return p.Avb
}

func (p *AdmifaceVroomArgs) IsSetAvb() bool {
	return p.Avb != nil
}

func (p *AdmifaceVroomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVroomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Avb = &AdmVroomBean{}
	if err := p.Avb.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Avb), err)
	}
	return nil
}

func (p *AdmifaceVroomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Vroom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVroomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "avb", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:avb: ", p), err)
	}
	if err := p.Avb.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Avb), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:avb: ", p), err)
	}
	return err
}

func (p *AdmifaceVroomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVroomArgs(%+v)", *p)
}

func (p *AdmifaceVroomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVroomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVroomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceVroomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVroomResult() *AdmifaceVroomResult {
	return &AdmifaceVroomResult{}
}

var AdmifaceVroomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceVroomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceVroomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceVroomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceVroomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVroomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceVroomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Vroom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVroomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceVroomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVroomResult(%+v)", *p)
}

func (p *AdmifaceVroomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVroomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVroomResult)(nil)

// Attributes:
//  - Adb
// 
type AdmifaceDetectArgs struct {
	Adb *AdmDetectBean `thrift:"adb,1" db:"adb" json:"adb"`
}

func NewAdmifaceDetectArgs() *AdmifaceDetectArgs {
	return &AdmifaceDetectArgs{}
}

var AdmifaceDetectArgs_Adb_DEFAULT *AdmDetectBean

func (p *AdmifaceDetectArgs) GetAdb() *AdmDetectBean {
	if !p.IsSetAdb() {
		return AdmifaceDetectArgs_Adb_DEFAULT
	}
	return p.Adb
}

func (p *AdmifaceDetectArgs) IsSetAdb() bool {
	return p.Adb != nil
}

func (p *AdmifaceDetectArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceDetectArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Adb = &AdmDetectBean{}
	if err := p.Adb.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Adb), err)
	}
	return nil
}

func (p *AdmifaceDetectArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Detect_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceDetectArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "adb", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:adb: ", p), err)
	}
	if err := p.Adb.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Adb), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:adb: ", p), err)
	}
	return err
}

func (p *AdmifaceDetectArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceDetectArgs(%+v)", *p)
}

func (p *AdmifaceDetectArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceDetectArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceDetectArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceDetectResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceDetectResult() *AdmifaceDetectResult {
	return &AdmifaceDetectResult{}
}

var AdmifaceDetectResult_Success_DEFAULT *AdmAck

func (p *AdmifaceDetectResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceDetectResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceDetectResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceDetectResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceDetectResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceDetectResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Detect_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceDetectResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceDetectResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceDetectResult(%+v)", *p)
}

func (p *AdmifaceDetectResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceDetectResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceDetectResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
// 
type AdmifaceRosterArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
}

func NewAdmifaceRosterArgs() *AdmifaceRosterArgs {
	return &AdmifaceRosterArgs{}
}



func (p *AdmifaceRosterArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceRosterArgs) GetDomain() string {
	return p.Domain
}

func (p *AdmifaceRosterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRosterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceRosterArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceRosterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Roster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRosterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceRosterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceRosterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRosterArgs(%+v)", *p)
}

func (p *AdmifaceRosterArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRosterArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRosterArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceRosterResult struct {
	Success *AdmNodeList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceRosterResult() *AdmifaceRosterResult {
	return &AdmifaceRosterResult{}
}

var AdmifaceRosterResult_Success_DEFAULT *AdmNodeList

func (p *AdmifaceRosterResult) GetSuccess() *AdmNodeList {
	if !p.IsSetSuccess() {
		return AdmifaceRosterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceRosterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceRosterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRosterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmNodeList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceRosterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Roster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRosterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceRosterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRosterResult(%+v)", *p)
}

func (p *AdmifaceRosterResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRosterResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRosterResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Tonode
//  - Msg
// 
type AdmifaceAddrosterArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Tonode string `thrift:"tonode,3" db:"tonode" json:"tonode"`
	Msg string `thrift:"msg,4" db:"msg" json:"msg"`
}

func NewAdmifaceAddrosterArgs() *AdmifaceAddrosterArgs {
	return &AdmifaceAddrosterArgs{}
}



func (p *AdmifaceAddrosterArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceAddrosterArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceAddrosterArgs) GetTonode() string {
	return p.Tonode
}



func (p *AdmifaceAddrosterArgs) GetMsg() string {
	return p.Msg
}

func (p *AdmifaceAddrosterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAddrosterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceAddrosterArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceAddrosterArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tonode = v
	}
	return nil
}

func (p *AdmifaceAddrosterArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AdmifaceAddrosterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Addroster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAddrosterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceAddrosterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceAddrosterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tonode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tonode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Tonode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tonode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tonode: ", p), err)
	}
	return err
}

func (p *AdmifaceAddrosterArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err)
	}
	return err
}

func (p *AdmifaceAddrosterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAddrosterArgs(%+v)", *p)
}

func (p *AdmifaceAddrosterArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAddrosterArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAddrosterArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceAddrosterResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceAddrosterResult() *AdmifaceAddrosterResult {
	return &AdmifaceAddrosterResult{}
}

var AdmifaceAddrosterResult_Success_DEFAULT *AdmAck

func (p *AdmifaceAddrosterResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceAddrosterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceAddrosterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceAddrosterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAddrosterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceAddrosterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Addroster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAddrosterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceAddrosterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAddrosterResult(%+v)", *p)
}

func (p *AdmifaceAddrosterResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAddrosterResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAddrosterResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Tonode
// 
type AdmifaceRmrosterArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Tonode string `thrift:"tonode,3" db:"tonode" json:"tonode"`
}

func NewAdmifaceRmrosterArgs() *AdmifaceRmrosterArgs {
	return &AdmifaceRmrosterArgs{}
}



func (p *AdmifaceRmrosterArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceRmrosterArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceRmrosterArgs) GetTonode() string {
	return p.Tonode
}

func (p *AdmifaceRmrosterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRmrosterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceRmrosterArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceRmrosterArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tonode = v
	}
	return nil
}

func (p *AdmifaceRmrosterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Rmroster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRmrosterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceRmrosterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceRmrosterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tonode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tonode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Tonode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tonode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tonode: ", p), err)
	}
	return err
}

func (p *AdmifaceRmrosterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRmrosterArgs(%+v)", *p)
}

func (p *AdmifaceRmrosterArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRmrosterArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRmrosterArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceRmrosterResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceRmrosterResult() *AdmifaceRmrosterResult {
	return &AdmifaceRmrosterResult{}
}

var AdmifaceRmrosterResult_Success_DEFAULT *AdmAck

func (p *AdmifaceRmrosterResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceRmrosterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceRmrosterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceRmrosterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRmrosterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceRmrosterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Rmroster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRmrosterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceRmrosterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRmrosterResult(%+v)", *p)
}

func (p *AdmifaceRmrosterResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRmrosterResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRmrosterResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Tonode
// 
type AdmifaceBlockrosterArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Tonode string `thrift:"tonode,3" db:"tonode" json:"tonode"`
}

func NewAdmifaceBlockrosterArgs() *AdmifaceBlockrosterArgs {
	return &AdmifaceBlockrosterArgs{}
}



func (p *AdmifaceBlockrosterArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceBlockrosterArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceBlockrosterArgs) GetTonode() string {
	return p.Tonode
}

func (p *AdmifaceBlockrosterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockrosterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceBlockrosterArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceBlockrosterArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tonode = v
	}
	return nil
}

func (p *AdmifaceBlockrosterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Blockroster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockrosterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockrosterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockrosterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tonode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tonode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Tonode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tonode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tonode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockrosterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockrosterArgs(%+v)", *p)
}

func (p *AdmifaceBlockrosterArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockrosterArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockrosterArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceBlockrosterResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockrosterResult() *AdmifaceBlockrosterResult {
	return &AdmifaceBlockrosterResult{}
}

var AdmifaceBlockrosterResult_Success_DEFAULT *AdmAck

func (p *AdmifaceBlockrosterResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceBlockrosterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceBlockrosterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceBlockrosterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockrosterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceBlockrosterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Blockroster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockrosterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceBlockrosterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockrosterResult(%+v)", *p)
}

func (p *AdmifaceBlockrosterResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockrosterResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockrosterResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Tonode
//  - Mid
//  - Limit
// 
type AdmifacePullUserMessageArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Tonode string `thrift:"tonode,3" db:"tonode" json:"tonode"`
	Mid int64 `thrift:"mid,4" db:"mid" json:"mid"`
	Limit int64 `thrift:"limit,5" db:"limit" json:"limit"`
}

func NewAdmifacePullUserMessageArgs() *AdmifacePullUserMessageArgs {
	return &AdmifacePullUserMessageArgs{}
}



func (p *AdmifacePullUserMessageArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifacePullUserMessageArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifacePullUserMessageArgs) GetTonode() string {
	return p.Tonode
}



func (p *AdmifacePullUserMessageArgs) GetMid() int64 {
	return p.Mid
}



func (p *AdmifacePullUserMessageArgs) GetLimit() int64 {
	return p.Limit
}

func (p *AdmifacePullUserMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePullUserMessageArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifacePullUserMessageArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifacePullUserMessageArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tonode = v
	}
	return nil
}

func (p *AdmifacePullUserMessageArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *AdmifacePullUserMessageArgs) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *AdmifacePullUserMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PullUserMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePullUserMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifacePullUserMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifacePullUserMessageArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tonode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tonode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Tonode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tonode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tonode: ", p), err)
	}
	return err
}

func (p *AdmifacePullUserMessageArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "mid", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mid: ", p), err)
	}
	return err
}

func (p *AdmifacePullUserMessageArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err)
	}
	return err
}

func (p *AdmifacePullUserMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePullUserMessageArgs(%+v)", *p)
}

func (p *AdmifacePullUserMessageArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePullUserMessageArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePullUserMessageArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifacePullUserMessageResult struct {
	Success *AdmMessageList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifacePullUserMessageResult() *AdmifacePullUserMessageResult {
	return &AdmifacePullUserMessageResult{}
}

var AdmifacePullUserMessageResult_Success_DEFAULT *AdmMessageList

func (p *AdmifacePullUserMessageResult) GetSuccess() *AdmMessageList {
	if !p.IsSetSuccess() {
		return AdmifacePullUserMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifacePullUserMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifacePullUserMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePullUserMessageResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmMessageList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifacePullUserMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PullUserMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePullUserMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifacePullUserMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePullUserMessageResult(%+v)", *p)
}

func (p *AdmifacePullUserMessageResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePullUserMessageResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePullUserMessageResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Tonode
//  - Mid
//  - Limit
// 
type AdmifacePullRoomMessageArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Tonode string `thrift:"tonode,3" db:"tonode" json:"tonode"`
	Mid int64 `thrift:"mid,4" db:"mid" json:"mid"`
	Limit int64 `thrift:"limit,5" db:"limit" json:"limit"`
}

func NewAdmifacePullRoomMessageArgs() *AdmifacePullRoomMessageArgs {
	return &AdmifacePullRoomMessageArgs{}
}



func (p *AdmifacePullRoomMessageArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifacePullRoomMessageArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifacePullRoomMessageArgs) GetTonode() string {
	return p.Tonode
}



func (p *AdmifacePullRoomMessageArgs) GetMid() int64 {
	return p.Mid
}



func (p *AdmifacePullRoomMessageArgs) GetLimit() int64 {
	return p.Limit
}

func (p *AdmifacePullRoomMessageArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePullRoomMessageArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifacePullRoomMessageArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifacePullRoomMessageArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tonode = v
	}
	return nil
}

func (p *AdmifacePullRoomMessageArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *AdmifacePullRoomMessageArgs) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *AdmifacePullRoomMessageArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PullRoomMessage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePullRoomMessageArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifacePullRoomMessageArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifacePullRoomMessageArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tonode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tonode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Tonode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tonode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tonode: ", p), err)
	}
	return err
}

func (p *AdmifacePullRoomMessageArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "mid", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Mid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mid: ", p), err)
	}
	return err
}

func (p *AdmifacePullRoomMessageArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err)
	}
	return err
}

func (p *AdmifacePullRoomMessageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePullRoomMessageArgs(%+v)", *p)
}

func (p *AdmifacePullRoomMessageArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePullRoomMessageArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePullRoomMessageArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifacePullRoomMessageResult struct {
	Success *AdmMessageList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifacePullRoomMessageResult() *AdmifacePullRoomMessageResult {
	return &AdmifacePullRoomMessageResult{}
}

var AdmifacePullRoomMessageResult_Success_DEFAULT *AdmMessageList

func (p *AdmifacePullRoomMessageResult) GetSuccess() *AdmMessageList {
	if !p.IsSetSuccess() {
		return AdmifacePullRoomMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifacePullRoomMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifacePullRoomMessageResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePullRoomMessageResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmMessageList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifacePullRoomMessageResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PullRoomMessage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePullRoomMessageResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifacePullRoomMessageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePullRoomMessageResult(%+v)", *p)
}

func (p *AdmifacePullRoomMessageResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePullRoomMessageResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePullRoomMessageResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Limit
// 
type AdmifaceOfflineMsgArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Limit int64 `thrift:"limit,3" db:"limit" json:"limit"`
}

func NewAdmifaceOfflineMsgArgs() *AdmifaceOfflineMsgArgs {
	return &AdmifaceOfflineMsgArgs{}
}



func (p *AdmifaceOfflineMsgArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceOfflineMsgArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceOfflineMsgArgs) GetLimit() int64 {
	return p.Limit
}

func (p *AdmifaceOfflineMsgArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceOfflineMsgArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceOfflineMsgArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceOfflineMsgArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *AdmifaceOfflineMsgArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "OfflineMsg_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceOfflineMsgArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceOfflineMsgArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceOfflineMsgArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "limit", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err)
	}
	return err
}

func (p *AdmifaceOfflineMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceOfflineMsgArgs(%+v)", *p)
}

func (p *AdmifaceOfflineMsgArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceOfflineMsgArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOfflineMsgArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceOfflineMsgResult struct {
	Success *AdmMessageList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceOfflineMsgResult() *AdmifaceOfflineMsgResult {
	return &AdmifaceOfflineMsgResult{}
}

var AdmifaceOfflineMsgResult_Success_DEFAULT *AdmMessageList

func (p *AdmifaceOfflineMsgResult) GetSuccess() *AdmMessageList {
	if !p.IsSetSuccess() {
		return AdmifaceOfflineMsgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceOfflineMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceOfflineMsgResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceOfflineMsgResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmMessageList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceOfflineMsgResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "OfflineMsg_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceOfflineMsgResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceOfflineMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceOfflineMsgResult(%+v)", *p)
}

func (p *AdmifaceOfflineMsgResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceOfflineMsgResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceOfflineMsgResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Ids
// 
type AdmifaceDelOfflineMsgArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Ids []int64 `thrift:"ids,3" db:"ids" json:"ids"`
}

func NewAdmifaceDelOfflineMsgArgs() *AdmifaceDelOfflineMsgArgs {
	return &AdmifaceDelOfflineMsgArgs{}
}



func (p *AdmifaceDelOfflineMsgArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceDelOfflineMsgArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceDelOfflineMsgArgs) GetIds() []int64 {
	return p.Ids
}

func (p *AdmifaceDelOfflineMsgArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Ids = tSlice
	for i := 0; i < size; i++ {
		var _elem316 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem316 = v
		}
		p.Ids = append(p.Ids, _elem316)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DelOfflineMsg_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceDelOfflineMsgArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceDelOfflineMsgArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ids", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ids: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Ids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI64(ctx, int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ids: ", p), err)
	}
	return err
}

func (p *AdmifaceDelOfflineMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceDelOfflineMsgArgs(%+v)", *p)
}

func (p *AdmifaceDelOfflineMsgArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceDelOfflineMsgArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceDelOfflineMsgArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceDelOfflineMsgResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceDelOfflineMsgResult() *AdmifaceDelOfflineMsgResult {
	return &AdmifaceDelOfflineMsgResult{}
}

var AdmifaceDelOfflineMsgResult_Success_DEFAULT *AdmAck

func (p *AdmifaceDelOfflineMsgResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceDelOfflineMsgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceDelOfflineMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceDelOfflineMsgResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DelOfflineMsg_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceDelOfflineMsgResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceDelOfflineMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceDelOfflineMsgResult(%+v)", *p)
}

func (p *AdmifaceDelOfflineMsgResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceDelOfflineMsgResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceDelOfflineMsgResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
// 
type AdmifaceUserRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
}

func NewAdmifaceUserRoomArgs() *AdmifaceUserRoomArgs {
	return &AdmifaceUserRoomArgs{}
}



func (p *AdmifaceUserRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceUserRoomArgs) GetDomain() string {
	return p.Domain
}

func (p *AdmifaceUserRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceUserRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceUserRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceUserRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceUserRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceUserRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceUserRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceUserRoomArgs(%+v)", *p)
}

func (p *AdmifaceUserRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceUserRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceUserRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceUserRoomResult struct {
	Success *AdmNodeList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceUserRoomResult() *AdmifaceUserRoomResult {
	return &AdmifaceUserRoomResult{}
}

var AdmifaceUserRoomResult_Success_DEFAULT *AdmNodeList

func (p *AdmifaceUserRoomResult) GetSuccess() *AdmNodeList {
	if !p.IsSetSuccess() {
		return AdmifaceUserRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceUserRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceUserRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceUserRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmNodeList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceUserRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UserRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceUserRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceUserRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceUserRoomResult(%+v)", *p)
}

func (p *AdmifaceUserRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceUserRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceUserRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
// 
type AdmifaceRoomUsersArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
}

func NewAdmifaceRoomUsersArgs() *AdmifaceRoomUsersArgs {
	return &AdmifaceRoomUsersArgs{}
}



func (p *AdmifaceRoomUsersArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceRoomUsersArgs) GetDomain() string {
	return p.Domain
}

func (p *AdmifaceRoomUsersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRoomUsersArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceRoomUsersArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceRoomUsersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RoomUsers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRoomUsersArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceRoomUsersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceRoomUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRoomUsersArgs(%+v)", *p)
}

func (p *AdmifaceRoomUsersArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRoomUsersArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRoomUsersArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceRoomUsersResult struct {
	Success *AdmNodeList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceRoomUsersResult() *AdmifaceRoomUsersResult {
	return &AdmifaceRoomUsersResult{}
}

var AdmifaceRoomUsersResult_Success_DEFAULT *AdmNodeList

func (p *AdmifaceRoomUsersResult) GetSuccess() *AdmNodeList {
	if !p.IsSetSuccess() {
		return AdmifaceRoomUsersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceRoomUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceRoomUsersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRoomUsersResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmNodeList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceRoomUsersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RoomUsers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRoomUsersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceRoomUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRoomUsersResult(%+v)", *p)
}

func (p *AdmifaceRoomUsersResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRoomUsersResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRoomUsersResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Topic
//  - Gtype
// 
type AdmifaceCreateRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Topic string `thrift:"topic,3" db:"topic" json:"topic"`
	Gtype int8 `thrift:"gtype,4" db:"gtype" json:"gtype"`
}

func NewAdmifaceCreateRoomArgs() *AdmifaceCreateRoomArgs {
	return &AdmifaceCreateRoomArgs{}
}



func (p *AdmifaceCreateRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceCreateRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceCreateRoomArgs) GetTopic() string {
	return p.Topic
}



func (p *AdmifaceCreateRoomArgs) GetGtype() int8 {
	return p.Gtype
}

func (p *AdmifaceCreateRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceCreateRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceCreateRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceCreateRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Topic = v
	}
	return nil
}

func (p *AdmifaceCreateRoomArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Gtype = temp
	}
	return nil
}

func (p *AdmifaceCreateRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CreateRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceCreateRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceCreateRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceCreateRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "topic", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:topic: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Topic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.topic (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:topic: ", p), err)
	}
	return err
}

func (p *AdmifaceCreateRoomArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "gtype", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gtype: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.Gtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.gtype (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gtype: ", p), err)
	}
	return err
}

func (p *AdmifaceCreateRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceCreateRoomArgs(%+v)", *p)
}

func (p *AdmifaceCreateRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceCreateRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceCreateRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceCreateRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceCreateRoomResult() *AdmifaceCreateRoomResult {
	return &AdmifaceCreateRoomResult{}
}

var AdmifaceCreateRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceCreateRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceCreateRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceCreateRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceCreateRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceCreateRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceCreateRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CreateRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceCreateRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceCreateRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceCreateRoomResult(%+v)", *p)
}

func (p *AdmifaceCreateRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceCreateRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceCreateRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - Msg
// 
type AdmifaceAddRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
	Msg string `thrift:"msg,4" db:"msg" json:"msg"`
}

func NewAdmifaceAddRoomArgs() *AdmifaceAddRoomArgs {
	return &AdmifaceAddRoomArgs{}
}



func (p *AdmifaceAddRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceAddRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceAddRoomArgs) GetRoomNode() string {
	return p.RoomNode
}



func (p *AdmifaceAddRoomArgs) GetMsg() string {
	return p.Msg
}

func (p *AdmifaceAddRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAddRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceAddRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceAddRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceAddRoomArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AdmifaceAddRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAddRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceAddRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceAddRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceAddRoomArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err)
	}
	return err
}

func (p *AdmifaceAddRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAddRoomArgs(%+v)", *p)
}

func (p *AdmifaceAddRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAddRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAddRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceAddRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceAddRoomResult() *AdmifaceAddRoomResult {
	return &AdmifaceAddRoomResult{}
}

var AdmifaceAddRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceAddRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceAddRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceAddRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceAddRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAddRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceAddRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAddRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceAddRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAddRoomResult(%+v)", *p)
}

func (p *AdmifaceAddRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAddRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAddRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
// 
type AdmifacePullInRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
	ToNode string `thrift:"toNode,4" db:"toNode" json:"toNode"`
}

func NewAdmifacePullInRoomArgs() *AdmifacePullInRoomArgs {
	return &AdmifacePullInRoomArgs{}
}



func (p *AdmifacePullInRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifacePullInRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifacePullInRoomArgs) GetRoomNode() string {
	return p.RoomNode
}



func (p *AdmifacePullInRoomArgs) GetToNode() string {
	return p.ToNode
}

func (p *AdmifacePullInRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePullInRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifacePullInRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifacePullInRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifacePullInRoomArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ToNode = v
	}
	return nil
}

func (p *AdmifacePullInRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PullInRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePullInRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifacePullInRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifacePullInRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifacePullInRoomArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ToNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toNode: ", p), err)
	}
	return err
}

func (p *AdmifacePullInRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePullInRoomArgs(%+v)", *p)
}

func (p *AdmifacePullInRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePullInRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePullInRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifacePullInRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifacePullInRoomResult() *AdmifacePullInRoomResult {
	return &AdmifacePullInRoomResult{}
}

var AdmifacePullInRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifacePullInRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifacePullInRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifacePullInRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifacePullInRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifacePullInRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifacePullInRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PullInRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifacePullInRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifacePullInRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifacePullInRoomResult(%+v)", *p)
}

func (p *AdmifacePullInRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifacePullInRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifacePullInRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
//  - Msg
// 
type AdmifaceRejectRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
	ToNode string `thrift:"toNode,4" db:"toNode" json:"toNode"`
	Msg string `thrift:"msg,5" db:"msg" json:"msg"`
}

func NewAdmifaceRejectRoomArgs() *AdmifaceRejectRoomArgs {
	return &AdmifaceRejectRoomArgs{}
}



func (p *AdmifaceRejectRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceRejectRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceRejectRoomArgs) GetRoomNode() string {
	return p.RoomNode
}



func (p *AdmifaceRejectRoomArgs) GetToNode() string {
	return p.ToNode
}



func (p *AdmifaceRejectRoomArgs) GetMsg() string {
	return p.Msg
}

func (p *AdmifaceRejectRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRejectRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceRejectRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceRejectRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceRejectRoomArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ToNode = v
	}
	return nil
}

func (p *AdmifaceRejectRoomArgs) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AdmifaceRejectRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RejectRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRejectRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceRejectRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceRejectRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceRejectRoomArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ToNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toNode: ", p), err)
	}
	return err
}

func (p *AdmifaceRejectRoomArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:msg: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:msg: ", p), err)
	}
	return err
}

func (p *AdmifaceRejectRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRejectRoomArgs(%+v)", *p)
}

func (p *AdmifaceRejectRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRejectRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRejectRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceRejectRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceRejectRoomResult() *AdmifaceRejectRoomResult {
	return &AdmifaceRejectRoomResult{}
}

var AdmifaceRejectRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceRejectRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceRejectRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceRejectRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceRejectRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceRejectRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceRejectRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RejectRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceRejectRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceRejectRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceRejectRoomResult(%+v)", *p)
}

func (p *AdmifaceRejectRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceRejectRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceRejectRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
// 
type AdmifaceKickRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
	ToNode string `thrift:"toNode,4" db:"toNode" json:"toNode"`
}

func NewAdmifaceKickRoomArgs() *AdmifaceKickRoomArgs {
	return &AdmifaceKickRoomArgs{}
}



func (p *AdmifaceKickRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceKickRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceKickRoomArgs) GetRoomNode() string {
	return p.RoomNode
}



func (p *AdmifaceKickRoomArgs) GetToNode() string {
	return p.ToNode
}

func (p *AdmifaceKickRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceKickRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceKickRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceKickRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceKickRoomArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ToNode = v
	}
	return nil
}

func (p *AdmifaceKickRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KickRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceKickRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceKickRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceKickRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceKickRoomArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ToNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toNode: ", p), err)
	}
	return err
}

func (p *AdmifaceKickRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceKickRoomArgs(%+v)", *p)
}

func (p *AdmifaceKickRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceKickRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceKickRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceKickRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceKickRoomResult() *AdmifaceKickRoomResult {
	return &AdmifaceKickRoomResult{}
}

var AdmifaceKickRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceKickRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceKickRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceKickRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceKickRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceKickRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceKickRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "KickRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceKickRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceKickRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceKickRoomResult(%+v)", *p)
}

func (p *AdmifaceKickRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceKickRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceKickRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
type AdmifaceLeaveRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
}

func NewAdmifaceLeaveRoomArgs() *AdmifaceLeaveRoomArgs {
	return &AdmifaceLeaveRoomArgs{}
}



func (p *AdmifaceLeaveRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceLeaveRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceLeaveRoomArgs) GetRoomNode() string {
	return p.RoomNode
}

func (p *AdmifaceLeaveRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceLeaveRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceLeaveRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceLeaveRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceLeaveRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceLeaveRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceLeaveRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceLeaveRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceLeaveRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceLeaveRoomArgs(%+v)", *p)
}

func (p *AdmifaceLeaveRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceLeaveRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceLeaveRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceLeaveRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceLeaveRoomResult() *AdmifaceLeaveRoomResult {
	return &AdmifaceLeaveRoomResult{}
}

var AdmifaceLeaveRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceLeaveRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceLeaveRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceLeaveRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceLeaveRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceLeaveRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceLeaveRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "LeaveRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceLeaveRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceLeaveRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceLeaveRoomResult(%+v)", *p)
}

func (p *AdmifaceLeaveRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceLeaveRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceLeaveRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
type AdmifaceCancelRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
}

func NewAdmifaceCancelRoomArgs() *AdmifaceCancelRoomArgs {
	return &AdmifaceCancelRoomArgs{}
}



func (p *AdmifaceCancelRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceCancelRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceCancelRoomArgs) GetRoomNode() string {
	return p.RoomNode
}

func (p *AdmifaceCancelRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceCancelRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceCancelRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceCancelRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceCancelRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CancelRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceCancelRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceCancelRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceCancelRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceCancelRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceCancelRoomArgs(%+v)", *p)
}

func (p *AdmifaceCancelRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceCancelRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceCancelRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceCancelRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceCancelRoomResult() *AdmifaceCancelRoomResult {
	return &AdmifaceCancelRoomResult{}
}

var AdmifaceCancelRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceCancelRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceCancelRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceCancelRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceCancelRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceCancelRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceCancelRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CancelRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceCancelRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceCancelRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceCancelRoomResult(%+v)", *p)
}

func (p *AdmifaceCancelRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceCancelRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceCancelRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
type AdmifaceBlockRoomArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
}

func NewAdmifaceBlockRoomArgs() *AdmifaceBlockRoomArgs {
	return &AdmifaceBlockRoomArgs{}
}



func (p *AdmifaceBlockRoomArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceBlockRoomArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceBlockRoomArgs) GetRoomNode() string {
	return p.RoomNode
}

func (p *AdmifaceBlockRoomArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceBlockRoomArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoom_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomArgs(%+v)", *p)
}

func (p *AdmifaceBlockRoomArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceBlockRoomResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockRoomResult() *AdmifaceBlockRoomResult {
	return &AdmifaceBlockRoomResult{}
}

var AdmifaceBlockRoomResult_Success_DEFAULT *AdmAck

func (p *AdmifaceBlockRoomResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceBlockRoomResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceBlockRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceBlockRoomResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoom_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceBlockRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomResult(%+v)", *p)
}

func (p *AdmifaceBlockRoomResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
//  - ToNode
// 
type AdmifaceBlockRoomMemberArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
	ToNode string `thrift:"toNode,4" db:"toNode" json:"toNode"`
}

func NewAdmifaceBlockRoomMemberArgs() *AdmifaceBlockRoomMemberArgs {
	return &AdmifaceBlockRoomMemberArgs{}
}



func (p *AdmifaceBlockRoomMemberArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceBlockRoomMemberArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceBlockRoomMemberArgs) GetRoomNode() string {
	return p.RoomNode
}



func (p *AdmifaceBlockRoomMemberArgs) GetToNode() string {
	return p.ToNode
}

func (p *AdmifaceBlockRoomMemberArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ToNode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoomMember_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomMemberArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomMemberArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomMemberArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ToNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toNode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomMemberArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomMemberArgs(%+v)", *p)
}

func (p *AdmifaceBlockRoomMemberArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomMemberArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomMemberArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceBlockRoomMemberResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockRoomMemberResult() *AdmifaceBlockRoomMemberResult {
	return &AdmifaceBlockRoomMemberResult{}
}

var AdmifaceBlockRoomMemberResult_Success_DEFAULT *AdmAck

func (p *AdmifaceBlockRoomMemberResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceBlockRoomMemberResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceBlockRoomMemberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceBlockRoomMemberResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoomMember_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceBlockRoomMemberResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomMemberResult(%+v)", *p)
}

func (p *AdmifaceBlockRoomMemberResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomMemberResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomMemberResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
// 
type AdmifaceBlockRosterListArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
}

func NewAdmifaceBlockRosterListArgs() *AdmifaceBlockRosterListArgs {
	return &AdmifaceBlockRosterListArgs{}
}



func (p *AdmifaceBlockRosterListArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceBlockRosterListArgs) GetDomain() string {
	return p.Domain
}

func (p *AdmifaceBlockRosterListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRosterListArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceBlockRosterListArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceBlockRosterListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRosterList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRosterListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRosterListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRosterListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRosterListArgs(%+v)", *p)
}

func (p *AdmifaceBlockRosterListArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRosterListArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRosterListArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceBlockRosterListResult struct {
	Success *AdmNodeList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockRosterListResult() *AdmifaceBlockRosterListResult {
	return &AdmifaceBlockRosterListResult{}
}

var AdmifaceBlockRosterListResult_Success_DEFAULT *AdmNodeList

func (p *AdmifaceBlockRosterListResult) GetSuccess() *AdmNodeList {
	if !p.IsSetSuccess() {
		return AdmifaceBlockRosterListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceBlockRosterListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceBlockRosterListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRosterListResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmNodeList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceBlockRosterListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRosterList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRosterListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceBlockRosterListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRosterListResult(%+v)", *p)
}

func (p *AdmifaceBlockRosterListResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRosterListResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRosterListResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
// 
type AdmifaceBlockRoomListArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
}

func NewAdmifaceBlockRoomListArgs() *AdmifaceBlockRoomListArgs {
	return &AdmifaceBlockRoomListArgs{}
}



func (p *AdmifaceBlockRoomListArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceBlockRoomListArgs) GetDomain() string {
	return p.Domain
}

func (p *AdmifaceBlockRoomListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomListArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomListArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceBlockRoomListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoomList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomListArgs(%+v)", *p)
}

func (p *AdmifaceBlockRoomListArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomListArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomListArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceBlockRoomListResult struct {
	Success *AdmNodeList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockRoomListResult() *AdmifaceBlockRoomListResult {
	return &AdmifaceBlockRoomListResult{}
}

var AdmifaceBlockRoomListResult_Success_DEFAULT *AdmNodeList

func (p *AdmifaceBlockRoomListResult) GetSuccess() *AdmNodeList {
	if !p.IsSetSuccess() {
		return AdmifaceBlockRoomListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceBlockRoomListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceBlockRoomListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomListResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmNodeList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoomList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceBlockRoomListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomListResult(%+v)", *p)
}

func (p *AdmifaceBlockRoomListResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomListResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomListResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
type AdmifaceBlockRoomMemberlistArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
}

func NewAdmifaceBlockRoomMemberlistArgs() *AdmifaceBlockRoomMemberlistArgs {
	return &AdmifaceBlockRoomMemberlistArgs{}
}



func (p *AdmifaceBlockRoomMemberlistArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceBlockRoomMemberlistArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceBlockRoomMemberlistArgs) GetRoomNode() string {
	return p.RoomNode
}

func (p *AdmifaceBlockRoomMemberlistArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoomMemberlist_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomMemberlistArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomMemberlistArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceBlockRoomMemberlistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomMemberlistArgs(%+v)", *p)
}

func (p *AdmifaceBlockRoomMemberlistArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomMemberlistArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomMemberlistArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceBlockRoomMemberlistResult struct {
	Success *AdmNodeList `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceBlockRoomMemberlistResult() *AdmifaceBlockRoomMemberlistResult {
	return &AdmifaceBlockRoomMemberlistResult{}
}

var AdmifaceBlockRoomMemberlistResult_Success_DEFAULT *AdmNodeList

func (p *AdmifaceBlockRoomMemberlistResult) GetSuccess() *AdmNodeList {
	if !p.IsSetSuccess() {
		return AdmifaceBlockRoomMemberlistResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceBlockRoomMemberlistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceBlockRoomMemberlistResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmNodeList{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "BlockRoomMemberlist_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceBlockRoomMemberlistResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceBlockRoomMemberlistResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceBlockRoomMemberlistResult(%+v)", *p)
}

func (p *AdmifaceBlockRoomMemberlistResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceBlockRoomMemberlistResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceBlockRoomMemberlistResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
// 
type AdmifaceVirtualroomRegisterArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
}

func NewAdmifaceVirtualroomRegisterArgs() *AdmifaceVirtualroomRegisterArgs {
	return &AdmifaceVirtualroomRegisterArgs{}
}



func (p *AdmifaceVirtualroomRegisterArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceVirtualroomRegisterArgs) GetDomain() string {
	return p.Domain
}

func (p *AdmifaceVirtualroomRegisterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRegisterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomRegisterArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceVirtualroomRegisterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomRegister_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRegisterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomRegisterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomRegisterArgs(%+v)", *p)
}

func (p *AdmifaceVirtualroomRegisterArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomRegisterArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomRegisterArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceVirtualroomRegisterResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVirtualroomRegisterResult() *AdmifaceVirtualroomRegisterResult {
	return &AdmifaceVirtualroomRegisterResult{}
}

var AdmifaceVirtualroomRegisterResult_Success_DEFAULT *AdmAck

func (p *AdmifaceVirtualroomRegisterResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceVirtualroomRegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceVirtualroomRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceVirtualroomRegisterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRegisterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRegisterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomRegister_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRegisterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceVirtualroomRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomRegisterResult(%+v)", *p)
}

func (p *AdmifaceVirtualroomRegisterResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomRegisterResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomRegisterResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - VNode
// 
type AdmifaceVirtualroomRemoveArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	VNode string `thrift:"vNode,3" db:"vNode" json:"vNode"`
}

func NewAdmifaceVirtualroomRemoveArgs() *AdmifaceVirtualroomRemoveArgs {
	return &AdmifaceVirtualroomRemoveArgs{}
}



func (p *AdmifaceVirtualroomRemoveArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceVirtualroomRemoveArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceVirtualroomRemoveArgs) GetVNode() string {
	return p.VNode
}

func (p *AdmifaceVirtualroomRemoveArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VNode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomRemove_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomRemoveArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomRemoveArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "vNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.VNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vNode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomRemoveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomRemoveArgs(%+v)", *p)
}

func (p *AdmifaceVirtualroomRemoveArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomRemoveArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomRemoveArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceVirtualroomRemoveResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVirtualroomRemoveResult() *AdmifaceVirtualroomRemoveResult {
	return &AdmifaceVirtualroomRemoveResult{}
}

var AdmifaceVirtualroomRemoveResult_Success_DEFAULT *AdmAck

func (p *AdmifaceVirtualroomRemoveResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceVirtualroomRemoveResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceVirtualroomRemoveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceVirtualroomRemoveResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomRemove_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomRemoveResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceVirtualroomRemoveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomRemoveResult(%+v)", *p)
}

func (p *AdmifaceVirtualroomRemoveResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomRemoveResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomRemoveResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - VNode
//  - ToNode
// 
type AdmifaceVirtualroomAddAuthArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	VNode string `thrift:"vNode,3" db:"vNode" json:"vNode"`
	ToNode string `thrift:"toNode,4" db:"toNode" json:"toNode"`
}

func NewAdmifaceVirtualroomAddAuthArgs() *AdmifaceVirtualroomAddAuthArgs {
	return &AdmifaceVirtualroomAddAuthArgs{}
}



func (p *AdmifaceVirtualroomAddAuthArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceVirtualroomAddAuthArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceVirtualroomAddAuthArgs) GetVNode() string {
	return p.VNode
}



func (p *AdmifaceVirtualroomAddAuthArgs) GetToNode() string {
	return p.ToNode
}

func (p *AdmifaceVirtualroomAddAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VNode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ToNode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomAddAuth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomAddAuthArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomAddAuthArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "vNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.VNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vNode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomAddAuthArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ToNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toNode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomAddAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomAddAuthArgs(%+v)", *p)
}

func (p *AdmifaceVirtualroomAddAuthArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomAddAuthArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomAddAuthArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceVirtualroomAddAuthResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVirtualroomAddAuthResult() *AdmifaceVirtualroomAddAuthResult {
	return &AdmifaceVirtualroomAddAuthResult{}
}

var AdmifaceVirtualroomAddAuthResult_Success_DEFAULT *AdmAck

func (p *AdmifaceVirtualroomAddAuthResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceVirtualroomAddAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceVirtualroomAddAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceVirtualroomAddAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomAddAuth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomAddAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceVirtualroomAddAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomAddAuthResult(%+v)", *p)
}

func (p *AdmifaceVirtualroomAddAuthResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomAddAuthResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomAddAuthResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - VNode
//  - ToNode
// 
type AdmifaceVirtualroomDelAuthArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	VNode string `thrift:"vNode,3" db:"vNode" json:"vNode"`
	ToNode string `thrift:"toNode,4" db:"toNode" json:"toNode"`
}

func NewAdmifaceVirtualroomDelAuthArgs() *AdmifaceVirtualroomDelAuthArgs {
	return &AdmifaceVirtualroomDelAuthArgs{}
}



func (p *AdmifaceVirtualroomDelAuthArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceVirtualroomDelAuthArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceVirtualroomDelAuthArgs) GetVNode() string {
	return p.VNode
}



func (p *AdmifaceVirtualroomDelAuthArgs) GetToNode() string {
	return p.ToNode
}

func (p *AdmifaceVirtualroomDelAuthArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VNode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ToNode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomDelAuth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomDelAuthArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomDelAuthArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "vNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.VNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vNode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomDelAuthArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "toNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:toNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ToNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:toNode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomDelAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomDelAuthArgs(%+v)", *p)
}

func (p *AdmifaceVirtualroomDelAuthArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomDelAuthArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomDelAuthArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceVirtualroomDelAuthResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVirtualroomDelAuthResult() *AdmifaceVirtualroomDelAuthResult {
	return &AdmifaceVirtualroomDelAuthResult{}
}

var AdmifaceVirtualroomDelAuthResult_Success_DEFAULT *AdmAck

func (p *AdmifaceVirtualroomDelAuthResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceVirtualroomDelAuthResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceVirtualroomDelAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceVirtualroomDelAuthResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomDelAuth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomDelAuthResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceVirtualroomDelAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomDelAuthResult(%+v)", *p)
}

func (p *AdmifaceVirtualroomDelAuthResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomDelAuthResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomDelAuthResult)(nil)

// Attributes:
//  - Wsid
//  - Fromnode
//  - Domain
//  - VNode
//  - SubType
// 
type AdmifaceVirtualroomSubArgs struct {
	Wsid int64 `thrift:"wsid,1" db:"wsid" json:"wsid"`
	Fromnode string `thrift:"fromnode,2" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,3" db:"domain" json:"domain"`
	VNode string `thrift:"vNode,4" db:"vNode" json:"vNode"`
	SubType int8 `thrift:"subType,5" db:"subType" json:"subType"`
}

func NewAdmifaceVirtualroomSubArgs() *AdmifaceVirtualroomSubArgs {
	return &AdmifaceVirtualroomSubArgs{}
}



func (p *AdmifaceVirtualroomSubArgs) GetWsid() int64 {
	return p.Wsid
}



func (p *AdmifaceVirtualroomSubArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceVirtualroomSubArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceVirtualroomSubArgs) GetVNode() string {
	return p.VNode
}



func (p *AdmifaceVirtualroomSubArgs) GetSubType() int8 {
	return p.SubType
}

func (p *AdmifaceVirtualroomSubArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomSubArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Wsid = v
	}
	return nil
}

func (p *AdmifaceVirtualroomSubArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomSubArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceVirtualroomSubArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.VNode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomSubArgs) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.SubType = temp
	}
	return nil
}

func (p *AdmifaceVirtualroomSubArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomSub_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomSubArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "wsid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wsid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Wsid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wsid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wsid: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomSubArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomSubArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomSubArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "vNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.VNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vNode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomSubArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "subType", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:subType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.SubType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:subType: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomSubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomSubArgs(%+v)", *p)
}

func (p *AdmifaceVirtualroomSubArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomSubArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomSubArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceVirtualroomSubResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVirtualroomSubResult() *AdmifaceVirtualroomSubResult {
	return &AdmifaceVirtualroomSubResult{}
}

var AdmifaceVirtualroomSubResult_Success_DEFAULT *AdmAck

func (p *AdmifaceVirtualroomSubResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceVirtualroomSubResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceVirtualroomSubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceVirtualroomSubResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomSubResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomSubResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomSub_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomSubResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceVirtualroomSubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomSubResult(%+v)", *p)
}

func (p *AdmifaceVirtualroomSubResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomSubResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomSubResult)(nil)

// Attributes:
//  - Wsid
//  - Fromnode
//  - Domain
//  - VNode
// 
type AdmifaceVirtualroomUnSubArgs struct {
	Wsid int64 `thrift:"wsid,1" db:"wsid" json:"wsid"`
	Fromnode string `thrift:"fromnode,2" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,3" db:"domain" json:"domain"`
	VNode string `thrift:"vNode,4" db:"vNode" json:"vNode"`
}

func NewAdmifaceVirtualroomUnSubArgs() *AdmifaceVirtualroomUnSubArgs {
	return &AdmifaceVirtualroomUnSubArgs{}
}



func (p *AdmifaceVirtualroomUnSubArgs) GetWsid() int64 {
	return p.Wsid
}



func (p *AdmifaceVirtualroomUnSubArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceVirtualroomUnSubArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceVirtualroomUnSubArgs) GetVNode() string {
	return p.VNode
}

func (p *AdmifaceVirtualroomUnSubArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Wsid = v
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubArgs) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.VNode = v
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomUnSub_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "wsid", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wsid: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.Wsid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wsid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wsid: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomUnSubArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomUnSubArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomUnSubArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "vNode", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:vNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.VNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vNode (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:vNode: ", p), err)
	}
	return err
}

func (p *AdmifaceVirtualroomUnSubArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomUnSubArgs(%+v)", *p)
}

func (p *AdmifaceVirtualroomUnSubArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomUnSubArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomUnSubArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceVirtualroomUnSubResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceVirtualroomUnSubResult() *AdmifaceVirtualroomUnSubResult {
	return &AdmifaceVirtualroomUnSubResult{}
}

var AdmifaceVirtualroomUnSubResult_Success_DEFAULT *AdmAck

func (p *AdmifaceVirtualroomUnSubResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceVirtualroomUnSubResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceVirtualroomUnSubResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceVirtualroomUnSubResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "VirtualroomUnSub_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceVirtualroomUnSubResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceVirtualroomUnSubResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceVirtualroomUnSubResult(%+v)", *p)
}

func (p *AdmifaceVirtualroomUnSubResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceVirtualroomUnSubResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceVirtualroomUnSubResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - Tonode
// 
type AdmifaceAuthrosterArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	Tonode string `thrift:"tonode,3" db:"tonode" json:"tonode"`
}

func NewAdmifaceAuthrosterArgs() *AdmifaceAuthrosterArgs {
	return &AdmifaceAuthrosterArgs{}
}



func (p *AdmifaceAuthrosterArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceAuthrosterArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceAuthrosterArgs) GetTonode() string {
	return p.Tonode
}

func (p *AdmifaceAuthrosterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAuthrosterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceAuthrosterArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceAuthrosterArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Tonode = v
	}
	return nil
}

func (p *AdmifaceAuthrosterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Authroster_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAuthrosterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceAuthrosterArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceAuthrosterArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tonode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tonode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Tonode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tonode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tonode: ", p), err)
	}
	return err
}

func (p *AdmifaceAuthrosterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAuthrosterArgs(%+v)", *p)
}

func (p *AdmifaceAuthrosterArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAuthrosterArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthrosterArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceAuthrosterResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceAuthrosterResult() *AdmifaceAuthrosterResult {
	return &AdmifaceAuthrosterResult{}
}

var AdmifaceAuthrosterResult_Success_DEFAULT *AdmAck

func (p *AdmifaceAuthrosterResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceAuthrosterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceAuthrosterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceAuthrosterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAuthrosterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceAuthrosterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Authroster_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAuthrosterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceAuthrosterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAuthrosterResult(%+v)", *p)
}

func (p *AdmifaceAuthrosterResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAuthrosterResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthrosterResult)(nil)

// Attributes:
//  - Fromnode
//  - Domain
//  - RoomNode
// 
type AdmifaceAuthgroupuserArgs struct {
	Fromnode string `thrift:"fromnode,1" db:"fromnode" json:"fromnode"`
	Domain string `thrift:"domain,2" db:"domain" json:"domain"`
	RoomNode string `thrift:"roomNode,3" db:"roomNode" json:"roomNode"`
}

func NewAdmifaceAuthgroupuserArgs() *AdmifaceAuthgroupuserArgs {
	return &AdmifaceAuthgroupuserArgs{}
}



func (p *AdmifaceAuthgroupuserArgs) GetFromnode() string {
	return p.Fromnode
}



func (p *AdmifaceAuthgroupuserArgs) GetDomain() string {
	return p.Domain
}



func (p *AdmifaceAuthgroupuserArgs) GetRoomNode() string {
	return p.RoomNode
}

func (p *AdmifaceAuthgroupuserArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAuthgroupuserArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Fromnode = v
	}
	return nil
}

func (p *AdmifaceAuthgroupuserArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AdmifaceAuthgroupuserArgs) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RoomNode = v
	}
	return nil
}

func (p *AdmifaceAuthgroupuserArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Authgroupuser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAuthgroupuserArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromnode", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromnode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Fromnode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromnode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromnode: ", p), err)
	}
	return err
}

func (p *AdmifaceAuthgroupuserArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Domain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
	}
	return err
}

func (p *AdmifaceAuthgroupuserArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "roomNode", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:roomNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.RoomNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.roomNode (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:roomNode: ", p), err)
	}
	return err
}

func (p *AdmifaceAuthgroupuserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAuthgroupuserArgs(%+v)", *p)
}

func (p *AdmifaceAuthgroupuserArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAuthgroupuserArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthgroupuserArgs)(nil)

// Attributes:
//  - Success
// 
type AdmifaceAuthgroupuserResult struct {
	Success *AdmAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAdmifaceAuthgroupuserResult() *AdmifaceAuthgroupuserResult {
	return &AdmifaceAuthgroupuserResult{}
}

var AdmifaceAuthgroupuserResult_Success_DEFAULT *AdmAck

func (p *AdmifaceAuthgroupuserResult) GetSuccess() *AdmAck {
	if !p.IsSetSuccess() {
		return AdmifaceAuthgroupuserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdmifaceAuthgroupuserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdmifaceAuthgroupuserResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AdmifaceAuthgroupuserResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &AdmAck{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AdmifaceAuthgroupuserResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Authgroupuser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AdmifaceAuthgroupuserResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AdmifaceAuthgroupuserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdmifaceAuthgroupuserResult(%+v)", *p)
}

func (p *AdmifaceAuthgroupuserResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.AdmifaceAuthgroupuserResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*AdmifaceAuthgroupuserResult)(nil)


