// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

package stub

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/donnie4w/gothrift/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Code
//  - Info
// 
type TimError struct {
	Code *int32 `thrift:"code,1" db:"code" json:"code,omitempty"`
	Info *string `thrift:"info,2" db:"info" json:"info,omitempty"`
}

func NewTimError() *TimError {
	return &TimError{}
}

var TimError_Code_DEFAULT int32

func (p *TimError) GetCode() int32 {
	if !p.IsSetCode() {
		return TimError_Code_DEFAULT
	}
	return *p.Code
}

var TimError_Info_DEFAULT string

func (p *TimError) GetInfo() string {
	if !p.IsSetInfo() {
		return TimError_Info_DEFAULT
	}
	return *p.Info
}

func (p *TimError) IsSetCode() bool {
	return p.Code != nil
}

func (p *TimError) IsSetInfo() bool {
	return p.Info != nil
}

func (p *TimError) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimError) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = &v
	}
	return nil
}

func (p *TimError) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Info = &v
	}
	return nil
}

func (p *TimError) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Code)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
		}
	}
	return err
}

func (p *TimError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetInfo() {
		if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Info)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.info (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err)
		}
	}
	return err
}

func (p *TimError) Equals(other *TimError) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Code != other.Code {
		if p.Code == nil || other.Code == nil {
			return false
		}
		if (*p.Code) != (*other.Code) { return false }
	}
	if p.Info != other.Info {
		if p.Info == nil || other.Info == nil {
			return false
		}
		if (*p.Info) != (*other.Info) { return false }
	}
	return true
}

func (p *TimError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimError(%+v)", *p)
}

func (p *TimError) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimError",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimError)(nil)

func (p *TimError) Validate() error {
	return nil
}

// Attributes:
//  - Ok
//  - TimType
//  - Error
//  - T
//  - N
//  - T2
//  - N2
// 
type TimAck struct {
	Ok bool `thrift:"ok,1,required" db:"ok" json:"ok"`
	TimType int8 `thrift:"timType,2,required" db:"timType" json:"timType"`
	Error *TimError `thrift:"error,3" db:"error" json:"error,omitempty"`
	T *int64 `thrift:"t,4" db:"t" json:"t,omitempty"`
	N *string `thrift:"n,5" db:"n" json:"n,omitempty"`
	T2 *int64 `thrift:"t2,6" db:"t2" json:"t2,omitempty"`
	N2 *string `thrift:"n2,7" db:"n2" json:"n2,omitempty"`
}

func NewTimAck() *TimAck {
	return &TimAck{}
}



func (p *TimAck) GetOk() bool {
	return p.Ok
}



func (p *TimAck) GetTimType() int8 {
	return p.TimType
}

var TimAck_Error_DEFAULT *TimError

func (p *TimAck) GetError() *TimError {
	if !p.IsSetError() {
		return TimAck_Error_DEFAULT
	}
	return p.Error
}

var TimAck_T_DEFAULT int64

func (p *TimAck) GetT() int64 {
	if !p.IsSetT() {
		return TimAck_T_DEFAULT
	}
	return *p.T
}

var TimAck_N_DEFAULT string

func (p *TimAck) GetN() string {
	if !p.IsSetN() {
		return TimAck_N_DEFAULT
	}
	return *p.N
}

var TimAck_T2_DEFAULT int64

func (p *TimAck) GetT2() int64 {
	if !p.IsSetT2() {
		return TimAck_T2_DEFAULT
	}
	return *p.T2
}

var TimAck_N2_DEFAULT string

func (p *TimAck) GetN2() string {
	if !p.IsSetN2() {
		return TimAck_N2_DEFAULT
	}
	return *p.N2
}

func (p *TimAck) IsSetError() bool {
	return p.Error != nil
}

func (p *TimAck) IsSetT() bool {
	return p.T != nil
}

func (p *TimAck) IsSetN() bool {
	return p.N != nil
}

func (p *TimAck) IsSetT2() bool {
	return p.T2 != nil
}

func (p *TimAck) IsSetN2() bool {
	return p.N2 != nil
}

func (p *TimAck) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetOk bool = false;
	var issetTimType bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetOk = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetTimType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetOk{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ok is not set"));
	}
	if !issetTimType{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimType is not set"));
	}
	return nil
}

func (p *TimAck) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ok = v
	}
	return nil
}

func (p *TimAck) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.TimType = temp
	}
	return nil
}

func (p *TimAck) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Error = &TimError{}
	if err := p.Error.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
	}
	return nil
}

func (p *TimAck) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.T = &v
	}
	return nil
}

func (p *TimAck) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.N = &v
	}
	return nil
}

func (p *TimAck) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.T2 = &v
	}
	return nil
}

func (p *TimAck) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.N2 = &v
	}
	return nil
}

func (p *TimAck) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimAck"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimAck) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ok", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ok: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.Ok)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ok (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ok: ", p), err)
	}
	return err
}

func (p *TimAck) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timType", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.TimType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timType: ", p), err)
	}
	return err
}

func (p *TimAck) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:error: ", p), err)
		}
		if err := p.Error.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:error: ", p), err)
		}
	}
	return err
}

func (p *TimAck) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetT() {
		if err := oprot.WriteFieldBegin(ctx, "t", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:t: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.T)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.t (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:t: ", p), err)
		}
	}
	return err
}

func (p *TimAck) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetN() {
		if err := oprot.WriteFieldBegin(ctx, "n", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:n: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.N)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.n (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:n: ", p), err)
		}
	}
	return err
}

func (p *TimAck) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetT2() {
		if err := oprot.WriteFieldBegin(ctx, "t2", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:t2: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.T2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.t2 (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:t2: ", p), err)
		}
	}
	return err
}

func (p *TimAck) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetN2() {
		if err := oprot.WriteFieldBegin(ctx, "n2", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:n2: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.N2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.n2 (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:n2: ", p), err)
		}
	}
	return err
}

func (p *TimAck) Equals(other *TimAck) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Ok != other.Ok { return false }
	if p.TimType != other.TimType { return false }
	if !p.Error.Equals(other.Error) { return false }
	if p.T != other.T {
		if p.T == nil || other.T == nil {
			return false
		}
		if (*p.T) != (*other.T) { return false }
	}
	if p.N != other.N {
		if p.N == nil || other.N == nil {
			return false
		}
		if (*p.N) != (*other.N) { return false }
	}
	if p.T2 != other.T2 {
		if p.T2 == nil || other.T2 == nil {
			return false
		}
		if (*p.T2) != (*other.T2) { return false }
	}
	if p.N2 != other.N2 {
		if p.N2 == nil || other.N2 == nil {
			return false
		}
		if (*p.N2) != (*other.N2) { return false }
	}
	return true
}

func (p *TimAck) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimAck(%+v)", *p)
}

func (p *TimAck) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimAck",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimAck)(nil)

func (p *TimAck) Validate() error {
	return nil
}

// Attributes:
//  - Rtype
//  - Node
//  - Node2
//  - ReqInt
//  - ReqInt2
//  - ReqStr
//  - ReqStr2
// 
type TimReq struct {
	Rtype *int32 `thrift:"rtype,1" db:"rtype" json:"rtype,omitempty"`
	Node *string `thrift:"node,2" db:"node" json:"node,omitempty"`
	Node2 *string `thrift:"node2,3" db:"node2" json:"node2,omitempty"`
	ReqInt *int64 `thrift:"reqInt,4" db:"reqInt" json:"reqInt,omitempty"`
	ReqInt2 *int64 `thrift:"reqInt2,5" db:"reqInt2" json:"reqInt2,omitempty"`
	ReqStr *string `thrift:"reqStr,6" db:"reqStr" json:"reqStr,omitempty"`
	ReqStr2 *string `thrift:"reqStr2,7" db:"reqStr2" json:"reqStr2,omitempty"`
}

func NewTimReq() *TimReq {
	return &TimReq{}
}

var TimReq_Rtype_DEFAULT int32

func (p *TimReq) GetRtype() int32 {
	if !p.IsSetRtype() {
		return TimReq_Rtype_DEFAULT
	}
	return *p.Rtype
}

var TimReq_Node_DEFAULT string

func (p *TimReq) GetNode() string {
	if !p.IsSetNode() {
		return TimReq_Node_DEFAULT
	}
	return *p.Node
}

var TimReq_Node2_DEFAULT string

func (p *TimReq) GetNode2() string {
	if !p.IsSetNode2() {
		return TimReq_Node2_DEFAULT
	}
	return *p.Node2
}

var TimReq_ReqInt_DEFAULT int64

func (p *TimReq) GetReqInt() int64 {
	if !p.IsSetReqInt() {
		return TimReq_ReqInt_DEFAULT
	}
	return *p.ReqInt
}

var TimReq_ReqInt2_DEFAULT int64

func (p *TimReq) GetReqInt2() int64 {
	if !p.IsSetReqInt2() {
		return TimReq_ReqInt2_DEFAULT
	}
	return *p.ReqInt2
}

var TimReq_ReqStr_DEFAULT string

func (p *TimReq) GetReqStr() string {
	if !p.IsSetReqStr() {
		return TimReq_ReqStr_DEFAULT
	}
	return *p.ReqStr
}

var TimReq_ReqStr2_DEFAULT string

func (p *TimReq) GetReqStr2() string {
	if !p.IsSetReqStr2() {
		return TimReq_ReqStr2_DEFAULT
	}
	return *p.ReqStr2
}

func (p *TimReq) IsSetRtype() bool {
	return p.Rtype != nil
}

func (p *TimReq) IsSetNode() bool {
	return p.Node != nil
}

func (p *TimReq) IsSetNode2() bool {
	return p.Node2 != nil
}

func (p *TimReq) IsSetReqInt() bool {
	return p.ReqInt != nil
}

func (p *TimReq) IsSetReqInt2() bool {
	return p.ReqInt2 != nil
}

func (p *TimReq) IsSetReqStr() bool {
	return p.ReqStr != nil
}

func (p *TimReq) IsSetReqStr2() bool {
	return p.ReqStr2 != nil
}

func (p *TimReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimReq) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Rtype = &v
	}
	return nil
}

func (p *TimReq) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Node = &v
	}
	return nil
}

func (p *TimReq) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Node2 = &v
	}
	return nil
}

func (p *TimReq) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReqInt = &v
	}
	return nil
}

func (p *TimReq) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ReqInt2 = &v
	}
	return nil
}

func (p *TimReq) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ReqStr = &v
	}
	return nil
}

func (p *TimReq) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ReqStr2 = &v
	}
	return nil
}

func (p *TimReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRtype() {
		if err := oprot.WriteFieldBegin(ctx, "rtype", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rtype: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Rtype)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.rtype (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rtype: ", p), err)
		}
	}
	return err
}

func (p *TimReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNode() {
		if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:node: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.node (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:node: ", p), err)
		}
	}
	return err
}

func (p *TimReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNode2() {
		if err := oprot.WriteFieldBegin(ctx, "node2", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:node2: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Node2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.node2 (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:node2: ", p), err)
		}
	}
	return err
}

func (p *TimReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReqInt() {
		if err := oprot.WriteFieldBegin(ctx, "reqInt", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqInt: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ReqInt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqInt (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqInt: ", p), err)
		}
	}
	return err
}

func (p *TimReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReqInt2() {
		if err := oprot.WriteFieldBegin(ctx, "reqInt2", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:reqInt2: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ReqInt2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqInt2 (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:reqInt2: ", p), err)
		}
	}
	return err
}

func (p *TimReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReqStr() {
		if err := oprot.WriteFieldBegin(ctx, "reqStr", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reqStr: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.ReqStr)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqStr (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reqStr: ", p), err)
		}
	}
	return err
}

func (p *TimReq) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetReqStr2() {
		if err := oprot.WriteFieldBegin(ctx, "reqStr2", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:reqStr2: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.ReqStr2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reqStr2 (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:reqStr2: ", p), err)
		}
	}
	return err
}

func (p *TimReq) Equals(other *TimReq) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Rtype != other.Rtype {
		if p.Rtype == nil || other.Rtype == nil {
			return false
		}
		if (*p.Rtype) != (*other.Rtype) { return false }
	}
	if p.Node != other.Node {
		if p.Node == nil || other.Node == nil {
			return false
		}
		if (*p.Node) != (*other.Node) { return false }
	}
	if p.Node2 != other.Node2 {
		if p.Node2 == nil || other.Node2 == nil {
			return false
		}
		if (*p.Node2) != (*other.Node2) { return false }
	}
	if p.ReqInt != other.ReqInt {
		if p.ReqInt == nil || other.ReqInt == nil {
			return false
		}
		if (*p.ReqInt) != (*other.ReqInt) { return false }
	}
	if p.ReqInt2 != other.ReqInt2 {
		if p.ReqInt2 == nil || other.ReqInt2 == nil {
			return false
		}
		if (*p.ReqInt2) != (*other.ReqInt2) { return false }
	}
	if p.ReqStr != other.ReqStr {
		if p.ReqStr == nil || other.ReqStr == nil {
			return false
		}
		if (*p.ReqStr) != (*other.ReqStr) { return false }
	}
	if p.ReqStr2 != other.ReqStr2 {
		if p.ReqStr2 == nil || other.ReqStr2 == nil {
			return false
		}
		if (*p.ReqStr2) != (*other.ReqStr2) { return false }
	}
	return true
}

func (p *TimReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimReq(%+v)", *p)
}

func (p *TimReq) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimReq",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimReq)(nil)

func (p *TimReq) Validate() error {
	return nil
}

// Attributes:
//  - Node
//  - Domain
//  - Resource
//  - Termtyp
//  - Extend
// 
type Tid struct {
	Node string `thrift:"node,1,required" db:"node" json:"node"`
	Domain *string `thrift:"domain,2" db:"domain" json:"domain,omitempty"`
	Resource *string `thrift:"resource,3" db:"resource" json:"resource,omitempty"`
	Termtyp *int8 `thrift:"termtyp,4" db:"termtyp" json:"termtyp,omitempty"`
	Extend map[string]string `thrift:"extend,5" db:"extend" json:"extend,omitempty"`
}

func NewTid() *Tid {
	return &Tid{}
}



func (p *Tid) GetNode() string {
	return p.Node
}

var Tid_Domain_DEFAULT string

func (p *Tid) GetDomain() string {
	if !p.IsSetDomain() {
		return Tid_Domain_DEFAULT
	}
	return *p.Domain
}

var Tid_Resource_DEFAULT string

func (p *Tid) GetResource() string {
	if !p.IsSetResource() {
		return Tid_Resource_DEFAULT
	}
	return *p.Resource
}

var Tid_Termtyp_DEFAULT int8

func (p *Tid) GetTermtyp() int8 {
	if !p.IsSetTermtyp() {
		return Tid_Termtyp_DEFAULT
	}
	return *p.Termtyp
}

var Tid_Extend_DEFAULT map[string]string


func (p *Tid) GetExtend() map[string]string {
	return p.Extend
}

func (p *Tid) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *Tid) IsSetResource() bool {
	return p.Resource != nil
}

func (p *Tid) IsSetTermtyp() bool {
	return p.Termtyp != nil
}

func (p *Tid) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *Tid) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNode bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetNode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNode{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Node is not set"));
	}
	return nil
}

func (p *Tid) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Node = v
	}
	return nil
}

func (p *Tid) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *Tid) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Resource = &v
	}
	return nil
}

func (p *Tid) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Termtyp = &temp
	}
	return nil
}

func (p *Tid) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Extend[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *Tid) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Tid"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Tid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Node)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err)
	}
	return err
}

func (p *Tid) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err)
		}
	}
	return err
}

func (p *Tid) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err := oprot.WriteFieldBegin(ctx, "resource", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resource: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Resource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resource (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resource: ", p), err)
		}
	}
	return err
}

func (p *Tid) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTermtyp() {
		if err := oprot.WriteFieldBegin(ctx, "termtyp", thrift.BYTE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:termtyp: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Termtyp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.termtyp (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:termtyp: ", p), err)
		}
	}
	return err
}

func (p *Tid) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extend: ", p), err)
		}
	}
	return err
}

func (p *Tid) Equals(other *Tid) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Node != other.Node { return false }
	if p.Domain != other.Domain {
		if p.Domain == nil || other.Domain == nil {
			return false
		}
		if (*p.Domain) != (*other.Domain) { return false }
	}
	if p.Resource != other.Resource {
		if p.Resource == nil || other.Resource == nil {
			return false
		}
		if (*p.Resource) != (*other.Resource) { return false }
	}
	if p.Termtyp != other.Termtyp {
		if p.Termtyp == nil || other.Termtyp == nil {
			return false
		}
		if (*p.Termtyp) != (*other.Termtyp) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src2 := other.Extend[k]
		if _tgt != _src2 { return false }
	}
	return true
}

func (p *Tid) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tid(%+v)", *p)
}

func (p *Tid) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.Tid",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Tid)(nil)

func (p *Tid) Validate() error {
	return nil
}

// Attributes:
//  - Name
//  - NickName
//  - Brithday
//  - Gender
//  - Cover
//  - Area
//  - Createtime
//  - PhotoTidAlbum
//  - Extend
//  - Extra
// 
type TimUserBean struct {
	Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
	NickName *string `thrift:"nickName,2" db:"nickName" json:"nickName,omitempty"`
	// unused field # 3
	Brithday *string `thrift:"brithday,4" db:"brithday" json:"brithday,omitempty"`
	Gender *int8 `thrift:"gender,5" db:"gender" json:"gender,omitempty"`
	Cover *string `thrift:"cover,6" db:"cover" json:"cover,omitempty"`
	Area *string `thrift:"area,7" db:"area" json:"area,omitempty"`
	Createtime *int64 `thrift:"createtime,8" db:"createtime" json:"createtime,omitempty"`
	PhotoTidAlbum []string `thrift:"photoTidAlbum,9" db:"photoTidAlbum" json:"photoTidAlbum,omitempty"`
	Extend map[string]string `thrift:"extend,10" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,11" db:"extra" json:"extra,omitempty"`
}

func NewTimUserBean() *TimUserBean {
	return &TimUserBean{}
}

var TimUserBean_Name_DEFAULT string

func (p *TimUserBean) GetName() string {
	if !p.IsSetName() {
		return TimUserBean_Name_DEFAULT
	}
	return *p.Name
}

var TimUserBean_NickName_DEFAULT string

func (p *TimUserBean) GetNickName() string {
	if !p.IsSetNickName() {
		return TimUserBean_NickName_DEFAULT
	}
	return *p.NickName
}

var TimUserBean_Brithday_DEFAULT string

func (p *TimUserBean) GetBrithday() string {
	if !p.IsSetBrithday() {
		return TimUserBean_Brithday_DEFAULT
	}
	return *p.Brithday
}

var TimUserBean_Gender_DEFAULT int8

func (p *TimUserBean) GetGender() int8 {
	if !p.IsSetGender() {
		return TimUserBean_Gender_DEFAULT
	}
	return *p.Gender
}

var TimUserBean_Cover_DEFAULT string

func (p *TimUserBean) GetCover() string {
	if !p.IsSetCover() {
		return TimUserBean_Cover_DEFAULT
	}
	return *p.Cover
}

var TimUserBean_Area_DEFAULT string

func (p *TimUserBean) GetArea() string {
	if !p.IsSetArea() {
		return TimUserBean_Area_DEFAULT
	}
	return *p.Area
}

var TimUserBean_Createtime_DEFAULT int64

func (p *TimUserBean) GetCreatetime() int64 {
	if !p.IsSetCreatetime() {
		return TimUserBean_Createtime_DEFAULT
	}
	return *p.Createtime
}

var TimUserBean_PhotoTidAlbum_DEFAULT []string


func (p *TimUserBean) GetPhotoTidAlbum() []string {
	return p.PhotoTidAlbum
}

var TimUserBean_Extend_DEFAULT map[string]string


func (p *TimUserBean) GetExtend() map[string]string {
	return p.Extend
}

var TimUserBean_Extra_DEFAULT map[string][]byte


func (p *TimUserBean) GetExtra() map[string][]byte {
	return p.Extra
}

func (p *TimUserBean) IsSetName() bool {
	return p.Name != nil
}

func (p *TimUserBean) IsSetNickName() bool {
	return p.NickName != nil
}

func (p *TimUserBean) IsSetBrithday() bool {
	return p.Brithday != nil
}

func (p *TimUserBean) IsSetGender() bool {
	return p.Gender != nil
}

func (p *TimUserBean) IsSetCover() bool {
	return p.Cover != nil
}

func (p *TimUserBean) IsSetArea() bool {
	return p.Area != nil
}

func (p *TimUserBean) IsSetCreatetime() bool {
	return p.Createtime != nil
}

func (p *TimUserBean) IsSetPhotoTidAlbum() bool {
	return p.PhotoTidAlbum != nil
}

func (p *TimUserBean) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *TimUserBean) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *TimUserBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimUserBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TimUserBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NickName = &v
	}
	return nil
}

func (p *TimUserBean) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Brithday = &v
	}
	return nil
}

func (p *TimUserBean) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Gender = &temp
	}
	return nil
}

func (p *TimUserBean) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Cover = &v
	}
	return nil
}

func (p *TimUserBean) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Area = &v
	}
	return nil
}

func (p *TimUserBean) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Createtime = &v
	}
	return nil
}

func (p *TimUserBean) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PhotoTidAlbum = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.PhotoTidAlbum = append(p.PhotoTidAlbum, _elem3)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimUserBean) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val5 = v
		}
		p.Extend[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimUserBean) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key6 = v
		}
		var _val7 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val7 = v
		}
		p.Extra[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimUserBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimUserBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimUserBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNickName() {
		if err := oprot.WriteFieldBegin(ctx, "nickName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nickName: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.NickName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nickName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nickName: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBrithday() {
		if err := oprot.WriteFieldBegin(ctx, "brithday", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:brithday: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Brithday)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.brithday (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:brithday: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetGender() {
		if err := oprot.WriteFieldBegin(ctx, "gender", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gender: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Gender)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gender (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gender: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCover() {
		if err := oprot.WriteFieldBegin(ctx, "cover", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cover: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Cover)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cover (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cover: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetArea() {
		if err := oprot.WriteFieldBegin(ctx, "area", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:area: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Area)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.area (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:area: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatetime() {
		if err := oprot.WriteFieldBegin(ctx, "createtime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createtime: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Createtime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createtime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createtime: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPhotoTidAlbum() {
		if err := oprot.WriteFieldBegin(ctx, "photoTidAlbum", thrift.LIST, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:photoTidAlbum: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.PhotoTidAlbum)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PhotoTidAlbum {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:photoTidAlbum: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extend: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extra: ", p), err)
		}
	}
	return err
}

func (p *TimUserBean) Equals(other *TimUserBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		if p.Name == nil || other.Name == nil {
			return false
		}
		if (*p.Name) != (*other.Name) { return false }
	}
	if p.NickName != other.NickName {
		if p.NickName == nil || other.NickName == nil {
			return false
		}
		if (*p.NickName) != (*other.NickName) { return false }
	}
	if p.Brithday != other.Brithday {
		if p.Brithday == nil || other.Brithday == nil {
			return false
		}
		if (*p.Brithday) != (*other.Brithday) { return false }
	}
	if p.Gender != other.Gender {
		if p.Gender == nil || other.Gender == nil {
			return false
		}
		if (*p.Gender) != (*other.Gender) { return false }
	}
	if p.Cover != other.Cover {
		if p.Cover == nil || other.Cover == nil {
			return false
		}
		if (*p.Cover) != (*other.Cover) { return false }
	}
	if p.Area != other.Area {
		if p.Area == nil || other.Area == nil {
			return false
		}
		if (*p.Area) != (*other.Area) { return false }
	}
	if p.Createtime != other.Createtime {
		if p.Createtime == nil || other.Createtime == nil {
			return false
		}
		if (*p.Createtime) != (*other.Createtime) { return false }
	}
	if len(p.PhotoTidAlbum) != len(other.PhotoTidAlbum) { return false }
	for i, _tgt := range p.PhotoTidAlbum {
		_src8 := other.PhotoTidAlbum[i]
		if _tgt != _src8 { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src9 := other.Extend[k]
		if _tgt != _src9 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src10 := other.Extra[k]
		if bytes.Compare(_tgt, _src10) != 0 { return false }
	}
	return true
}

func (p *TimUserBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimUserBean(%+v)", *p)
}

func (p *TimUserBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimUserBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimUserBean)(nil)

func (p *TimUserBean) Validate() error {
	return nil
}

// Attributes:
//  - Founder
//  - Managers
//  - Cover
//  - Topic
//  - Label
//  - Gtype
//  - Kind
//  - Createtime
//  - Extend
//  - Extra
// 
type TimRoomBean struct {
	Founder *string `thrift:"founder,1" db:"founder" json:"founder,omitempty"`
	Managers []string `thrift:"managers,2" db:"managers" json:"managers,omitempty"`
	Cover *string `thrift:"cover,3" db:"cover" json:"cover,omitempty"`
	Topic *string `thrift:"topic,4" db:"topic" json:"topic,omitempty"`
	Label *string `thrift:"label,5" db:"label" json:"label,omitempty"`
	Gtype *int8 `thrift:"gtype,6" db:"gtype" json:"gtype,omitempty"`
	Kind *int64 `thrift:"kind,7" db:"kind" json:"kind,omitempty"`
	Createtime *int64 `thrift:"createtime,8" db:"createtime" json:"createtime,omitempty"`
	Extend map[string]string `thrift:"extend,9" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,10" db:"extra" json:"extra,omitempty"`
}

func NewTimRoomBean() *TimRoomBean {
	return &TimRoomBean{}
}

var TimRoomBean_Founder_DEFAULT string

func (p *TimRoomBean) GetFounder() string {
	if !p.IsSetFounder() {
		return TimRoomBean_Founder_DEFAULT
	}
	return *p.Founder
}

var TimRoomBean_Managers_DEFAULT []string


func (p *TimRoomBean) GetManagers() []string {
	return p.Managers
}

var TimRoomBean_Cover_DEFAULT string

func (p *TimRoomBean) GetCover() string {
	if !p.IsSetCover() {
		return TimRoomBean_Cover_DEFAULT
	}
	return *p.Cover
}

var TimRoomBean_Topic_DEFAULT string

func (p *TimRoomBean) GetTopic() string {
	if !p.IsSetTopic() {
		return TimRoomBean_Topic_DEFAULT
	}
	return *p.Topic
}

var TimRoomBean_Label_DEFAULT string

func (p *TimRoomBean) GetLabel() string {
	if !p.IsSetLabel() {
		return TimRoomBean_Label_DEFAULT
	}
	return *p.Label
}

var TimRoomBean_Gtype_DEFAULT int8

func (p *TimRoomBean) GetGtype() int8 {
	if !p.IsSetGtype() {
		return TimRoomBean_Gtype_DEFAULT
	}
	return *p.Gtype
}

var TimRoomBean_Kind_DEFAULT int64

func (p *TimRoomBean) GetKind() int64 {
	if !p.IsSetKind() {
		return TimRoomBean_Kind_DEFAULT
	}
	return *p.Kind
}

var TimRoomBean_Createtime_DEFAULT int64

func (p *TimRoomBean) GetCreatetime() int64 {
	if !p.IsSetCreatetime() {
		return TimRoomBean_Createtime_DEFAULT
	}
	return *p.Createtime
}

var TimRoomBean_Extend_DEFAULT map[string]string


func (p *TimRoomBean) GetExtend() map[string]string {
	return p.Extend
}

var TimRoomBean_Extra_DEFAULT map[string][]byte


func (p *TimRoomBean) GetExtra() map[string][]byte {
	return p.Extra
}

func (p *TimRoomBean) IsSetFounder() bool {
	return p.Founder != nil
}

func (p *TimRoomBean) IsSetManagers() bool {
	return p.Managers != nil
}

func (p *TimRoomBean) IsSetCover() bool {
	return p.Cover != nil
}

func (p *TimRoomBean) IsSetTopic() bool {
	return p.Topic != nil
}

func (p *TimRoomBean) IsSetLabel() bool {
	return p.Label != nil
}

func (p *TimRoomBean) IsSetGtype() bool {
	return p.Gtype != nil
}

func (p *TimRoomBean) IsSetKind() bool {
	return p.Kind != nil
}

func (p *TimRoomBean) IsSetCreatetime() bool {
	return p.Createtime != nil
}

func (p *TimRoomBean) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *TimRoomBean) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *TimRoomBean) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimRoomBean) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Founder = &v
	}
	return nil
}

func (p *TimRoomBean) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Managers = tSlice
	for i := 0; i < size; i++ {
		var _elem11 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem11 = v
		}
		p.Managers = append(p.Managers, _elem11)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimRoomBean) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Cover = &v
	}
	return nil
}

func (p *TimRoomBean) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Topic = &v
	}
	return nil
}

func (p *TimRoomBean) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Label = &v
	}
	return nil
}

func (p *TimRoomBean) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := int8(v)
		p.Gtype = &temp
	}
	return nil
}

func (p *TimRoomBean) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Kind = &v
	}
	return nil
}

func (p *TimRoomBean) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Createtime = &v
	}
	return nil
}

func (p *TimRoomBean) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key12 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key12 = v
		}
		var _val13 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val13 = v
		}
		p.Extend[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimRoomBean) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		var _val15 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.Extra[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimRoomBean) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimRoomBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimRoomBean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFounder() {
		if err := oprot.WriteFieldBegin(ctx, "founder", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:founder: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Founder)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.founder (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:founder: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetManagers() {
		if err := oprot.WriteFieldBegin(ctx, "managers", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:managers: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Managers)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Managers {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:managers: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCover() {
		if err := oprot.WriteFieldBegin(ctx, "cover", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cover: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Cover)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cover (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cover: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTopic() {
		if err := oprot.WriteFieldBegin(ctx, "topic", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:topic: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Topic)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.topic (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:topic: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetLabel() {
		if err := oprot.WriteFieldBegin(ctx, "label", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:label: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Label)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.label (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:label: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetGtype() {
		if err := oprot.WriteFieldBegin(ctx, "gtype", thrift.BYTE, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gtype: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Gtype)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gtype (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gtype: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetKind() {
		if err := oprot.WriteFieldBegin(ctx, "kind", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:kind: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Kind)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.kind (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:kind: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatetime() {
		if err := oprot.WriteFieldBegin(ctx, "createtime", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createtime: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Createtime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createtime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createtime: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extend: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extra: ", p), err)
		}
	}
	return err
}

func (p *TimRoomBean) Equals(other *TimRoomBean) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Founder != other.Founder {
		if p.Founder == nil || other.Founder == nil {
			return false
		}
		if (*p.Founder) != (*other.Founder) { return false }
	}
	if len(p.Managers) != len(other.Managers) { return false }
	for i, _tgt := range p.Managers {
		_src16 := other.Managers[i]
		if _tgt != _src16 { return false }
	}
	if p.Cover != other.Cover {
		if p.Cover == nil || other.Cover == nil {
			return false
		}
		if (*p.Cover) != (*other.Cover) { return false }
	}
	if p.Topic != other.Topic {
		if p.Topic == nil || other.Topic == nil {
			return false
		}
		if (*p.Topic) != (*other.Topic) { return false }
	}
	if p.Label != other.Label {
		if p.Label == nil || other.Label == nil {
			return false
		}
		if (*p.Label) != (*other.Label) { return false }
	}
	if p.Gtype != other.Gtype {
		if p.Gtype == nil || other.Gtype == nil {
			return false
		}
		if (*p.Gtype) != (*other.Gtype) { return false }
	}
	if p.Kind != other.Kind {
		if p.Kind == nil || other.Kind == nil {
			return false
		}
		if (*p.Kind) != (*other.Kind) { return false }
	}
	if p.Createtime != other.Createtime {
		if p.Createtime == nil || other.Createtime == nil {
			return false
		}
		if (*p.Createtime) != (*other.Createtime) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src17 := other.Extend[k]
		if _tgt != _src17 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src18 := other.Extra[k]
		if bytes.Compare(_tgt, _src18) != 0 { return false }
	}
	return true
}

func (p *TimRoomBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimRoomBean(%+v)", *p)
}

func (p *TimRoomBean) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimRoomBean",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimRoomBean)(nil)

func (p *TimRoomBean) Validate() error {
	return nil
}

// Attributes:
//  - Name
//  - Pwd
//  - Domain
//  - Resource
//  - Termtyp
//  - Token
//  - Extend
// 
type TimAuth struct {
	Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
	Pwd *string `thrift:"pwd,2" db:"pwd" json:"pwd,omitempty"`
	Domain *string `thrift:"domain,3" db:"domain" json:"domain,omitempty"`
	Resource *string `thrift:"resource,4" db:"resource" json:"resource,omitempty"`
	Termtyp *int8 `thrift:"termtyp,5" db:"termtyp" json:"termtyp,omitempty"`
	Token *int64 `thrift:"token,6" db:"token" json:"token,omitempty"`
	Extend map[string]string `thrift:"extend,7" db:"extend" json:"extend,omitempty"`
}

func NewTimAuth() *TimAuth {
	return &TimAuth{}
}

var TimAuth_Name_DEFAULT string

func (p *TimAuth) GetName() string {
	if !p.IsSetName() {
		return TimAuth_Name_DEFAULT
	}
	return *p.Name
}

var TimAuth_Pwd_DEFAULT string

func (p *TimAuth) GetPwd() string {
	if !p.IsSetPwd() {
		return TimAuth_Pwd_DEFAULT
	}
	return *p.Pwd
}

var TimAuth_Domain_DEFAULT string

func (p *TimAuth) GetDomain() string {
	if !p.IsSetDomain() {
		return TimAuth_Domain_DEFAULT
	}
	return *p.Domain
}

var TimAuth_Resource_DEFAULT string

func (p *TimAuth) GetResource() string {
	if !p.IsSetResource() {
		return TimAuth_Resource_DEFAULT
	}
	return *p.Resource
}

var TimAuth_Termtyp_DEFAULT int8

func (p *TimAuth) GetTermtyp() int8 {
	if !p.IsSetTermtyp() {
		return TimAuth_Termtyp_DEFAULT
	}
	return *p.Termtyp
}

var TimAuth_Token_DEFAULT int64

func (p *TimAuth) GetToken() int64 {
	if !p.IsSetToken() {
		return TimAuth_Token_DEFAULT
	}
	return *p.Token
}

var TimAuth_Extend_DEFAULT map[string]string


func (p *TimAuth) GetExtend() map[string]string {
	return p.Extend
}

func (p *TimAuth) IsSetName() bool {
	return p.Name != nil
}

func (p *TimAuth) IsSetPwd() bool {
	return p.Pwd != nil
}

func (p *TimAuth) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *TimAuth) IsSetResource() bool {
	return p.Resource != nil
}

func (p *TimAuth) IsSetTermtyp() bool {
	return p.Termtyp != nil
}

func (p *TimAuth) IsSetToken() bool {
	return p.Token != nil
}

func (p *TimAuth) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *TimAuth) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimAuth) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TimAuth) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Pwd = &v
	}
	return nil
}

func (p *TimAuth) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *TimAuth) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Resource = &v
	}
	return nil
}

func (p *TimAuth) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Termtyp = &temp
	}
	return nil
}

func (p *TimAuth) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Token = &v
	}
	return nil
}

func (p *TimAuth) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key19 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key19 = v
		}
		var _val20 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val20 = v
		}
		p.Extend[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimAuth) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimAuth"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimAuth) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
		}
	}
	return err
}

func (p *TimAuth) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetPwd() {
		if err := oprot.WriteFieldBegin(ctx, "pwd", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pwd: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Pwd)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pwd (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pwd: ", p), err)
		}
	}
	return err
}

func (p *TimAuth) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:domain: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:domain: ", p), err)
		}
	}
	return err
}

func (p *TimAuth) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetResource() {
		if err := oprot.WriteFieldBegin(ctx, "resource", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resource: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Resource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resource (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resource: ", p), err)
		}
	}
	return err
}

func (p *TimAuth) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTermtyp() {
		if err := oprot.WriteFieldBegin(ctx, "termtyp", thrift.BYTE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:termtyp: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Termtyp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.termtyp (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:termtyp: ", p), err)
		}
	}
	return err
}

func (p *TimAuth) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err := oprot.WriteFieldBegin(ctx, "token", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:token: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Token)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.token (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:token: ", p), err)
		}
	}
	return err
}

func (p *TimAuth) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extend: ", p), err)
		}
	}
	return err
}

func (p *TimAuth) Equals(other *TimAuth) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Name != other.Name {
		if p.Name == nil || other.Name == nil {
			return false
		}
		if (*p.Name) != (*other.Name) { return false }
	}
	if p.Pwd != other.Pwd {
		if p.Pwd == nil || other.Pwd == nil {
			return false
		}
		if (*p.Pwd) != (*other.Pwd) { return false }
	}
	if p.Domain != other.Domain {
		if p.Domain == nil || other.Domain == nil {
			return false
		}
		if (*p.Domain) != (*other.Domain) { return false }
	}
	if p.Resource != other.Resource {
		if p.Resource == nil || other.Resource == nil {
			return false
		}
		if (*p.Resource) != (*other.Resource) { return false }
	}
	if p.Termtyp != other.Termtyp {
		if p.Termtyp == nil || other.Termtyp == nil {
			return false
		}
		if (*p.Termtyp) != (*other.Termtyp) { return false }
	}
	if p.Token != other.Token {
		if p.Token == nil || other.Token == nil {
			return false
		}
		if (*p.Token) != (*other.Token) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src21 := other.Extend[k]
		if _tgt != _src21 { return false }
	}
	return true
}

func (p *TimAuth) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimAuth(%+v)", *p)
}

func (p *TimAuth) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimAuth",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimAuth)(nil)

func (p *TimAuth) Validate() error {
	return nil
}

// Attributes:
//  - ID
//  - Offline
//  - SubStatus
//  - FromTid
//  - ToTid
//  - ToList
//  - Show
//  - Status
//  - Extend
//  - Extra
// 
type TimPresence struct {
	ID *int64 `thrift:"id,1" db:"id" json:"id,omitempty"`
	Offline *bool `thrift:"offline,2" db:"offline" json:"offline,omitempty"`
	SubStatus *int8 `thrift:"subStatus,3" db:"subStatus" json:"subStatus,omitempty"`
	FromTid *Tid `thrift:"fromTid,4" db:"fromTid" json:"fromTid,omitempty"`
	ToTid *Tid `thrift:"toTid,5" db:"toTid" json:"toTid,omitempty"`
	ToList []string `thrift:"toList,6" db:"toList" json:"toList,omitempty"`
	Show *int16 `thrift:"show,7" db:"show" json:"show,omitempty"`
	Status *string `thrift:"status,8" db:"status" json:"status,omitempty"`
	Extend map[string]string `thrift:"extend,9" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,10" db:"extra" json:"extra,omitempty"`
}

func NewTimPresence() *TimPresence {
	return &TimPresence{}
}

var TimPresence_ID_DEFAULT int64

func (p *TimPresence) GetID() int64 {
	if !p.IsSetID() {
		return TimPresence_ID_DEFAULT
	}
	return *p.ID
}

var TimPresence_Offline_DEFAULT bool

func (p *TimPresence) GetOffline() bool {
	if !p.IsSetOffline() {
		return TimPresence_Offline_DEFAULT
	}
	return *p.Offline
}

var TimPresence_SubStatus_DEFAULT int8

func (p *TimPresence) GetSubStatus() int8 {
	if !p.IsSetSubStatus() {
		return TimPresence_SubStatus_DEFAULT
	}
	return *p.SubStatus
}

var TimPresence_FromTid_DEFAULT *Tid

func (p *TimPresence) GetFromTid() *Tid {
	if !p.IsSetFromTid() {
		return TimPresence_FromTid_DEFAULT
	}
	return p.FromTid
}

var TimPresence_ToTid_DEFAULT *Tid

func (p *TimPresence) GetToTid() *Tid {
	if !p.IsSetToTid() {
		return TimPresence_ToTid_DEFAULT
	}
	return p.ToTid
}

var TimPresence_ToList_DEFAULT []string


func (p *TimPresence) GetToList() []string {
	return p.ToList
}

var TimPresence_Show_DEFAULT int16

func (p *TimPresence) GetShow() int16 {
	if !p.IsSetShow() {
		return TimPresence_Show_DEFAULT
	}
	return *p.Show
}

var TimPresence_Status_DEFAULT string

func (p *TimPresence) GetStatus() string {
	if !p.IsSetStatus() {
		return TimPresence_Status_DEFAULT
	}
	return *p.Status
}

var TimPresence_Extend_DEFAULT map[string]string


func (p *TimPresence) GetExtend() map[string]string {
	return p.Extend
}

var TimPresence_Extra_DEFAULT map[string][]byte


func (p *TimPresence) GetExtra() map[string][]byte {
	return p.Extra
}

func (p *TimPresence) IsSetID() bool {
	return p.ID != nil
}

func (p *TimPresence) IsSetOffline() bool {
	return p.Offline != nil
}

func (p *TimPresence) IsSetSubStatus() bool {
	return p.SubStatus != nil
}

func (p *TimPresence) IsSetFromTid() bool {
	return p.FromTid != nil
}

func (p *TimPresence) IsSetToTid() bool {
	return p.ToTid != nil
}

func (p *TimPresence) IsSetToList() bool {
	return p.ToList != nil
}

func (p *TimPresence) IsSetShow() bool {
	return p.Show != nil
}

func (p *TimPresence) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TimPresence) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *TimPresence) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *TimPresence) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimPresence) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *TimPresence) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Offline = &v
	}
	return nil
}

func (p *TimPresence) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.SubStatus = &temp
	}
	return nil
}

func (p *TimPresence) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.FromTid = &Tid{}
	if err := p.FromTid.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
	}
	return nil
}

func (p *TimPresence) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.ToTid = &Tid{}
	if err := p.ToTid.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
	}
	return nil
}

func (p *TimPresence) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ToList = tSlice
	for i := 0; i < size; i++ {
		var _elem22 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem22 = v
		}
		p.ToList = append(p.ToList, _elem22)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimPresence) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Show = &v
	}
	return nil
}

func (p *TimPresence) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TimPresence) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key23 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key23 = v
		}
		var _val24 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val24 = v
		}
		p.Extend[_key23] = _val24
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimPresence) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key25 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key25 = v
		}
		var _val26 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val26 = v
		}
		p.Extra[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimPresence) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimPresence"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimPresence) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetOffline() {
		if err := oprot.WriteFieldBegin(ctx, "offline", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offline: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.Offline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.offline (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offline: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSubStatus() {
		if err := oprot.WriteFieldBegin(ctx, "subStatus", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subStatus: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.SubStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subStatus (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subStatus: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTid() {
		if err := oprot.WriteFieldBegin(ctx, "fromTid", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fromTid: ", p), err)
		}
		if err := p.FromTid.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fromTid: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToTid() {
		if err := oprot.WriteFieldBegin(ctx, "toTid", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:toTid: ", p), err)
		}
		if err := p.ToTid.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:toTid: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToList() {
		if err := oprot.WriteFieldBegin(ctx, "toList", thrift.LIST, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:toList: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ToList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ToList {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:toList: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetShow() {
		if err := oprot.WriteFieldBegin(ctx, "show", thrift.I16, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:show: ", p), err)
		}
		if err := oprot.WriteI16(ctx, int16(*p.Show)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.show (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:show: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:extend: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:extra: ", p), err)
		}
	}
	return err
}

func (p *TimPresence) Equals(other *TimPresence) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		if p.ID == nil || other.ID == nil {
			return false
		}
		if (*p.ID) != (*other.ID) { return false }
	}
	if p.Offline != other.Offline {
		if p.Offline == nil || other.Offline == nil {
			return false
		}
		if (*p.Offline) != (*other.Offline) { return false }
	}
	if p.SubStatus != other.SubStatus {
		if p.SubStatus == nil || other.SubStatus == nil {
			return false
		}
		if (*p.SubStatus) != (*other.SubStatus) { return false }
	}
	if !p.FromTid.Equals(other.FromTid) { return false }
	if !p.ToTid.Equals(other.ToTid) { return false }
	if len(p.ToList) != len(other.ToList) { return false }
	for i, _tgt := range p.ToList {
		_src27 := other.ToList[i]
		if _tgt != _src27 { return false }
	}
	if p.Show != other.Show {
		if p.Show == nil || other.Show == nil {
			return false
		}
		if (*p.Show) != (*other.Show) { return false }
	}
	if p.Status != other.Status {
		if p.Status == nil || other.Status == nil {
			return false
		}
		if (*p.Status) != (*other.Status) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src28 := other.Extend[k]
		if _tgt != _src28 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src29 := other.Extra[k]
		if bytes.Compare(_tgt, _src29) != 0 { return false }
	}
	return true
}

func (p *TimPresence) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimPresence(%+v)", *p)
}

func (p *TimPresence) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimPresence",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimPresence)(nil)

func (p *TimPresence) Validate() error {
	return nil
}

// Attributes:
//  - MsType
//  - OdType
//  - ID
//  - Mid
//  - BnType
//  - FromTid
//  - ToTid
//  - RoomTid
//  - DataBinary
//  - DataString
//  - IsOffline
//  - Timestamp
//  - Udtype
//  - Udshow
//  - Extend
//  - Extra
//  - ToList
// 
type TimMessage struct {
	MsType int8 `thrift:"msType,1,required" db:"msType" json:"msType"`
	OdType int8 `thrift:"odType,2,required" db:"odType" json:"odType"`
	ID *int64 `thrift:"id,3" db:"id" json:"id,omitempty"`
	Mid *int64 `thrift:"mid,4" db:"mid" json:"mid,omitempty"`
	BnType *int32 `thrift:"bnType,5" db:"bnType" json:"bnType,omitempty"`
	FromTid *Tid `thrift:"fromTid,6" db:"fromTid" json:"fromTid,omitempty"`
	ToTid *Tid `thrift:"toTid,7" db:"toTid" json:"toTid,omitempty"`
	RoomTid *Tid `thrift:"roomTid,8" db:"roomTid" json:"roomTid,omitempty"`
	DataBinary []byte `thrift:"dataBinary,9" db:"dataBinary" json:"dataBinary,omitempty"`
	DataString *string `thrift:"dataString,10" db:"dataString" json:"dataString,omitempty"`
	IsOffline *bool `thrift:"isOffline,11" db:"isOffline" json:"isOffline,omitempty"`
	Timestamp *int64 `thrift:"timestamp,12" db:"timestamp" json:"timestamp,omitempty"`
	Udtype *int16 `thrift:"udtype,13" db:"udtype" json:"udtype,omitempty"`
	Udshow *int16 `thrift:"udshow,14" db:"udshow" json:"udshow,omitempty"`
	Extend map[string]string `thrift:"extend,15" db:"extend" json:"extend,omitempty"`
	Extra map[string][]byte `thrift:"extra,16" db:"extra" json:"extra,omitempty"`
	ToList []string `thrift:"ToList,17" db:"ToList" json:"ToList,omitempty"`
}

func NewTimMessage() *TimMessage {
	return &TimMessage{}
}



func (p *TimMessage) GetMsType() int8 {
	return p.MsType
}



func (p *TimMessage) GetOdType() int8 {
	return p.OdType
}

var TimMessage_ID_DEFAULT int64

func (p *TimMessage) GetID() int64 {
	if !p.IsSetID() {
		return TimMessage_ID_DEFAULT
	}
	return *p.ID
}

var TimMessage_Mid_DEFAULT int64

func (p *TimMessage) GetMid() int64 {
	if !p.IsSetMid() {
		return TimMessage_Mid_DEFAULT
	}
	return *p.Mid
}

var TimMessage_BnType_DEFAULT int32

func (p *TimMessage) GetBnType() int32 {
	if !p.IsSetBnType() {
		return TimMessage_BnType_DEFAULT
	}
	return *p.BnType
}

var TimMessage_FromTid_DEFAULT *Tid

func (p *TimMessage) GetFromTid() *Tid {
	if !p.IsSetFromTid() {
		return TimMessage_FromTid_DEFAULT
	}
	return p.FromTid
}

var TimMessage_ToTid_DEFAULT *Tid

func (p *TimMessage) GetToTid() *Tid {
	if !p.IsSetToTid() {
		return TimMessage_ToTid_DEFAULT
	}
	return p.ToTid
}

var TimMessage_RoomTid_DEFAULT *Tid

func (p *TimMessage) GetRoomTid() *Tid {
	if !p.IsSetRoomTid() {
		return TimMessage_RoomTid_DEFAULT
	}
	return p.RoomTid
}

var TimMessage_DataBinary_DEFAULT []byte


func (p *TimMessage) GetDataBinary() []byte {
	return p.DataBinary
}

var TimMessage_DataString_DEFAULT string

func (p *TimMessage) GetDataString() string {
	if !p.IsSetDataString() {
		return TimMessage_DataString_DEFAULT
	}
	return *p.DataString
}

var TimMessage_IsOffline_DEFAULT bool

func (p *TimMessage) GetIsOffline() bool {
	if !p.IsSetIsOffline() {
		return TimMessage_IsOffline_DEFAULT
	}
	return *p.IsOffline
}

var TimMessage_Timestamp_DEFAULT int64

func (p *TimMessage) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TimMessage_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TimMessage_Udtype_DEFAULT int16

func (p *TimMessage) GetUdtype() int16 {
	if !p.IsSetUdtype() {
		return TimMessage_Udtype_DEFAULT
	}
	return *p.Udtype
}

var TimMessage_Udshow_DEFAULT int16

func (p *TimMessage) GetUdshow() int16 {
	if !p.IsSetUdshow() {
		return TimMessage_Udshow_DEFAULT
	}
	return *p.Udshow
}

var TimMessage_Extend_DEFAULT map[string]string


func (p *TimMessage) GetExtend() map[string]string {
	return p.Extend
}

var TimMessage_Extra_DEFAULT map[string][]byte


func (p *TimMessage) GetExtra() map[string][]byte {
	return p.Extra
}

var TimMessage_ToList_DEFAULT []string


func (p *TimMessage) GetToList() []string {
	return p.ToList
}

func (p *TimMessage) IsSetID() bool {
	return p.ID != nil
}

func (p *TimMessage) IsSetMid() bool {
	return p.Mid != nil
}

func (p *TimMessage) IsSetBnType() bool {
	return p.BnType != nil
}

func (p *TimMessage) IsSetFromTid() bool {
	return p.FromTid != nil
}

func (p *TimMessage) IsSetToTid() bool {
	return p.ToTid != nil
}

func (p *TimMessage) IsSetRoomTid() bool {
	return p.RoomTid != nil
}

func (p *TimMessage) IsSetDataBinary() bool {
	return p.DataBinary != nil
}

func (p *TimMessage) IsSetDataString() bool {
	return p.DataString != nil
}

func (p *TimMessage) IsSetIsOffline() bool {
	return p.IsOffline != nil
}

func (p *TimMessage) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TimMessage) IsSetUdtype() bool {
	return p.Udtype != nil
}

func (p *TimMessage) IsSetUdshow() bool {
	return p.Udshow != nil
}

func (p *TimMessage) IsSetExtend() bool {
	return p.Extend != nil
}

func (p *TimMessage) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *TimMessage) IsSetToList() bool {
	return p.ToList != nil
}

func (p *TimMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMsType bool = false;
	var issetOdType bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetMsType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetOdType = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMsType{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MsType is not set"));
	}
	if !issetOdType{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OdType is not set"));
	}
	return nil
}

func (p *TimMessage) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := int8(v)
		p.MsType = temp
	}
	return nil
}

func (p *TimMessage) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.OdType = temp
	}
	return nil
}

func (p *TimMessage) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *TimMessage) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Mid = &v
	}
	return nil
}

func (p *TimMessage) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BnType = &v
	}
	return nil
}

func (p *TimMessage) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p.FromTid = &Tid{}
	if err := p.FromTid.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
	}
	return nil
}

func (p *TimMessage) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p.ToTid = &Tid{}
	if err := p.ToTid.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
	}
	return nil
}

func (p *TimMessage) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p.RoomTid = &Tid{}
	if err := p.RoomTid.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomTid), err)
	}
	return nil
}

func (p *TimMessage) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DataBinary = v
	}
	return nil
}

func (p *TimMessage) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.DataString = &v
	}
	return nil
}

func (p *TimMessage) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.IsOffline = &v
	}
	return nil
}

func (p *TimMessage) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TimMessage) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Udtype = &v
	}
	return nil
}

func (p *TimMessage) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(ctx); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Udshow = &v
	}
	return nil
}

func (p *TimMessage) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Extend = tMap
	for i := 0; i < size; i++ {
		var _key30 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key30 = v
		}
		var _val31 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val31 = v
		}
		p.Extend[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimMessage) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]byte, size)
	p.Extra = tMap
	for i := 0; i < size; i++ {
		var _key32 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key32 = v
		}
		var _val33 []byte
		if v, err := iprot.ReadBinary(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val33 = v
		}
		p.Extra[_key32] = _val33
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimMessage) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ToList = tSlice
	for i := 0; i < size; i++ {
		var _elem34 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem34 = v
		}
		p.ToList = append(p.ToList, _elem34)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
		if err := p.writeField6(ctx, oprot); err != nil { return err }
		if err := p.writeField7(ctx, oprot); err != nil { return err }
		if err := p.writeField8(ctx, oprot); err != nil { return err }
		if err := p.writeField9(ctx, oprot); err != nil { return err }
		if err := p.writeField10(ctx, oprot); err != nil { return err }
		if err := p.writeField11(ctx, oprot); err != nil { return err }
		if err := p.writeField12(ctx, oprot); err != nil { return err }
		if err := p.writeField13(ctx, oprot); err != nil { return err }
		if err := p.writeField14(ctx, oprot); err != nil { return err }
		if err := p.writeField15(ctx, oprot); err != nil { return err }
		if err := p.writeField16(ctx, oprot); err != nil { return err }
		if err := p.writeField17(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "msType", thrift.BYTE, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.MsType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msType: ", p), err)
	}
	return err
}

func (p *TimMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "odType", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:odType: ", p), err)
	}
	if err := oprot.WriteByte(ctx, int8(p.OdType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.odType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:odType: ", p), err)
	}
	return err
}

func (p *TimMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMid() {
		if err := oprot.WriteFieldBegin(ctx, "mid", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mid: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Mid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mid (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mid: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBnType() {
		if err := oprot.WriteFieldBegin(ctx, "bnType", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bnType: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.BnType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bnType (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bnType: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTid() {
		if err := oprot.WriteFieldBegin(ctx, "fromTid", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fromTid: ", p), err)
		}
		if err := p.FromTid.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fromTid: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToTid() {
		if err := oprot.WriteFieldBegin(ctx, "toTid", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:toTid: ", p), err)
		}
		if err := p.ToTid.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:toTid: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRoomTid() {
		if err := oprot.WriteFieldBegin(ctx, "roomTid", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:roomTid: ", p), err)
		}
		if err := p.RoomTid.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomTid), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:roomTid: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDataBinary() {
		if err := oprot.WriteFieldBegin(ctx, "dataBinary", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:dataBinary: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.DataBinary); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dataBinary (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:dataBinary: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDataString() {
		if err := oprot.WriteFieldBegin(ctx, "dataString", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:dataString: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.DataString)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dataString (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:dataString: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetIsOffline() {
		if err := oprot.WriteFieldBegin(ctx, "isOffline", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isOffline: ", p), err)
		}
		if err := oprot.WriteBool(ctx, bool(*p.IsOffline)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isOffline (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isOffline: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:timestamp: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUdtype() {
		if err := oprot.WriteFieldBegin(ctx, "udtype", thrift.I16, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:udtype: ", p), err)
		}
		if err := oprot.WriteI16(ctx, int16(*p.Udtype)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.udtype (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:udtype: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUdshow() {
		if err := oprot.WriteFieldBegin(ctx, "udshow", thrift.I16, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:udshow: ", p), err)
		}
		if err := oprot.WriteI16(ctx, int16(*p.Udshow)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.udshow (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:udshow: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:extend: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extend {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:extend: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err := oprot.WriteFieldBegin(ctx, "extra", thrift.MAP, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:extra: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extra)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Extra {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteBinary(ctx, v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:extra: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetToList() {
		if err := oprot.WriteFieldBegin(ctx, "ToList", thrift.LIST, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:ToList: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ToList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ToList {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:ToList: ", p), err)
		}
	}
	return err
}

func (p *TimMessage) Equals(other *TimMessage) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.MsType != other.MsType { return false }
	if p.OdType != other.OdType { return false }
	if p.ID != other.ID {
		if p.ID == nil || other.ID == nil {
			return false
		}
		if (*p.ID) != (*other.ID) { return false }
	}
	if p.Mid != other.Mid {
		if p.Mid == nil || other.Mid == nil {
			return false
		}
		if (*p.Mid) != (*other.Mid) { return false }
	}
	if p.BnType != other.BnType {
		if p.BnType == nil || other.BnType == nil {
			return false
		}
		if (*p.BnType) != (*other.BnType) { return false }
	}
	if !p.FromTid.Equals(other.FromTid) { return false }
	if !p.ToTid.Equals(other.ToTid) { return false }
	if !p.RoomTid.Equals(other.RoomTid) { return false }
	if bytes.Compare(p.DataBinary, other.DataBinary) != 0 { return false }
	if p.DataString != other.DataString {
		if p.DataString == nil || other.DataString == nil {
			return false
		}
		if (*p.DataString) != (*other.DataString) { return false }
	}
	if p.IsOffline != other.IsOffline {
		if p.IsOffline == nil || other.IsOffline == nil {
			return false
		}
		if (*p.IsOffline) != (*other.IsOffline) { return false }
	}
	if p.Timestamp != other.Timestamp {
		if p.Timestamp == nil || other.Timestamp == nil {
			return false
		}
		if (*p.Timestamp) != (*other.Timestamp) { return false }
	}
	if p.Udtype != other.Udtype {
		if p.Udtype == nil || other.Udtype == nil {
			return false
		}
		if (*p.Udtype) != (*other.Udtype) { return false }
	}
	if p.Udshow != other.Udshow {
		if p.Udshow == nil || other.Udshow == nil {
			return false
		}
		if (*p.Udshow) != (*other.Udshow) { return false }
	}
	if len(p.Extend) != len(other.Extend) { return false }
	for k, _tgt := range p.Extend {
		_src35 := other.Extend[k]
		if _tgt != _src35 { return false }
	}
	if len(p.Extra) != len(other.Extra) { return false }
	for k, _tgt := range p.Extra {
		_src36 := other.Extra[k]
		if bytes.Compare(_tgt, _src36) != 0 { return false }
	}
	if len(p.ToList) != len(other.ToList) { return false }
	for i, _tgt := range p.ToList {
		_src37 := other.ToList[i]
		if _tgt != _src37 { return false }
	}
	return true
}

func (p *TimMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimMessage(%+v)", *p)
}

func (p *TimMessage) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimMessage",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimMessage)(nil)

func (p *TimMessage) Validate() error {
	return nil
}

// Attributes:
//  - ID
//  - VNode
//  - Dtype
//  - Body
//  - FromNode
// 
type TimStream struct {
	ID int64 `thrift:"id,1,required" db:"id" json:"id"`
	VNode string `thrift:"VNode,2,required" db:"VNode" json:"VNode"`
	Dtype *int8 `thrift:"dtype,3" db:"dtype" json:"dtype,omitempty"`
	Body []byte `thrift:"body,4" db:"body" json:"body,omitempty"`
	FromNode string `thrift:"fromNode,5,required" db:"fromNode" json:"fromNode"`
}

func NewTimStream() *TimStream {
	return &TimStream{}
}



func (p *TimStream) GetID() int64 {
	return p.ID
}



func (p *TimStream) GetVNode() string {
	return p.VNode
}

var TimStream_Dtype_DEFAULT int8

func (p *TimStream) GetDtype() int8 {
	if !p.IsSetDtype() {
		return TimStream_Dtype_DEFAULT
	}
	return *p.Dtype
}

var TimStream_Body_DEFAULT []byte


func (p *TimStream) GetBody() []byte {
	return p.Body
}



func (p *TimStream) GetFromNode() string {
	return p.FromNode
}

func (p *TimStream) IsSetDtype() bool {
	return p.Dtype != nil
}

func (p *TimStream) IsSetBody() bool {
	return p.Body != nil
}

func (p *TimStream) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false;
	var issetVNode bool = false;
	var issetFromNode bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetID = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
				issetVNode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
				issetFromNode = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
	}
	if !issetVNode{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VNode is not set"));
	}
	if !issetFromNode{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FromNode is not set"));
	}
	return nil
}

func (p *TimStream) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimStream) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VNode = v
	}
	return nil
}

func (p *TimStream) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Dtype = &temp
	}
	return nil
}

func (p *TimStream) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *TimStream) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FromNode = v
	}
	return nil
}

func (p *TimStream) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimStream"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimStream) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *TimStream) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "VNode", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.VNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.VNode (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VNode: ", p), err)
	}
	return err
}

func (p *TimStream) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetDtype() {
		if err := oprot.WriteFieldBegin(ctx, "dtype", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dtype: ", p), err)
		}
		if err := oprot.WriteByte(ctx, int8(*p.Dtype)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dtype (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dtype: ", p), err)
		}
	}
	return err
}

func (p *TimStream) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err := oprot.WriteFieldBegin(ctx, "body", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:body: ", p), err)
		}
		if err := oprot.WriteBinary(ctx, p.Body); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.body (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:body: ", p), err)
		}
	}
	return err
}

func (p *TimStream) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fromNode", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fromNode: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.FromNode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fromNode (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fromNode: ", p), err)
	}
	return err
}

func (p *TimStream) Equals(other *TimStream) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID { return false }
	if p.VNode != other.VNode { return false }
	if p.Dtype != other.Dtype {
		if p.Dtype == nil || other.Dtype == nil {
			return false
		}
		if (*p.Dtype) != (*other.Dtype) { return false }
	}
	if bytes.Compare(p.Body, other.Body) != 0 { return false }
	if p.FromNode != other.FromNode { return false }
	return true
}

func (p *TimStream) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimStream(%+v)", *p)
}

func (p *TimStream) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimStream",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimStream)(nil)

func (p *TimStream) Validate() error {
	return nil
}

// Attributes:
//  - Ntype
//  - Nodelist
//  - Usermap
//  - Roommap
//  - Node
// 
type TimNodes struct {
	Ntype int32 `thrift:"ntype,1,required" db:"ntype" json:"ntype"`
	Nodelist []string `thrift:"nodelist,2" db:"nodelist" json:"nodelist,omitempty"`
	Usermap map[string]*TimUserBean `thrift:"usermap,3" db:"usermap" json:"usermap,omitempty"`
	Roommap map[string]*TimRoomBean `thrift:"roommap,4" db:"roommap" json:"roommap,omitempty"`
	Node *string `thrift:"node,5" db:"node" json:"node,omitempty"`
}

func NewTimNodes() *TimNodes {
	return &TimNodes{}
}



func (p *TimNodes) GetNtype() int32 {
	return p.Ntype
}

var TimNodes_Nodelist_DEFAULT []string


func (p *TimNodes) GetNodelist() []string {
	return p.Nodelist
}

var TimNodes_Usermap_DEFAULT map[string]*TimUserBean


func (p *TimNodes) GetUsermap() map[string]*TimUserBean {
	return p.Usermap
}

var TimNodes_Roommap_DEFAULT map[string]*TimRoomBean


func (p *TimNodes) GetRoommap() map[string]*TimRoomBean {
	return p.Roommap
}

var TimNodes_Node_DEFAULT string

func (p *TimNodes) GetNode() string {
	if !p.IsSetNode() {
		return TimNodes_Node_DEFAULT
	}
	return *p.Node
}

func (p *TimNodes) IsSetNodelist() bool {
	return p.Nodelist != nil
}

func (p *TimNodes) IsSetUsermap() bool {
	return p.Usermap != nil
}

func (p *TimNodes) IsSetRoommap() bool {
	return p.Roommap != nil
}

func (p *TimNodes) IsSetNode() bool {
	return p.Node != nil
}

func (p *TimNodes) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNtype bool = false;

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
				issetNtype = true
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNtype{
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ntype is not set"));
	}
	return nil
}

func (p *TimNodes) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ntype = v
	}
	return nil
}

func (p *TimNodes) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Nodelist = tSlice
	for i := 0; i < size; i++ {
		var _elem38 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem38 = v
		}
		p.Nodelist = append(p.Nodelist, _elem38)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimNodes) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*TimUserBean, size)
	p.Usermap = tMap
	for i := 0; i < size; i++ {
		var _key39 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key39 = v
		}
		_val40 := &TimUserBean{}
		if err := _val40.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val40), err)
		}
		p.Usermap[_key39] = _val40
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimNodes) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*TimRoomBean, size)
	p.Roommap = tMap
	for i := 0; i < size; i++ {
		var _key41 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key41 = v
		}
		_val42 := &TimRoomBean{}
		if err := _val42.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val42), err)
		}
		p.Roommap[_key41] = _val42
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimNodes) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Node = &v
	}
	return nil
}

func (p *TimNodes) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimNodes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
		if err := p.writeField5(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimNodes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ntype", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ntype: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Ntype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ntype (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ntype: ", p), err)
	}
	return err
}

func (p *TimNodes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNodelist() {
		if err := oprot.WriteFieldBegin(ctx, "nodelist", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nodelist: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Nodelist)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Nodelist {
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nodelist: ", p), err)
		}
	}
	return err
}

func (p *TimNodes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetUsermap() {
		if err := oprot.WriteFieldBegin(ctx, "usermap", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:usermap: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Usermap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Usermap {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:usermap: ", p), err)
		}
	}
	return err
}

func (p *TimNodes) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetRoommap() {
		if err := oprot.WriteFieldBegin(ctx, "roommap", thrift.MAP, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:roommap: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Roommap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Roommap {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:roommap: ", p), err)
		}
	}
	return err
}

func (p *TimNodes) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetNode() {
		if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:node: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Node)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.node (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:node: ", p), err)
		}
	}
	return err
}

func (p *TimNodes) Equals(other *TimNodes) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Ntype != other.Ntype { return false }
	if len(p.Nodelist) != len(other.Nodelist) { return false }
	for i, _tgt := range p.Nodelist {
		_src43 := other.Nodelist[i]
		if _tgt != _src43 { return false }
	}
	if len(p.Usermap) != len(other.Usermap) { return false }
	for k, _tgt := range p.Usermap {
		_src44 := other.Usermap[k]
		if !_tgt.Equals(_src44) { return false }
	}
	if len(p.Roommap) != len(other.Roommap) { return false }
	for k, _tgt := range p.Roommap {
		_src45 := other.Roommap[k]
		if !_tgt.Equals(_src45) { return false }
	}
	if p.Node != other.Node {
		if p.Node == nil || other.Node == nil {
			return false
		}
		if (*p.Node) != (*other.Node) { return false }
	}
	return true
}

func (p *TimNodes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimNodes(%+v)", *p)
}

func (p *TimNodes) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimNodes",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimNodes)(nil)

func (p *TimNodes) Validate() error {
	return nil
}

// Attributes:
//  - ID
//  - MessageList
// 
type TimMessageList struct {
	ID *int64 `thrift:"id,1" db:"id" json:"id,omitempty"`
	MessageList []*TimMessage `thrift:"messageList,2" db:"messageList" json:"messageList,omitempty"`
}

func NewTimMessageList() *TimMessageList {
	return &TimMessageList{}
}

var TimMessageList_ID_DEFAULT int64

func (p *TimMessageList) GetID() int64 {
	if !p.IsSetID() {
		return TimMessageList_ID_DEFAULT
	}
	return *p.ID
}

var TimMessageList_MessageList_DEFAULT []*TimMessage


func (p *TimMessageList) GetMessageList() []*TimMessage {
	return p.MessageList
}

func (p *TimMessageList) IsSetID() bool {
	return p.ID != nil
}

func (p *TimMessageList) IsSetMessageList() bool {
	return p.MessageList != nil
}

func (p *TimMessageList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimMessageList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *TimMessageList) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TimMessage, 0, size)
	p.MessageList = tSlice
	for i := 0; i < size; i++ {
		_elem46 := &TimMessage{}
		if err := _elem46.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
		}
		p.MessageList = append(p.MessageList, _elem46)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimMessageList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TimMessageList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimMessageList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *TimMessageList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageList() {
		if err := oprot.WriteFieldBegin(ctx, "messageList", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageList: ", p), err)
		}
		if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.MessageList)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.MessageList {
			if err := v.Write(ctx, oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(ctx); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageList: ", p), err)
		}
	}
	return err
}

func (p *TimMessageList) Equals(other *TimMessageList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID {
		if p.ID == nil || other.ID == nil {
			return false
		}
		if (*p.ID) != (*other.ID) { return false }
	}
	if len(p.MessageList) != len(other.MessageList) { return false }
	for i, _tgt := range p.MessageList {
		_src47 := other.MessageList[i]
		if !_tgt.Equals(_src47) { return false }
	}
	return true
}

func (p *TimMessageList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimMessageList(%+v)", *p)
}

func (p *TimMessageList) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*stub.TimMessageList",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*TimMessageList)(nil)

func (p *TimMessageList) Validate() error {
	return nil
}

